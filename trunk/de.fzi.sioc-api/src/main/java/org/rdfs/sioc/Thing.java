
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 18:30
 */
package org.rdfs.sioc;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 18:30
 * This class manages access to these properties:
 * <ul>
 *   <li> Linksto </li>
 *   <li> Link </li>
 *   <li> Space </li>
 *   <li> Id </li>
 *   <li> Subject </li>
 *   <li> Name </li>
 *   <li> Feed </li>
 *   <li> Topic </li>
 *   <li> Numviews </li>
 * </ul>
 * Schema Comment: This class acts as a catch-all for all properties, for which no domain has specified.
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfschema.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://rdfs.org/sioc/ns#links_to */
	public static final URI LINKSTO = new URIImpl("http://rdfs.org/sioc/ns#links_to",false);

    /** http://rdfs.org/sioc/ns#link */
	public static final URI LINK = new URIImpl("http://rdfs.org/sioc/ns#link",false);

    /** http://rdfs.org/sioc/ns#has_space */
	public static final URI SPACE = new URIImpl("http://rdfs.org/sioc/ns#has_space",false);

    /** http://rdfs.org/sioc/ns#id */
	public static final URI ID = new URIImpl("http://rdfs.org/sioc/ns#id",false);

    /** http://purl.org/dc/elements/1.1/subject */
	public static final URI SUBJECT = new URIImpl("http://purl.org/dc/elements/1.1/subject",false);

    /** http://rdfs.org/sioc/ns#name */
	public static final URI NAME = new URIImpl("http://rdfs.org/sioc/ns#name",false);

    /** http://rdfs.org/sioc/ns#feed */
	public static final URI FEED = new URIImpl("http://rdfs.org/sioc/ns#feed",false);

    /** http://rdfs.org/sioc/ns#topic */
	public static final URI TOPIC = new URIImpl("http://rdfs.org/sioc/ns#topic",false);

    /** http://rdfs.org/sioc/ns#num_views */
	public static final URI NUMVIEWS = new URIImpl("http://rdfs.org/sioc/ns#num_views",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#links_to",false),
      new URIImpl("http://rdfs.org/sioc/ns#link",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_space",false),
      new URIImpl("http://rdfs.org/sioc/ns#id",false),
      new URIImpl("http://purl.org/dc/elements/1.1/subject",false),
      new URIImpl("http://rdfs.org/sioc/ns#name",false),
      new URIImpl("http://rdfs.org/sioc/ns#feed",false),
      new URIImpl("http://rdfs.org/sioc/ns#topic",false),
      new URIImpl("http://rdfs.org/sioc/ns#num_views",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Thing ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public Thing ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Thing ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Thing ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Thing or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Thing getInstance(Model model, URI uri) throws Exception {
		return (Thing) getInstance(model, uri, Thing.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Thing[] getAllInstances() {
		return (Thing[]) getAllInstances(super.model, Thing.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Thing[] getAllInstances(Model model) {
		return (Thing[]) getAllInstances(model, Thing.class);
	}

	/**
	 * @return all A's that have a relation 'Linksto' to this Thing instance
	 */
	public Thing[] getAllSiocLinksto_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.LINKSTO, this.getResource(), Thing.class);
	}

	/**
	 * add 'Linksto'-Inverse
	 * @param value
	 */
	public void addSiocLinksto_Inverse(Thing value) {
		value.add( Thing.LINKSTO ,this);
	}


	/**
	 * @return all A's that have a relation 'Link' to this Thing instance
	 */
	public Thing[] getAllSiocLink_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.LINK, this.getResource(), Thing.class);
	}

	/**
	 * add 'Link'-Inverse
	 * @param value
	 */
	public void addSiocLink_Inverse(Thing value) {
		value.add( Thing.LINK ,this);
	}


	/**
	 * @return all A's that have a relation 'Subject' to this Thing instance
	 */
	public Thing[] getAllSiocSubject_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.SUBJECT, this.getResource(), Thing.class);
	}

	/**
	 * add 'Subject'-Inverse
	 * @param value
	 */
	public void addSiocSubject_Inverse(Thing value) {
		value.add( Thing.SUBJECT ,this);
	}


	/**
	 * @return all A's that have a relation 'Feed' to this Thing instance
	 */
	public Thing[] getAllSiocFeed_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.FEED, this.getResource(), Thing.class);
	}

	/**
	 * add 'Feed'-Inverse
	 * @param value
	 */
	public void addSiocFeed_Inverse(Thing value) {
		value.add( Thing.FEED ,this);
	}


	/**
	 * @return all A's that have a relation 'Topic' to this Thing instance
	 */
	public Thing[] getAllSiocTopic_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.TOPIC, this.getResource(), Thing.class);
	}

	/**
	 * add 'Topic'-Inverse
	 * @param value
	 */
	public void addSiocTopic_Inverse(Thing value) {
		value.add( Thing.TOPIC ,this);
	}


	/**
	 * @return all A's that have a relation 'Attachment' to this Thing instance
	 */
	public Post[] getAllSiocAttachment_Inverse() {
		return (Post[]) getAll_Inverse(Post.ATTACHMENT, this.getResource(), Post.class);
	}

	/**
	 * add 'Attachment'-Inverse
	 * @param value
	 */
	public void addSiocAttachment_Inverse(Post value) {
		value.add( Post.ATTACHMENT ,this);
	}


	/**
	 * @return all A's that have a relation 'Spaceof' to this Thing instance
	 */
	public Space[] getAllSiocSpaceof_Inverse() {
		return (Space[]) getAll_Inverse(Space.SPACEOF, this.getResource(), Space.class);
	}

	/**
	 * add 'Spaceof'-Inverse
	 * @param value
	 */
	public void addSiocSpaceof_Inverse(Space value) {
		value.add( Space.SPACEOF ,this);
	}


	/**
	 * @return all A's that have a relation 'Avatar' to this Thing instance
	 */
	public User[] getAllSiocAvatar_Inverse() {
		return (User[]) getAll_Inverse(User.AVATAR, this.getResource(), User.class);
	}

	/**
	 * add 'Avatar'-Inverse
	 * @param value
	 */
	public void addSiocAvatar_Inverse(User value) {
		value.add( User.AVATAR ,this);
	}


	/**
	 * @return all A's that have a relation 'Email' to this Thing instance
	 */
	public User[] getAllSiocEmail_Inverse() {
		return (User[]) getAll_Inverse(User.EMAIL, this.getResource(), User.class);
	}

	/**
	 * add 'Email'-Inverse
	 * @param value
	 */
	public void addSiocEmail_Inverse(User value) {
		value.add( User.EMAIL ,this);
	}



    /**
     * Schema Comment: Links extracted from hyperlinks within a SIOC concept, e.g., Post or Site.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocLinksto() {
		return (Thing) get(LINKSTO, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Links extracted from hyperlinks within a SIOC concept, e.g., Post or Site.
	 */
	public void setSiocLinksto( Thing value ) {
		set(LINKSTO, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Links extracted from hyperlinks within a SIOC concept, e.g., Post or Site.
	 */
	public void removeSiocLinksto( Thing value  ) {
		remove(LINKSTO, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, LINKSTO, value)
	 */
	public boolean hasSiocLinksto( Thing value) {
		return hasValue(LINKSTO, value);
	}

	/**
	 * @return true if the model contains a statement (this, LINKSTO, *)
	 */
	public boolean hasSiocLinksto() {
		return hasValue(LINKSTO);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Links extracted from hyperlinks within a SIOC concept, e.g., Post or Site.
	 */
	public void addSiocLinksto( Thing value  ) {
		add(LINKSTO, value );
	}

	/**
	 * @return all values
     * Schema Comment: Links extracted from hyperlinks within a SIOC concept, e.g., Post or Site.
	 */
	public Thing[] getAllSiocLinksto() {
		return (Thing[]) getAll(LINKSTO, Thing.class);
	}
  

    /**
     * Schema Comment: A URI of a document which contains this SIOC object.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocLink() {
		return (Thing) get(LINK, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A URI of a document which contains this SIOC object.
	 */
	public void setSiocLink( Thing value ) {
		set(LINK, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A URI of a document which contains this SIOC object.
	 */
	public void removeSiocLink( Thing value  ) {
		remove(LINK, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, LINK, value)
	 */
	public boolean hasSiocLink( Thing value) {
		return hasValue(LINK, value);
	}

	/**
	 * @return true if the model contains a statement (this, LINK, *)
	 */
	public boolean hasSiocLink() {
		return hasValue(LINK);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A URI of a document which contains this SIOC object.
	 */
	public void addSiocLink( Thing value  ) {
		add(LINK, value );
	}

	/**
	 * @return all values
     * Schema Comment: A URI of a document which contains this SIOC object.
	 */
	public Thing[] getAllSiocLink() {
		return (Thing[]) getAll(LINK, Thing.class);
	}
  

    /**
     * Schema Comment: A data Space which this resource is a part of.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Space getSiocSpace() {
		return (Space) get(SPACE, Space.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A data Space which this resource is a part of.
	 */
	public void setSiocSpace( Space value ) {
		set(SPACE, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A data Space which this resource is a part of.
	 */
	public void removeSiocSpace( Space value  ) {
		remove(SPACE, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SPACE, value)
	 */
	public boolean hasSiocSpace( Space value) {
		return hasValue(SPACE, value);
	}

	/**
	 * @return true if the model contains a statement (this, SPACE, *)
	 */
	public boolean hasSiocSpace() {
		return hasValue(SPACE);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A data Space which this resource is a part of.
	 */
	public void addSiocSpace( Space value  ) {
		add(SPACE, value );
	}

	/**
	 * @return all values
     * Schema Comment: A data Space which this resource is a part of.
	 */
	public Space[] getAllSiocSpace() {
		return (Space[]) getAll(SPACE, Space.class);
	}
  

    /**
     * Schema Comment: An identifier of a SIOC concept instance. For example, a user ID. Must be unique for instances of each type of SIOC concept within the same site.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getSiocId() {
		return (java.lang.String) get(ID, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: An identifier of a SIOC concept instance. For example, a user ID. Must be unique for instances of each type of SIOC concept within the same site.
	 */
	public void setSiocId( java.lang.String value ) {
		set(ID, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: An identifier of a SIOC concept instance. For example, a user ID. Must be unique for instances of each type of SIOC concept within the same site.
	 */
	public void removeSiocId( java.lang.String value  ) {
		remove(ID, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, ID, value)
	 */
	public boolean hasSiocId( java.lang.String value) {
		return hasValue(ID, value);
	}

	/**
	 * @return true if the model contains a statement (this, ID, *)
	 */
	public boolean hasSiocId() {
		return hasValue(ID);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: An identifier of a SIOC concept instance. For example, a user ID. Must be unique for instances of each type of SIOC concept within the same site.
	 */
	public void addSiocId( java.lang.String value  ) {
		add(ID, value );
	}

	/**
	 * @return all values
     * Schema Comment: An identifier of a SIOC concept instance. For example, a user ID. Must be unique for instances of each type of SIOC concept within the same site.
	 */
	public java.lang.String[] getAllSiocId() {
		return (java.lang.String[]) getAll(ID, java.lang.String.class);
	}
  

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocSubject() {
		return (Thing) get(SUBJECT, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setSiocSubject( Thing value ) {
		set(SUBJECT, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removeSiocSubject( Thing value  ) {
		remove(SUBJECT, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SUBJECT, value)
	 */
	public boolean hasSiocSubject( Thing value) {
		return hasValue(SUBJECT, value);
	}

	/**
	 * @return true if the model contains a statement (this, SUBJECT, *)
	 */
	public boolean hasSiocSubject() {
		return hasValue(SUBJECT);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addSiocSubject( Thing value  ) {
		add(SUBJECT, value );
	}

	/**
	 * @return all values
	 */
	public Thing[] getAllSiocSubject() {
		return (Thing[]) getAll(SUBJECT, Thing.class);
	}
  

    /**
     * Schema Comment: The name of a SIOC instance, e.g. a username for a User, group name for a Usergroup, etc.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getSiocName() {
		return (java.lang.String) get(NAME, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The name of a SIOC instance, e.g. a username for a User, group name for a Usergroup, etc.
	 */
	public void setSiocName( java.lang.String value ) {
		set(NAME, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The name of a SIOC instance, e.g. a username for a User, group name for a Usergroup, etc.
	 */
	public void removeSiocName( java.lang.String value  ) {
		remove(NAME, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, NAME, value)
	 */
	public boolean hasSiocName( java.lang.String value) {
		return hasValue(NAME, value);
	}

	/**
	 * @return true if the model contains a statement (this, NAME, *)
	 */
	public boolean hasSiocName() {
		return hasValue(NAME);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The name of a SIOC instance, e.g. a username for a User, group name for a Usergroup, etc.
	 */
	public void addSiocName( java.lang.String value  ) {
		add(NAME, value );
	}

	/**
	 * @return all values
     * Schema Comment: The name of a SIOC instance, e.g. a username for a User, group name for a Usergroup, etc.
	 */
	public java.lang.String[] getAllSiocName() {
		return (java.lang.String[]) getAll(NAME, java.lang.String.class);
	}
  

    /**
     * Schema Comment: A feed (e.g., RSS, Atom, etc.) pertaining to this resource (e.g., for a Forum, Site, User, etc.).
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocFeed() {
		return (Thing) get(FEED, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A feed (e.g., RSS, Atom, etc.) pertaining to this resource (e.g., for a Forum, Site, User, etc.).
	 */
	public void setSiocFeed( Thing value ) {
		set(FEED, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A feed (e.g., RSS, Atom, etc.) pertaining to this resource (e.g., for a Forum, Site, User, etc.).
	 */
	public void removeSiocFeed( Thing value  ) {
		remove(FEED, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, FEED, value)
	 */
	public boolean hasSiocFeed( Thing value) {
		return hasValue(FEED, value);
	}

	/**
	 * @return true if the model contains a statement (this, FEED, *)
	 */
	public boolean hasSiocFeed() {
		return hasValue(FEED);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A feed (e.g., RSS, Atom, etc.) pertaining to this resource (e.g., for a Forum, Site, User, etc.).
	 */
	public void addSiocFeed( Thing value  ) {
		add(FEED, value );
	}

	/**
	 * @return all values
     * Schema Comment: A feed (e.g., RSS, Atom, etc.) pertaining to this resource (e.g., for a Forum, Site, User, etc.).
	 */
	public Thing[] getAllSiocFeed() {
		return (Thing[]) getAll(FEED, Thing.class);
	}
  

    /**
     * Schema Comment: A topic of interest, linking to the appropriate URI, e.g., in the Open Directory Project or of a SKOS category.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocTopic() {
		return (Thing) get(TOPIC, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A topic of interest, linking to the appropriate URI, e.g., in the Open Directory Project or of a SKOS category.
	 */
	public void setSiocTopic( Thing value ) {
		set(TOPIC, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A topic of interest, linking to the appropriate URI, e.g., in the Open Directory Project or of a SKOS category.
	 */
	public void removeSiocTopic( Thing value  ) {
		remove(TOPIC, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, TOPIC, value)
	 */
	public boolean hasSiocTopic( Thing value) {
		return hasValue(TOPIC, value);
	}

	/**
	 * @return true if the model contains a statement (this, TOPIC, *)
	 */
	public boolean hasSiocTopic() {
		return hasValue(TOPIC);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A topic of interest, linking to the appropriate URI, e.g., in the Open Directory Project or of a SKOS category.
	 */
	public void addSiocTopic( Thing value  ) {
		add(TOPIC, value );
	}

	/**
	 * @return all values
     * Schema Comment: A topic of interest, linking to the appropriate URI, e.g., in the Open Directory Project or of a SKOS category.
	 */
	public Thing[] getAllSiocTopic() {
		return (Thing[]) getAll(TOPIC, Thing.class);
	}
  

    /**
     * Schema Comment: The number of times this Item, Thread, User profile, etc. has been viewed.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.Integer getSiocNumviews() {
		return (java.lang.Integer) get(NUMVIEWS, java.lang.Integer.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The number of times this Item, Thread, User profile, etc. has been viewed.
	 */
	public void setSiocNumviews( java.lang.Integer value ) {
		set(NUMVIEWS, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The number of times this Item, Thread, User profile, etc. has been viewed.
	 */
	public void removeSiocNumviews( java.lang.Integer value  ) {
		remove(NUMVIEWS, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, NUMVIEWS, value)
	 */
	public boolean hasSiocNumviews( java.lang.Integer value) {
		return hasValue(NUMVIEWS, value);
	}

	/**
	 * @return true if the model contains a statement (this, NUMVIEWS, *)
	 */
	public boolean hasSiocNumviews() {
		return hasValue(NUMVIEWS);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The number of times this Item, Thread, User profile, etc. has been viewed.
	 */
	public void addSiocNumviews( java.lang.Integer value  ) {
		add(NUMVIEWS, value );
	}

	/**
	 * @return all values
     * Schema Comment: The number of times this Item, Thread, User profile, etc. has been viewed.
	 */
	public java.lang.Integer[] getAllSiocNumviews() {
		return (java.lang.Integer[]) getAll(NUMVIEWS, java.lang.Integer.class);
	}
   
}

  
  
