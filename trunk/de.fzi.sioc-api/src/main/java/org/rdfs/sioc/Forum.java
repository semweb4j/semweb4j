
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 18:30
 */
package org.rdfs.sioc;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 18:30
 * This class manages access to these properties:
 * <ul>
 *   <li> Host </li>
 *   <li> Moderator </li>
 *   <li> Scopeof </li>
 * </ul>
 * Schema Comment: A discussion area on which Posts or entries are made.
 */
public class Forum extends Container {

    /** http://rdfs.org/sioc/ns#Forum */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#Forum", false);

    /** http://rdfs.org/sioc/ns#has_host */
	public static final URI HOST = new URIImpl("http://rdfs.org/sioc/ns#has_host",false);

    /** http://rdfs.org/sioc/ns#has_moderator */
	public static final URI MODERATOR = new URIImpl("http://rdfs.org/sioc/ns#has_moderator",false);

    /** http://rdfs.org/sioc/ns#scope_of */
	public static final URI SCOPEOF = new URIImpl("http://rdfs.org/sioc/ns#scope_of",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#has_host",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_moderator",false),
      new URIImpl("http://rdfs.org/sioc/ns#scope_of",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Forum ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Forum ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Forum ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public Forum ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Forum ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Forum ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Forum or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Forum getInstance(Model model, URI uri) throws Exception {
		return (Forum) getInstance(model, uri, Forum.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Forum[] getAllInstances() {
		return (Forum[]) getAllInstances(super.model, Forum.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Forum[] getAllInstances(Model model) {
		return (Forum[]) getAllInstances(model, Forum.class);
	}

	/**
	 * @return all A's that have a relation 'Hostof' to this Forum instance
	 */
	public Site[] getAllSiocHostof_Inverse() {
		return (Site[]) getAll_Inverse(Site.HOSTOF, this.getResource(), Site.class);
	}

	/**
	 * add 'Hostof'-Inverse
	 * @param value
	 */
	public void addSiocHostof_Inverse(Site value) {
		value.add( Site.HOSTOF ,this);
	}


	/**
	 * @return all A's that have a relation 'Scope' to this Forum instance
	 */
	public Role[] getAllSiocScope_Inverse() {
		return (Role[]) getAll_Inverse(Role.SCOPE, this.getResource(), Role.class);
	}

	/**
	 * add 'Scope'-Inverse
	 * @param value
	 */
	public void addSiocScope_Inverse(Role value) {
		value.add( Role.SCOPE ,this);
	}


	/**
	 * @return all A's that have a relation 'Moderatorof' to this Forum instance
	 */
	public User[] getAllSiocModeratorof_Inverse() {
		return (User[]) getAll_Inverse(User.MODERATOROF, this.getResource(), User.class);
	}

	/**
	 * add 'Moderatorof'-Inverse
	 * @param value
	 */
	public void addSiocModeratorof_Inverse(User value) {
		value.add( User.MODERATOROF ,this);
	}



    /**
     * Schema Comment: The Site that hosts this Forum.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Site getSiocHost() {
		return (Site) get(HOST, Site.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The Site that hosts this Forum.
	 */
	public void setSiocHost( Site value ) {
		set(HOST, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The Site that hosts this Forum.
	 */
	public void removeSiocHost( Site value  ) {
		remove(HOST, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, HOST, value)
	 */
	public boolean hasSiocHost( Site value) {
		return hasValue(HOST, value);
	}

	/**
	 * @return true if the model contains a statement (this, HOST, *)
	 */
	public boolean hasSiocHost() {
		return hasValue(HOST);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The Site that hosts this Forum.
	 */
	public void addSiocHost( Site value  ) {
		add(HOST, value );
	}

	/**
	 * @return all values
     * Schema Comment: The Site that hosts this Forum.
	 */
	public Site[] getAllSiocHost() {
		return (Site[]) getAll(HOST, Site.class);
	}
  

    /**
     * Schema Comment: A User who is a moderator of this Forum.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public User getSiocModerator() {
		return (User) get(MODERATOR, User.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A User who is a moderator of this Forum.
	 */
	public void setSiocModerator( User value ) {
		set(MODERATOR, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A User who is a moderator of this Forum.
	 */
	public void removeSiocModerator( User value  ) {
		remove(MODERATOR, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, MODERATOR, value)
	 */
	public boolean hasSiocModerator( User value) {
		return hasValue(MODERATOR, value);
	}

	/**
	 * @return true if the model contains a statement (this, MODERATOR, *)
	 */
	public boolean hasSiocModerator() {
		return hasValue(MODERATOR);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A User who is a moderator of this Forum.
	 */
	public void addSiocModerator( User value  ) {
		add(MODERATOR, value );
	}

	/**
	 * @return all values
     * Schema Comment: A User who is a moderator of this Forum.
	 */
	public User[] getAllSiocModerator() {
		return (User[]) getAll(MODERATOR, User.class);
	}
  

    /**
     * Schema Comment: A Role that has a scope of this Forum.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Role getSiocScopeof() {
		return (Role) get(SCOPEOF, Role.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Role that has a scope of this Forum.
	 */
	public void setSiocScopeof( Role value ) {
		set(SCOPEOF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Role that has a scope of this Forum.
	 */
	public void removeSiocScopeof( Role value  ) {
		remove(SCOPEOF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SCOPEOF, value)
	 */
	public boolean hasSiocScopeof( Role value) {
		return hasValue(SCOPEOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, SCOPEOF, *)
	 */
	public boolean hasSiocScopeof() {
		return hasValue(SCOPEOF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Role that has a scope of this Forum.
	 */
	public void addSiocScopeof( Role value  ) {
		add(SCOPEOF, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Role that has a scope of this Forum.
	 */
	public Role[] getAllSiocScopeof() {
		return (Role[]) getAll(SCOPEOF, Role.class);
	}
   
}

  
  
