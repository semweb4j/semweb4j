/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 26.01.08 12:47
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;





/**
 * This class manages access to these properties:
 * <ul>
 *   <li> DifferentFrom </li>
 *   <li> SameAs </li>
 *   <li> EquivalentProperty </li>
 *   <li> VersionInfo </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 26.01.08 12:47
 */
public class OwlThing extends org.ontoware.rdfreactor.schema.rdfs.Resource {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

	/** http://www.w3.org/2002/07/owl#Thing */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2002/07/owl#Thing", false);

    /** http://www.w3.org/2002/07/owl#differentFrom */
	public static final URI DIFFERENTFROM = new URIImpl("http://www.w3.org/2002/07/owl#differentFrom",false);

    /** http://www.w3.org/2002/07/owl#sameAs */
	public static final URI SAMEAS = new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false);

    /** http://www.w3.org/2002/07/owl#equivalentProperty */
	public static final URI EQUIVALENTPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false);

    /** http://www.w3.org/2002/07/owl#versionInfo */
	public static final URI VERSIONINFO = new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false);

    /** all property-URIs with this class as domain */
    @SuppressWarnings("hiding")
	public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#differentFrom",false),
      new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false), 
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected OwlThing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public OwlThing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public OwlThing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public OwlThing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public OwlThing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2002/07/owl#Thing).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends OwlThing> getAllInstance_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, OwlThing.class );
	}

    /**
	 * Delete all rdf:type from this instance. Other triples are not affected.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DifferentFrom' to this OwlThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDifferentFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlThing.DIFFERENTFROM, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SameAs' to this OwlThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlThing.SAMEAS, objectValue);
	}



     /**
     * Get all values of property DifferentFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDifferentFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DIFFERENTFROM);
	}
	
    /**
     * Get all values of property DifferentFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDifferentFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DIFFERENTFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DifferentFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDifferentFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DIFFERENTFROM);
	}

    /**
     * Get all values of property DifferentFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDifferentFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DIFFERENTFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DifferentFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlThing> getAllDifferentFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DIFFERENTFROM, OwlThing.class);
	}
	
    /**
     * Get all values of property DifferentFrom as a ReactorResult of OwlThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlThing> getAllDifferentFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DIFFERENTFROM, OwlThing.class);
	}

    /**
     * Get all values of property DifferentFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlThing> getAllDifferentFrom() {
		return Base.getAll(this.model, this.getResource(), DIFFERENTFROM, OwlThing.class);
	}

    /**
     * Get all values of property DifferentFrom as a ReactorResult of OwlThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlThing> getAllDifferentFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), DIFFERENTFROM, OwlThing.class);
	}
 
    /**
     * Adds a value to property DifferentFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDifferentFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DIFFERENTFROM, value);
	}
	
    /**
     * Adds a value to property DifferentFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDifferentFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DIFFERENTFROM, value);
	}
    /**
     * Adds a value to property DifferentFrom from an instance of OwlThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDifferentFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.add(model, instanceResource, DIFFERENTFROM, value);
	}
	
    /**
     * Adds a value to property DifferentFrom from an instance of OwlThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDifferentFrom(OwlThing value) {
		Base.add(this.model, this.getResource(), DIFFERENTFROM, value);
	}
  

    /**
     * Sets a value of property DifferentFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDifferentFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DIFFERENTFROM, value);
	}
	
    /**
     * Sets a value of property DifferentFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDifferentFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DIFFERENTFROM, value);
	}
    /**
     * Sets a value of property DifferentFrom from an instance of OwlThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDifferentFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.set(model, instanceResource, DIFFERENTFROM, value);
	}
	
    /**
     * Sets a value of property DifferentFrom from an instance of OwlThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDifferentFrom(OwlThing value) {
		Base.set(this.model, this.getResource(), DIFFERENTFROM, value);
	}
  


    /**
     * Removes a value of property DifferentFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDifferentFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DIFFERENTFROM, value);
	}
	
    /**
     * Removes a value of property DifferentFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDifferentFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DIFFERENTFROM, value);
	}
    /**
     * Removes a value of property DifferentFrom given as an instance of OwlThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDifferentFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.remove(model, instanceResource, DIFFERENTFROM, value);
	}
	
    /**
     * Removes a value of property DifferentFrom given as an instance of OwlThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDifferentFrom(OwlThing value) {
		Base.remove(this.model, this.getResource(), DIFFERENTFROM, value);
	}
  
    /**
     * Removes all values of property DifferentFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDifferentFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DIFFERENTFROM);
	}
	
    /**
     * Removes all values of property DifferentFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addDifferentFrom() {
		Base.removeAll(this.model, this.getResource(), DIFFERENTFROM);
	}
      /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SAMEAS);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SAMEAS);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlThing> getAllSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SAMEAS, OwlThing.class);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of OwlThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlThing> getAllSameAs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, OwlThing.class);
	}

    /**
     * Get all values of property SameAs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlThing> getAllSameAs() {
		return Base.getAll(this.model, this.getResource(), SAMEAS, OwlThing.class);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of OwlThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlThing> getAllSameAs_as() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, OwlThing.class);
	}
 
    /**
     * Adds a value to property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Adds a value to property SameAs from an instance of OwlThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs from an instance of OwlThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSameAs(OwlThing value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
  

    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Sets a value of property SameAs from an instance of OwlThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an instance of OwlThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSameAs(OwlThing value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
  


    /**
     * Removes a value of property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Removes a value of property SameAs given as an instance of OwlThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs given as an instance of OwlThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSameAs(OwlThing value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
  
    /**
     * Removes all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SAMEAS);
	}
	
    /**
     * Removes all values of property SameAs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addSameAs() {
		Base.removeAll(this.model, this.getResource(), SAMEAS);
	}
 

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, EQUIVALENTPROPERTY, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllVersionInfo_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, VERSIONINFO, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasValue' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasValue_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Restriction.HASVALUE, objectValue);
	}



     /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlThing> getAllEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTPROPERTY, OwlThing.class);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlThing> getAllEquivalentProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, OwlThing.class);
	}

    /**
     * Get all values of property EquivalentProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlThing> getAllEquivalentProperty() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTPROPERTY, OwlThing.class);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlThing> getAllEquivalentProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, OwlThing.class);
	}
 
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEquivalentProperty(OwlThing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  

    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEquivalentProperty(OwlThing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  


    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEquivalentProperty(OwlThing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  
    /**
     * Removes all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Removes all values of property EquivalentProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addEquivalentProperty() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}
      /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlThing> getAllVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VERSIONINFO, OwlThing.class);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlThing> getAllVersionInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, OwlThing.class);
	}

    /**
     * Get all values of property VersionInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlThing> getAllVersionInfo() {
		return Base.getAll(this.model, this.getResource(), VERSIONINFO, OwlThing.class);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlThing> getAllVersionInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, OwlThing.class);
	}
 
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addVersionInfo(OwlThing value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
  

    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setVersionInfo(OwlThing value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
  


    /**
     * Removes a value of property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlThing value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeVersionInfo(OwlThing value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
  
    /**
     * Removes all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Removes all values of property VersionInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addVersionInfo() {
		Base.removeAll(this.model, this.getResource(), VERSIONINFO);
	}

}