/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 11.11.07 18:35
 */
package org.ontoware.rdfreactor.schema.rdfschema.statik;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;


/**
 * 
 *  
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 11.11.07 18:35
 */
public class Literal extends Resource {

    /** http://www.w3.org/2000/01/rdf-schema#Literal */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Literal", false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
 
    };

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of classResource in the model
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}


	/**
	 * @return all A's that have a relation 'Comment' to this Literal instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComment_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Resource.COMMENT, objectValue);
	}


	/**
	 * @return all A's that have a relation 'Label' to this Literal instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLabel_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Resource.LABEL, objectValue);
	}


	/**
	 * @return all A's that have a relation 'Tag' to this Literal instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTag_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Class.TAG, objectValue);
	}

 
}

  
  
