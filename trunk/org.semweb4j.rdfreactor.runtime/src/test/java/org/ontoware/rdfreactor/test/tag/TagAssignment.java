
/**
 * generated by http://RDFReactor.ontoware.org on 19.12.06 14:46
 */
package org.ontoware.rdfreactor.test.tag;

import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.ontoware.org">RDFReactor</a> on 19.12.06 14:46
 * This class manages access to these properties:
 * <ul>
 *   <li> File </li>
 *   <li> Tag </li>
 * </ul>
 */
public class TagAssignment extends Thing {

    /** urn:tag#TagAssignment */
	public static final URI RDFS_CLASS = URIImpl.createURIWithoutChecking("urn:tag#TagAssignment");

    /** urn:tag#hasFile */
	public static final URI FILE = URIImpl.createURIWithoutChecking("urn:tag#hasFile");

    /** urn:tag#hasTag */
	public static final URI TAG = URIImpl.createURIWithoutChecking("urn:tag#hasTag");

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      URIImpl.createURIWithoutChecking("urn:tag#hasFile"),
      URIImpl.createURIWithoutChecking("urn:tag#hasTag") 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected TagAssignment ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public TagAssignment ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public TagAssignment ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public TagAssignment ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, URIImpl.create(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public TagAssignment ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public TagAssignment ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2GO model
	 * @param uri instance identifier
	 * @return an instance of TagAssignment or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static TagAssignment getInstance(Model model, URI uri) throws Exception {
		return (TagAssignment) getInstance(model, uri, TagAssignment.class);
	}

	/**
	 * @return all instances of this class
	 */
	public TagAssignment[] getAllInstances() {
		return (TagAssignment[]) getAllInstances(super.model, TagAssignment.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static TagAssignment[] getAllInstances(Model model) {
		return (TagAssignment[]) getAllInstances(model, TagAssignment.class);
	}


    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public File getFile() {
		return (File) get(FILE, File.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setFile( File value ) {
		set(FILE, value);
	}

 	/**
	 * removes a value
	 */
	public void removeFile( File value  ) {
		remove(FILE, value);
	}
  
	/**
	 * adds a value
	 */
	public void addFile( File value  ) {
		add(FILE, value );
	}
 
	/**
	 * returns all values
	 */
	public File[] getAllFile() {
		return (File[]) getAll(FILE, File.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Tag getTag() {
		return (Tag) get(TAG, Tag.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setTag( Tag value ) {
		set(TAG, value);
	}

 	/**
	 * removes a value
	 */
	public void removeTag( Tag value  ) {
		remove(TAG, value);
	}
  
	/**
	 * adds a value
	 */
	public void addTag( Tag value  ) {
		add(TAG, value );
	}
 
	/**
	 * returns all values
	 */
	public Tag[] getAllTag() {
		return (Tag[]) getAll(TAG, Tag.class);
	}
  }

  
  
