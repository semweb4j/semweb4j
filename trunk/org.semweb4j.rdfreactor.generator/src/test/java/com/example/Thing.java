/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 27.04.10 22:29
 */
package com.example;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> MaxCardinality </li>
 *   <li> MinCardinality </li>
 *   <li> Rrr </li>
 *   <li> Sss2 </li>
 *   <li> Urn_ex_ttt2 </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 27.04.10 22:29
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.w3.org/2002/07/owl#maxCardinality */
	public static final URI MAXCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality",false);

    /** http://www.w3.org/2002/07/owl#minCardinality */
	public static final URI MINCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#minCardinality",false);

    /** urn:ex:rrr */
	public static final URI RRR = new URIImpl("urn:ex:rrr",false);

    /** urn:ex:sss2 */
	public static final URI SSS2 = new URIImpl("urn:ex:sss2",false);

    /** urn:ex:ttt2 */
	public static final URI URN_EX_TTT2 = new URIImpl("urn:ex:ttt2",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality",false),
      new URIImpl("http://www.w3.org/2002/07/owl#minCardinality",false),
      new URIImpl("urn:ex:rrr",false),
      new URIImpl("urn:ex:sss2",false),
      new URIImpl("urn:ex:ttt2",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMaxCardinality_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MAXCARDINALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMaxCardinality_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MAXCARDINALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMaxCardinality_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MAXCARDINALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MinCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMinCardinality_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MINCARDINALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MinCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMinCardinality_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MINCARDINALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MinCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMinCardinality_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MINCARDINALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Rrr' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRrr_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RRR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Rrr' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRrr_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RRR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Rrr' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRrr_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RRR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sss2' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSss2_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SSS2, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sss2' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSss2_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SSS2, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sss2' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSss2_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SSS2, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sss1' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSss1_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, DDD.SSS1, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sss1' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSss1_Inverse() {
		return Base.getAll_Inverse(this.model, DDD.SSS1, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sss1' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSss1_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, DDD.SSS1, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1363271 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1363271 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMaxCardinality() {
		return Base.has(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1363271 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAXCARDINALITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1363271 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMaxCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAXCARDINALITY, value);
	}

     /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAXCARDINALITY, Thing.class);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMaxCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MaxCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMaxCardinality() {
		return Base.getAll(this.model, this.getResource(), MAXCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMaxCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, Thing.class);
	}
 
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Adds a value to property MaxCardinality from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMaxCardinality(Thing value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  

    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Sets a value of property MaxCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMaxCardinality(Thing value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  


    /**
     * Removes a value of property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Removes a value of property MaxCardinality given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMaxCardinality(Thing value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  
    /**
     * Removes all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Removes all values of property MaxCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMaxCardinality() {
		Base.removeAll(this.model, this.getResource(), MAXCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13706e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13706e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMinCardinality() {
		return Base.has(this.model, this.getResource(), MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13706e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MINCARDINALITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13706e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMinCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MINCARDINALITY, value);
	}

     /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MINCARDINALITY);
	}
	
    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MINCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MINCARDINALITY);
	}

    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MINCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MinCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MINCARDINALITY, Thing.class);
	}
	
    /**
     * Get all values of property MinCardinality as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMinCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MINCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MinCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMinCardinality() {
		return Base.getAll(this.model, this.getResource(), MINCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MinCardinality as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMinCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), MINCARDINALITY, Thing.class);
	}
 
    /**
     * Adds a value to property MinCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MinCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Adds a value to property MinCardinality from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MinCardinality from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMinCardinality(Thing value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}
  

    /**
     * Sets a value of property MinCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MinCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Sets a value of property MinCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MinCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMinCardinality(Thing value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}
  


    /**
     * Removes a value of property MinCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MinCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Removes a value of property MinCardinality given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MinCardinality given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMinCardinality(Thing value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}
  
    /**
     * Removes all values of property MinCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MINCARDINALITY);
	}
	
    /**
     * Removes all values of property MinCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMinCardinality() {
		Base.removeAll(this.model, this.getResource(), MINCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1abfd68 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRrr(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RRR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1abfd68 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRrr() {
		return Base.has(this.model, this.getResource(), RRR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1abfd68 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRrr(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RRR, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1abfd68 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRrr( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RRR, value);
	}

     /**
     * Get all values of property Rrr as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRrr_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RRR);
	}
	
    /**
     * Get all values of property Rrr as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRrr_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RRR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Rrr as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRrr_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RRR);
	}

    /**
     * Get all values of property Rrr as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRrr_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RRR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Rrr     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRrr(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RRR, Thing.class);
	}
	
    /**
     * Get all values of property Rrr as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRrr_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RRR, Thing.class);
	}

    /**
     * Get all values of property Rrr     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRrr() {
		return Base.getAll(this.model, this.getResource(), RRR, Thing.class);
	}

    /**
     * Get all values of property Rrr as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRrr_as() {
		return Base.getAll_as(this.model, this.getResource(), RRR, Thing.class);
	}
 
    /**
     * Adds a value to property Rrr as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRrr( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RRR, value);
	}
	
    /**
     * Adds a value to property Rrr as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRrr( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RRR, value);
	}
    /**
     * Adds a value to property Rrr from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRrr(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RRR, value);
	}
	
    /**
     * Adds a value to property Rrr from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRrr(Thing value) {
		Base.add(this.model, this.getResource(), RRR, value);
	}
  

    /**
     * Sets a value of property Rrr from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRrr( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RRR, value);
	}
	
    /**
     * Sets a value of property Rrr from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRrr( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RRR, value);
	}
    /**
     * Sets a value of property Rrr from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRrr(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RRR, value);
	}
	
    /**
     * Sets a value of property Rrr from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRrr(Thing value) {
		Base.set(this.model, this.getResource(), RRR, value);
	}
  


    /**
     * Removes a value of property Rrr as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRrr( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RRR, value);
	}
	
    /**
     * Removes a value of property Rrr as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRrr( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RRR, value);
	}
    /**
     * Removes a value of property Rrr given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRrr(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RRR, value);
	}
	
    /**
     * Removes a value of property Rrr given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRrr(Thing value) {
		Base.remove(this.model, this.getResource(), RRR, value);
	}
  
    /**
     * Removes all values of property Rrr     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRrr( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RRR);
	}
	
    /**
     * Removes all values of property Rrr	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRrr() {
		Base.removeAll(this.model, this.getResource(), RRR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a79c31 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSss2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SSS2);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a79c31 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSss2() {
		return Base.has(this.model, this.getResource(), SSS2);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a79c31 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSss2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SSS2, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a79c31 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSss2( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SSS2, value);
	}

     /**
     * Get all values of property Sss2 as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSss2_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SSS2);
	}
	
    /**
     * Get all values of property Sss2 as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSss2_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SSS2, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sss2 as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSss2_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SSS2);
	}

    /**
     * Get all values of property Sss2 as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSss2_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SSS2, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sss2     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSss2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SSS2, Thing.class);
	}
	
    /**
     * Get all values of property Sss2 as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSss2_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SSS2, Thing.class);
	}

    /**
     * Get all values of property Sss2     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSss2() {
		return Base.getAll(this.model, this.getResource(), SSS2, Thing.class);
	}

    /**
     * Get all values of property Sss2 as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSss2_as() {
		return Base.getAll_as(this.model, this.getResource(), SSS2, Thing.class);
	}
 
    /**
     * Adds a value to property Sss2 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSss2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SSS2, value);
	}
	
    /**
     * Adds a value to property Sss2 as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSss2( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SSS2, value);
	}
    /**
     * Adds a value to property Sss2 from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSss2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SSS2, value);
	}
	
    /**
     * Adds a value to property Sss2 from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSss2(Thing value) {
		Base.add(this.model, this.getResource(), SSS2, value);
	}
  

    /**
     * Sets a value of property Sss2 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSss2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SSS2, value);
	}
	
    /**
     * Sets a value of property Sss2 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSss2( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SSS2, value);
	}
    /**
     * Sets a value of property Sss2 from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSss2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SSS2, value);
	}
	
    /**
     * Sets a value of property Sss2 from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSss2(Thing value) {
		Base.set(this.model, this.getResource(), SSS2, value);
	}
  


    /**
     * Removes a value of property Sss2 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSss2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SSS2, value);
	}
	
    /**
     * Removes a value of property Sss2 as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSss2( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SSS2, value);
	}
    /**
     * Removes a value of property Sss2 given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSss2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SSS2, value);
	}
	
    /**
     * Removes a value of property Sss2 given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSss2(Thing value) {
		Base.remove(this.model, this.getResource(), SSS2, value);
	}
  
    /**
     * Removes all values of property Sss2     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSss2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SSS2);
	}
	
    /**
     * Removes all values of property Sss2	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSss2() {
		Base.removeAll(this.model, this.getResource(), SSS2);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ca1a93 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUrn_ex_ttt2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, URN_EX_TTT2);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ca1a93 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUrn_ex_ttt2() {
		return Base.has(this.model, this.getResource(), URN_EX_TTT2);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ca1a93 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUrn_ex_ttt2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, URN_EX_TTT2, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ca1a93 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUrn_ex_ttt2( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), URN_EX_TTT2, value);
	}

     /**
     * Get all values of property Urn_ex_ttt2 as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUrn_ex_ttt2_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, URN_EX_TTT2);
	}
	
    /**
     * Get all values of property Urn_ex_ttt2 as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUrn_ex_ttt2_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URN_EX_TTT2, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Urn_ex_ttt2 as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUrn_ex_ttt2_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), URN_EX_TTT2);
	}

    /**
     * Get all values of property Urn_ex_ttt2 as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUrn_ex_ttt2_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), URN_EX_TTT2, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Urn_ex_ttt2     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<FFF> getAllUrn_ex_ttt2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, URN_EX_TTT2, FFF.class);
	}
	
    /**
     * Get all values of property Urn_ex_ttt2 as a ReactorResult of FFF 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<FFF> getAllUrn_ex_ttt2_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URN_EX_TTT2, FFF.class);
	}

    /**
     * Get all values of property Urn_ex_ttt2     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<FFF> getAllUrn_ex_ttt2() {
		return Base.getAll(this.model, this.getResource(), URN_EX_TTT2, FFF.class);
	}

    /**
     * Get all values of property Urn_ex_ttt2 as a ReactorResult of FFF 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<FFF> getAllUrn_ex_ttt2_as() {
		return Base.getAll_as(this.model, this.getResource(), URN_EX_TTT2, FFF.class);
	}
 
    /**
     * Adds a value to property Urn_ex_ttt2 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUrn_ex_ttt2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, URN_EX_TTT2, value);
	}
	
    /**
     * Adds a value to property Urn_ex_ttt2 as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUrn_ex_ttt2( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), URN_EX_TTT2, value);
	}
    /**
     * Adds a value to property Urn_ex_ttt2 from an instance of FFF 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUrn_ex_ttt2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, FFF value) {
		Base.add(model, instanceResource, URN_EX_TTT2, value);
	}
	
    /**
     * Adds a value to property Urn_ex_ttt2 from an instance of FFF 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUrn_ex_ttt2(FFF value) {
		Base.add(this.model, this.getResource(), URN_EX_TTT2, value);
	}
  

    /**
     * Sets a value of property Urn_ex_ttt2 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUrn_ex_ttt2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, URN_EX_TTT2, value);
	}
	
    /**
     * Sets a value of property Urn_ex_ttt2 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUrn_ex_ttt2( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), URN_EX_TTT2, value);
	}
    /**
     * Sets a value of property Urn_ex_ttt2 from an instance of FFF 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUrn_ex_ttt2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, FFF value) {
		Base.set(model, instanceResource, URN_EX_TTT2, value);
	}
	
    /**
     * Sets a value of property Urn_ex_ttt2 from an instance of FFF 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUrn_ex_ttt2(FFF value) {
		Base.set(this.model, this.getResource(), URN_EX_TTT2, value);
	}
  


    /**
     * Removes a value of property Urn_ex_ttt2 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUrn_ex_ttt2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, URN_EX_TTT2, value);
	}
	
    /**
     * Removes a value of property Urn_ex_ttt2 as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUrn_ex_ttt2( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), URN_EX_TTT2, value);
	}
    /**
     * Removes a value of property Urn_ex_ttt2 given as an instance of FFF 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUrn_ex_ttt2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, FFF value) {
		Base.remove(model, instanceResource, URN_EX_TTT2, value);
	}
	
    /**
     * Removes a value of property Urn_ex_ttt2 given as an instance of FFF 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUrn_ex_ttt2(FFF value) {
		Base.remove(this.model, this.getResource(), URN_EX_TTT2, value);
	}
  
    /**
     * Removes all values of property Urn_ex_ttt2     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUrn_ex_ttt2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, URN_EX_TTT2);
	}
	
    /**
     * Removes all values of property Urn_ex_ttt2	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUrn_ex_ttt2() {
		Base.removeAll(this.model, this.getResource(), URN_EX_TTT2);
	}
 }