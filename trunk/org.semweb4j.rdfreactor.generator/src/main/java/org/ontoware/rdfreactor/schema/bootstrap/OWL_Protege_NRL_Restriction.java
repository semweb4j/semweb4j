/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 26.01.08 02:10
 */
package org.ontoware.rdfreactor.schema.bootstrap;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.vocabulary.OWL;
import org.ontoware.rdf2go.vocabulary.RDF;
import org.ontoware.rdfreactor.generator.NRL;
import org.ontoware.rdfreactor.generator.Protege;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 * <li> AllValuesFrom </li>
 * <li> Cardinality </li>
 * <li> HasValue </li>
 * <li> MaxCardinality </li>
 * <li> MinCardinality </li>
 * <li> OnProperty </li>
 * <li> SomeValuesFrom </li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 26.01.08 02:10
 */
public class OWL_Protege_NRL_Restriction extends OwlClass {

	/** http://www.w3.org/2002/07/owl#Restriction */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl(
			"http://www.w3.org/2002/07/owl#Restriction", false);

	/** http://www.w3.org/2002/07/owl#allValuesFrom */
	public static final URI ALLVALUESFROM = new URIImpl(
			"http://www.w3.org/2002/07/owl#allValuesFrom", false);

	/** http://www.w3.org/2002/07/owl#cardinality */
	public static final URI CARDINALITY = new URIImpl(
			"http://www.w3.org/2002/07/owl#cardinality", false);

	/** http://www.w3.org/2002/07/owl#hasValue */
	public static final URI HASVALUE = new URIImpl(
			"http://www.w3.org/2002/07/owl#hasValue", false);

	/** http://www.w3.org/2002/07/owl#maxCardinality */
	public static final URI MAXCARDINALITY = new URIImpl(
			"http://www.w3.org/2002/07/owl#maxCardinality", false);

	/** http://www.w3.org/2002/07/owl#minCardinality */
	public static final URI MINCARDINALITY = new URIImpl(
			"http://www.w3.org/2002/07/owl#minCardinality", false);

	/** http://www.w3.org/2002/07/owl#onProperty */
	public static final URI ONPROPERTY = new URIImpl(
			"http://www.w3.org/2002/07/owl#onProperty", false);

	/** http://www.w3.org/2002/07/owl#someValuesFrom */
	public static final URI SOMEVALUESFROM = new URIImpl(
			"http://www.w3.org/2002/07/owl#someValuesFrom", false);

	/** all property-URIs with this class as domain */
	@SuppressWarnings("hiding")
	public static final URI[] MANAGED_URIS = {
			new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom", false),
			new URIImpl("http://www.w3.org/2002/07/owl#cardinality", false),
			new URIImpl("http://www.w3.org/2002/07/owl#hasValue", false),
			new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality", false),
			new URIImpl("http://www.w3.org/2002/07/owl#minCardinality", false),
			new URIImpl("http://www.w3.org/2002/07/owl#onProperty", false),
			new URIImpl("http://www.w3.org/2002/07/owl#someValuesFrom", false) };

	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI. Creating
	 * two wrappers for the same instanceURI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI
	 *            URI of RDFS class
	 * @param instanceIdentifier
	 *            Resource that identifies this instance
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 * 
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected OWL_Protege_NRL_Restriction(Model model, URI classURI,
			org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
			boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI. Creating
	 * two wrappers for the same instanceURI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier
	 *            an RDF2Go Resource identifying this instance
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 * 
	 * [Generated from RDFReactor template rule #c2]
	 */
	public OWL_Protege_NRL_Restriction(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
			boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as
	 * a String. Creating two wrappers for the same URI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString
	 *            a URI given as a String
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 * @throws ModelRuntimeException
	 *             if URI syntax is wrong
	 * 
	 * [Generated from RDFReactor template rule #c7]
	 */
	public OWL_Protege_NRL_Restriction(Model model, String uriString,
			boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode
	 *            BlankNode of this instance
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 * 
	 * [Generated from RDFReactor template rule #c8]
	 */
	public OWL_Protege_NRL_Restriction(Model model, BlankNode bnode,
			boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a randomly
	 * generated URI. Creating two wrappers results in different URIs.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 * 
	 * [Generated from RDFReactor template rule #c9]
	 */
	public OWL_Protege_NRL_Restriction(Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

	// /////////////////////////////////////////////////////////////////
	// typing

	/**
	 * Create a new instance of this class in the model. That is, create the
	 * statement (instanceResource, RDF.type,
	 * http://www.w3.org/2002/07/owl#Restriction).
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param instanceResource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #1]
	 */
	public static void createInstance(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model
	 *            an RDF2Go model
	 * @param instanceResource
	 *            an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the
	 *         model
	 * 
	 * [Generated from RDFReactor template rule #2]
	 */
	public static boolean hasInstance(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model
	 *            an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 * 
	 * [Generated from RDFReactor template rule #3]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstancesAsRdf2GoResources(
			Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model
	 *            an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 *         which can convenicently be converted to iterator, list or array.
	 * 
	 * [Generated from RDFReactor template rule #3-as]
	 */
	public static ReactorResult<? extends OWL_Protege_NRL_Restriction> getAllInstance_as(
			Model model) {
		return Base.getAll_as(model, RDFS_CLASS, RDF.type,
				OWL_Protege_NRL_Restriction.class);
	}

	/**
	 * @param model
	 *            an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 * 
	 * [Generated from RDFReactor template rule #3-list]
	 */
	public static java.util.List<? extends OWL_Protege_NRL_Restriction> getAllInstances_asList(
			Model model) {
		return Base.getAllInstances_asList(model, RDFS_CLASS,
				OWL_Protege_NRL_Restriction.class);
	}

	/**
	 * @param model
	 *            an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 * 
	 * [Generated from RDFReactor template rule #3-array]
	 */
	public static OWL_Protege_NRL_Restriction[] getAllInstances_asArray(
			Model model) {
		return Base.getAllInstances_asArray(model, RDFS_CLASS,
				OWL_Protege_NRL_Restriction.class);
	}

	/**
	 * Delete all rdf:type from this instance. Other triples are not affected.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param instanceResource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #4]
	 */
	public static void deleteInstance(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	// /////////////////////////////////////////////////////////////////
	// property access methods

	/**
	 * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNode(model, instanceResource, ALLVALUESFROM);
	}

	/**
	 * Get all values of property AllValuesFrom as a List of RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static-list]
	 */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNodeList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNodeList(model, instanceResource, ALLVALUESFROM);
	}

	/**
	 * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes
	 * 
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic]
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode() {
		return Base
				.getAll_asNode(this.model, this.getResource(), ALLVALUESFROM);
	}

	/**
	 * Get all values of property AllValuesFrom as a List of RDF2Go nodes
	 * 
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic-list]
	 */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNodeList() {
		return Base
				.getAll_asNodeList(this.model, this.getResource(),
						ALLVALUESFROM);
	}

	/**
	 * Get all values of property AllValuesFrom *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static]
	 */
	public static ClosableIterator<Class> getAllAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALLVALUESFROM, Class.class);
	}

	/**
	 * Get all values of property AllValuesFrom as a List of Class
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static-list]
	 */
	public static java.util.List<Class> getAllAllValuesFrom_asList(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, ALLVALUESFROM,
				Class.class);
	}

	/**
	 * Get all values of property AllValuesFrom *
	 * 
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic]
	 */
	public ClosableIterator<Class> getAllAllValuesFrom() {
		return Base.getAll(this.model, this.getResource(), ALLVALUESFROM,
				Class.class);
	}

	/**
	 * Get all values of property AllValuesFrom as a List of Class
	 * 
	 * @return a List of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic-list]
	 */
	public java.util.List<Class> getAllAllValuesFrom_asList() {
		return Base.getAll_asList(this.model, this.getResource(),
				ALLVALUESFROM, Class.class);
	}

	/**
	 * Adds a value to property AllValuesFrom as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1static]
	 */
	public static void addAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}

	/**
	 * Adds a value to property AllValuesFrom as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1dynamic]
	 */
	public void addAllValuesFrom(org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}

	/**
	 * Adds a value to property AllValuesFrom from an instance of Class
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #add3static]
	 */
	public static void addAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Class value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}

	/**
	 * Adds a value to property AllValuesFrom from an instance of Class
	 * 
	 * [Generated from RDFReactor template rule #add4dynamic]
	 */
	public void addAllValuesFrom(Class value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}

	/**
	 * Sets a value of property AllValuesFrom from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be set
	 * 
	 * [Generated from RDFReactor template rule #set1static]
	 */
	public static void setAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}

	/**
	 * Sets a value of property AllValuesFrom from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set1dynamic]
	 */
	public void setAllValuesFrom(org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}

	/**
	 * Sets a value of property AllValuesFrom from an instance of Class First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set3static]
	 */
	public static void setAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Class value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}

	/**
	 * Sets a value of property AllValuesFrom from an instance of Class First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set4dynamic]
	 */
	public void setAllValuesFrom(Class value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}

	/**
	 * Removes a value of property AllValuesFrom as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1static]
	 */
	public static void removeAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}

	/**
	 * Removes a value of property AllValuesFrom as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1dynamic]
	 */
	public void removeAllValuesFrom(org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}

	/**
	 * Removes a value of property AllValuesFrom given as an instance of Class
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove3static]
	 */
	public static void removeAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Class value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}

	/**
	 * Removes a value of property AllValuesFrom given as an instance of Class
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove4dynamic]
	 */
	public void removeAllValuesFrom(Class value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}

	/**
	 * Removes all values of property AllValuesFrom *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #removeall1static]
	 */
	public static void removeAllAllValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALLVALUESFROM);
	}

	/**
	 * Removes all values of property AllValuesFrom * [Generated from RDFReactor
	 * template rule #removeall1dynamic]
	 */
	public void addAllValuesFrom() {
		Base.removeAll(this.model, this.getResource(), ALLVALUESFROM);
	}

	/**
	 * Get all values of property Cardinality as an Iterator over RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNode(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNode(model, instanceResource, CARDINALITY);
	}

	/**
	 * Get all values of property Cardinality as a List of RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static-list]
	 */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNodeList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNodeList(model, instanceResource, CARDINALITY);
	}

	/**
	 * Get all values of property Cardinality as an Iterator over RDF2Go nodes
	 * 
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic]
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNode() {
		return Base
				.getAll_asNode(this.model, this.getResource(), CARDINALITY);
	}

	/**
	 * Get all values of property Cardinality as a List of RDF2Go nodes
	 * 
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic-list]
	 */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNodeList() {
		return Base
				.getAll_asNodeList(this.model, this.getResource(), CARDINALITY);
	}

	/**
	 * Get all values of property Cardinality *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static]
	 */
	public static ClosableIterator<Integer> getAllCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CARDINALITY, Integer.class);
	}

	/**
	 * Get all values of property Cardinality as a List of Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static-list]
	 */
	public static java.util.List<Integer> getAllCardinality_asList(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, CARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property Cardinality *
	 * 
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic]
	 */
	public ClosableIterator<Integer> getAllCardinality() {
		return Base.getAll(this.model, this.getResource(), CARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property Cardinality as a List of Integer
	 * 
	 * @return a List of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic-list]
	 */
	public java.util.List<Integer> getAllCardinality_asList() {
		return Base.getAll_asList(this.model, this.getResource(), CARDINALITY,
				Integer.class);
	}

	/**
	 * Adds a value to property Cardinality as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1static]
	 */
	public static void addCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CARDINALITY, value);
	}

	/**
	 * Adds a value to property Cardinality as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1dynamic]
	 */
	public void addCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CARDINALITY, value);
	}

	/**
	 * Adds a value to property Cardinality from an instance of Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #add3static]
	 */
	public static void addCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.add(model, instanceResource, CARDINALITY, value);
	}

	/**
	 * Adds a value to property Cardinality from an instance of Integer
	 * 
	 * [Generated from RDFReactor template rule #add4dynamic]
	 */
	public void addCardinality(Integer value) {
		Base.add(this.model, this.getResource(), CARDINALITY, value);
	}

	/**
	 * Sets a value of property Cardinality from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be set
	 * 
	 * [Generated from RDFReactor template rule #set1static]
	 */
	public static void setCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CARDINALITY, value);
	}

	/**
	 * Sets a value of property Cardinality from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set1dynamic]
	 */
	public void setCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CARDINALITY, value);
	}

	/**
	 * Sets a value of property Cardinality from an instance of Integer First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set3static]
	 */
	public static void setCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.set(model, instanceResource, CARDINALITY, value);
	}

	/**
	 * Sets a value of property Cardinality from an instance of Integer First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set4dynamic]
	 */
	public void setCardinality(Integer value) {
		Base.set(this.model, this.getResource(), CARDINALITY, value);
	}

	/**
	 * Removes a value of property Cardinality as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1static]
	 */
	public static void removeCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CARDINALITY, value);
	}

	/**
	 * Removes a value of property Cardinality as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1dynamic]
	 */
	public void removeCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CARDINALITY, value);
	}

	/**
	 * Removes a value of property Cardinality given as an instance of Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove3static]
	 */
	public static void removeCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.remove(model, instanceResource, CARDINALITY, value);
	}

	/**
	 * Removes a value of property Cardinality given as an instance of Integer
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove4dynamic]
	 */
	public void removeCardinality(Integer value) {
		Base.remove(this.model, this.getResource(), CARDINALITY, value);
	}

	/**
	 * Removes all values of property Cardinality *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #removeall1static]
	 */
	public static void removeAllCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CARDINALITY);
	}

	/**
	 * Removes all values of property Cardinality * [Generated from RDFReactor
	 * template rule #removeall1dynamic]
	 */
	public void addCardinality() {
		Base.removeAll(this.model, this.getResource(), CARDINALITY);
	}

	/**
	 * Get all values of property HasValue as an Iterator over RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasValue_asNode(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNode(model, instanceResource, HASVALUE);
	}

	/**
	 * Get all values of property HasValue as a List of RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static-list]
	 */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllHasValue_asNodeList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNodeList(model, instanceResource, HASVALUE);
	}

	/**
	 * Get all values of property HasValue as an Iterator over RDF2Go nodes
	 * 
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic]
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasValue_asNode() {
		return Base
				.getAll_asNode(this.model, this.getResource(), HASVALUE);
	}

	/**
	 * Get all values of property HasValue as a List of RDF2Go nodes
	 * 
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic-list]
	 */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllHasValue_asNodeList() {
		return Base
				.getAll_asNodeList(this.model, this.getResource(), HASVALUE);
	}

	/**
	 * Get all values of property HasValue *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static]
	 */
	public static ClosableIterator<Resource> getAllHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASVALUE, Resource.class);
	}

	/**
	 * Get all values of property HasValue as a List of Resource
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static-list]
	 */
	public static java.util.List<Resource> getAllHasValue_asList(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, HASVALUE,
				Resource.class);
	}

	/**
	 * Get all values of property HasValue *
	 * 
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic]
	 */
	public ClosableIterator<Resource> getAllHasValue() {
		return Base.getAll(this.model, this.getResource(), HASVALUE,
				Resource.class);
	}

	/**
	 * Get all values of property HasValue as a List of Resource
	 * 
	 * @return a List of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic-list]
	 */
	public java.util.List<Resource> getAllHasValue_asList() {
		return Base.getAll_asList(this.model, this.getResource(), HASVALUE,
				Resource.class);
	}

	/**
	 * Adds a value to property HasValue as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1static]
	 */
	public static void addHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASVALUE, value);
	}

	/**
	 * Adds a value to property HasValue as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1dynamic]
	 */
	public void addHasValue(org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASVALUE, value);
	}

	/**
	 * Adds a value to property HasValue from an instance of Resource
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #add3static]
	 */
	public static void addHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Resource value) {
		Base.add(model, instanceResource, HASVALUE, value);
	}

	/**
	 * Adds a value to property HasValue from an instance of Resource
	 * 
	 * [Generated from RDFReactor template rule #add4dynamic]
	 */
	public void addHasValue(Resource value) {
		Base.add(this.model, this.getResource(), HASVALUE, value);
	}

	/**
	 * Sets a value of property HasValue from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be set
	 * 
	 * [Generated from RDFReactor template rule #set1static]
	 */
	public static void setHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASVALUE, value);
	}

	/**
	 * Sets a value of property HasValue from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set1dynamic]
	 */
	public void setHasValue(org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASVALUE, value);
	}

	/**
	 * Sets a value of property HasValue from an instance of Resource First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set3static]
	 */
	public static void setHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Resource value) {
		Base.set(model, instanceResource, HASVALUE, value);
	}

	/**
	 * Sets a value of property HasValue from an instance of Resource First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set4dynamic]
	 */
	public void setHasValue(Resource value) {
		Base.set(this.model, this.getResource(), HASVALUE, value);
	}

	/**
	 * Removes a value of property HasValue as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1static]
	 */
	public static void removeHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASVALUE, value);
	}

	/**
	 * Removes a value of property HasValue as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1dynamic]
	 */
	public void removeHasValue(org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASVALUE, value);
	}

	/**
	 * Removes a value of property HasValue given as an instance of Resource
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove3static]
	 */
	public static void removeHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Resource value) {
		Base.remove(model, instanceResource, HASVALUE, value);
	}

	/**
	 * Removes a value of property HasValue given as an instance of Resource
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove4dynamic]
	 */
	public void removeHasValue(Resource value) {
		Base.remove(this.model, this.getResource(), HASVALUE, value);
	}

	/**
	 * Removes all values of property HasValue *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #removeall1static]
	 */
	public static void removeAllHasValue(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASVALUE);
	}

	/**
	 * Removes all values of property HasValue * [Generated from RDFReactor
	 * template rule #removeall1dynamic]
	 */
	public void addHasValue() {
		Base.removeAll(this.model, this.getResource(), HASVALUE);
	}

	/**
	 * Get all values of property MaxCardinality as an Iterator over RDF2Go
	 * nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNode(model, instanceResource, MAXCARDINALITY);
	}

	/**
	 * Get all values of property MaxCardinality as a List of RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static-list]
	 */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNodeList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNodeList(model, instanceResource, MAXCARDINALITY);
	}

	/**
	 * Get all values of property MaxCardinality as an Iterator over RDF2Go
	 * nodes
	 * 
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic]
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode() {
		return Base
				.getAll_asNode(this.model, this.getResource(), MAXCARDINALITY);
	}

	/**
	 * Get all values of property MaxCardinality as a List of RDF2Go nodes
	 * 
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic-list]
	 */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNodeList() {
		return Base
				.getAll_asNodeList(this.model, this.getResource(),
						MAXCARDINALITY);
	}

	/**
	 * Get all values of property MaxCardinality *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static]
	 */
	public static ClosableIterator<Integer> getAllMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAXCARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property MaxCardinality as a List of Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static-list]
	 */
	public static java.util.List<Integer> getAllMaxCardinality_asList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, MAXCARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property MaxCardinality *
	 * 
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic]
	 */
	public ClosableIterator<Integer> getAllMaxCardinality() {
		return Base.getAll(this.model, this.getResource(), MAXCARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property MaxCardinality as a List of Integer
	 * 
	 * @return a List of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic-list]
	 */
	public java.util.List<Integer> getAllMaxCardinality_asList() {
		return Base.getAll_asList(this.model, this.getResource(),
				MAXCARDINALITY, Integer.class);
	}

	/**
	 * Adds a value to property MaxCardinality as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1static]
	 */
	public static void addMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}

	/**
	 * Adds a value to property MaxCardinality as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1dynamic]
	 */
	public void addMaxCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}

	/**
	 * Adds a value to property MaxCardinality from an instance of Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #add3static]
	 */
	public static void addMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}

	/**
	 * Adds a value to property MaxCardinality from an instance of Integer
	 * 
	 * [Generated from RDFReactor template rule #add4dynamic]
	 */
	public void addMaxCardinality(Integer value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}

	/**
	 * Sets a value of property MaxCardinality from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be set
	 * 
	 * [Generated from RDFReactor template rule #set1static]
	 */
	public static void setMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}

	/**
	 * Sets a value of property MaxCardinality from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set1dynamic]
	 */
	public void setMaxCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}

	/**
	 * Sets a value of property MaxCardinality from an instance of Integer
	 * First, all existing values are removed, then this value is added.
	 * Cardinality constraints are not checked, but this method exists only for
	 * properties with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set3static]
	 */
	public static void setMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}

	/**
	 * Sets a value of property MaxCardinality from an instance of Integer
	 * First, all existing values are removed, then this value is added.
	 * Cardinality constraints are not checked, but this method exists only for
	 * properties with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set4dynamic]
	 */
	public void setMaxCardinality(Integer value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}

	/**
	 * Removes a value of property MaxCardinality as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1static]
	 */
	public static void removeMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}

	/**
	 * Removes a value of property MaxCardinality as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1dynamic]
	 */
	public void removeMaxCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}

	/**
	 * Removes a value of property MaxCardinality given as an instance of
	 * Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove3static]
	 */
	public static void removeMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}

	/**
	 * Removes a value of property MaxCardinality given as an instance of
	 * Integer
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove4dynamic]
	 */
	public void removeMaxCardinality(Integer value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}

	/**
	 * Removes all values of property MaxCardinality *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #removeall1static]
	 */
	public static void removeAllMaxCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAXCARDINALITY);
	}

	/**
	 * Removes all values of property MaxCardinality * [Generated from
	 * RDFReactor template rule #removeall1dynamic]
	 */
	public void addMaxCardinality() {
		Base.removeAll(this.model, this.getResource(), MAXCARDINALITY);
	}

	/**
	 * Get all values of property MinCardinality as an Iterator over RDF2Go
	 * nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNode(model, instanceResource, MINCARDINALITY);
	}

	/**
	 * Get all values of property MinCardinality as a List of RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static-list]
	 */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNodeList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNodeList(model, instanceResource, MINCARDINALITY);
	}

	/**
	 * Get all values of property MinCardinality as an Iterator over RDF2Go
	 * nodes
	 * 
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic]
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode() {
		return Base
				.getAll_asNode(this.model, this.getResource(), MINCARDINALITY);
	}

	/**
	 * Get all values of property MinCardinality as a List of RDF2Go nodes
	 * 
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic-list]
	 */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNodeList() {
		return Base
				.getAll_asNodeList(this.model, this.getResource(),
						MINCARDINALITY);
	}

	/**
	 * Get all values of property MinCardinality *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static]
	 */
	public static ClosableIterator<Integer> getAllMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MINCARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property MinCardinality as a List of Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static-list]
	 */
	public static java.util.List<Integer> getAllMinCardinality_asList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, MINCARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property MinCardinality *
	 * 
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic]
	 */
	public ClosableIterator<Integer> getAllMinCardinality() {
		return Base.getAll(this.model, this.getResource(), MINCARDINALITY,
				Integer.class);
	}

	/**
	 * Get all values of property MinCardinality as a List of Integer
	 * 
	 * @return a List of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic-list]
	 */
	public java.util.List<Integer> getAllMinCardinality_asList() {
		return Base.getAll_asList(this.model, this.getResource(),
				MINCARDINALITY, Integer.class);
	}

	/**
	 * Adds a value to property MinCardinality as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1static]
	 */
	public static void addMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}

	/**
	 * Adds a value to property MinCardinality as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1dynamic]
	 */
	public void addMinCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}

	/**
	 * Adds a value to property MinCardinality from an instance of Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #add3static]
	 */
	public static void addMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}

	/**
	 * Adds a value to property MinCardinality from an instance of Integer
	 * 
	 * [Generated from RDFReactor template rule #add4dynamic]
	 */
	public void addMinCardinality(Integer value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}

	/**
	 * Sets a value of property MinCardinality from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be set
	 * 
	 * [Generated from RDFReactor template rule #set1static]
	 */
	public static void setMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}

	/**
	 * Sets a value of property MinCardinality from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set1dynamic]
	 */
	public void setMinCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}

	/**
	 * Sets a value of property MinCardinality from an instance of Integer
	 * First, all existing values are removed, then this value is added.
	 * Cardinality constraints are not checked, but this method exists only for
	 * properties with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set3static]
	 */
	public static void setMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}

	/**
	 * Sets a value of property MinCardinality from an instance of Integer
	 * First, all existing values are removed, then this value is added.
	 * Cardinality constraints are not checked, but this method exists only for
	 * properties with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set4dynamic]
	 */
	public void setMinCardinality(Integer value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}

	/**
	 * Removes a value of property MinCardinality as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1static]
	 */
	public static void removeMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}

	/**
	 * Removes a value of property MinCardinality as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1dynamic]
	 */
	public void removeMinCardinality(org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}

	/**
	 * Removes a value of property MinCardinality given as an instance of
	 * Integer
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove3static]
	 */
	public static void removeMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Integer value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}

	/**
	 * Removes a value of property MinCardinality given as an instance of
	 * Integer
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove4dynamic]
	 */
	public void removeMinCardinality(Integer value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}

	/**
	 * Removes all values of property MinCardinality *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #removeall1static]
	 */
	public static void removeAllMinCardinality(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MINCARDINALITY);
	}

	/**
	 * Removes all values of property MinCardinality * [Generated from
	 * RDFReactor template rule #removeall1dynamic]
	 */
	public void addMinCardinality() {
		Base.removeAll(this.model, this.getResource(), MINCARDINALITY);
	}

	/**
	 * Get all values of property OnProperty as an Iterator over RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNode(model, instanceResource, ONPROPERTY);
	}

	/**
	 * Get all values of property OnProperty as a List of RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static-list]
	 */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNodeList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNodeList(model, instanceResource, ONPROPERTY);
	}

	/**
	 * Get all values of property OnProperty as an Iterator over RDF2Go nodes
	 * 
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic]
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode() {
		return Base
				.getAll_asNode(this.model, this.getResource(), ONPROPERTY);
	}

	/**
	 * Get all values of property OnProperty as a List of RDF2Go nodes
	 * 
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic-list]
	 */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNodeList() {
		return Base
				.getAll_asNodeList(this.model, this.getResource(), ONPROPERTY);
	}

	/**
	 * Get all values of property OnProperty *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static]
	 */
	public static ClosableIterator<Property> getAllOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONPROPERTY, Property.class);
	}

	/**
	 * Get all values of property OnProperty as a List of Property
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static-list]
	 */
	public static java.util.List<Property> getAllOnProperty_asList(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, ONPROPERTY,
				Property.class);
	}

	/**
	 * Get all values of property OnProperty *
	 * 
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic]
	 */
	public ClosableIterator<Property> getAllOnProperty() {
		return Base.getAll(this.model, this.getResource(), ONPROPERTY,
				Property.class);
	}

	/**
	 * Get all values of property OnProperty as a List of Property
	 * 
	 * @return a List of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic-list]
	 */
	public java.util.List<Property> getAllOnProperty_asList() {
		return Base.getAll_asList(this.model, this.getResource(), ONPROPERTY,
				Property.class);
	}

	/**
	 * Adds a value to property OnProperty as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1static]
	 */
	public static void addOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}

	/**
	 * Adds a value to property OnProperty as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1dynamic]
	 */
	public void addOnProperty(org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}

	/**
	 * Adds a value to property OnProperty from an instance of Property
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #add3static]
	 */
	public static void addOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Property value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}

	/**
	 * Adds a value to property OnProperty from an instance of Property
	 * 
	 * [Generated from RDFReactor template rule #add4dynamic]
	 */
	public void addOnProperty(Property value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}

	/**
	 * Sets a value of property OnProperty from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be set
	 * 
	 * [Generated from RDFReactor template rule #set1static]
	 */
	public static void setOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}

	/**
	 * Sets a value of property OnProperty from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set1dynamic]
	 */
	public void setOnProperty(org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}

	/**
	 * Sets a value of property OnProperty from an instance of Property First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set3static]
	 */
	public static void setOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Property value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}

	/**
	 * Sets a value of property OnProperty from an instance of Property First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set4dynamic]
	 */
	public void setOnProperty(Property value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}

	/**
	 * Removes a value of property OnProperty as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1static]
	 */
	public static void removeOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}

	/**
	 * Removes a value of property OnProperty as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1dynamic]
	 */
	public void removeOnProperty(org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}

	/**
	 * Removes a value of property OnProperty given as an instance of Property
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove3static]
	 */
	public static void removeOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Property value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}

	/**
	 * Removes a value of property OnProperty given as an instance of Property
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove4dynamic]
	 */
	public void removeOnProperty(Property value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}

	/**
	 * Removes all values of property OnProperty *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #removeall1static]
	 */
	public static void removeAllOnProperty(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONPROPERTY);
	}

	/**
	 * Removes all values of property OnProperty * [Generated from RDFReactor
	 * template rule #removeall1dynamic]
	 */
	public void addOnProperty() {
		Base.removeAll(this.model, this.getResource(), ONPROPERTY);
	}

	/**
	 * Get all values of property SomeValuesFrom as an Iterator over RDF2Go
	 * nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static]
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNode(model, instanceResource, SOMEVALUESFROM);
	}

	/**
	 * Get all values of property SomeValuesFrom as a List of RDF2Go nodes
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get7static-list]
	 */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNodeList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll_asNodeList(model, instanceResource, SOMEVALUESFROM);
	}

	/**
	 * Get all values of property SomeValuesFrom as an Iterator over RDF2Go
	 * nodes
	 * 
	 * @return a ClosableIterator of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic]
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode() {
		return Base
				.getAll_asNode(this.model, this.getResource(), SOMEVALUESFROM);
	}

	/**
	 * Get all values of property SomeValuesFrom as a List of RDF2Go nodes
	 * 
	 * @return a List of RDF2Go Nodes
	 * 
	 * [Generated from RDFReactor template rule #get8dynamic-list]
	 */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNodeList() {
		return Base
				.getAll_asNodeList(this.model, this.getResource(),
						SOMEVALUESFROM);
	}

	/**
	 * Get all values of property SomeValuesFrom *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static]
	 */
	public static ClosableIterator<Class> getAllSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base
				.getAll(model, instanceResource, SOMEVALUESFROM, Class.class);
	}

	/**
	 * Get all values of property SomeValuesFrom as a List of Class
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get11static-list]
	 */
	public static java.util.List<Class> getAllSomeValuesFrom_asList(
			Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, SOMEVALUESFROM,
				Class.class);
	}

	/**
	 * Get all values of property SomeValuesFrom *
	 * 
	 * @return a ClosableIterator of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic]
	 */
	public ClosableIterator<Class> getAllSomeValuesFrom() {
		return Base.getAll(this.model, this.getResource(), SOMEVALUESFROM,
				Class.class);
	}

	/**
	 * Get all values of property SomeValuesFrom as a List of Class
	 * 
	 * @return a List of $type
	 * 
	 * [Generated from RDFReactor template rule #get12dynamic-list]
	 */
	public java.util.List<Class> getAllSomeValuesFrom_asList() {
		return Base.getAll_asList(this.model, this.getResource(),
				SOMEVALUESFROM, Class.class);
	}

	/**
	 * Adds a value to property SomeValuesFrom as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1static]
	 */
	public static void addSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOMEVALUESFROM, value);
	}

	/**
	 * Adds a value to property SomeValuesFrom as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #add1dynamic]
	 */
	public void addSomeValuesFrom(org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOMEVALUESFROM, value);
	}

	/**
	 * Adds a value to property SomeValuesFrom from an instance of Class
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #add3static]
	 */
	public static void addSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Class value) {
		Base.add(model, instanceResource, SOMEVALUESFROM, value);
	}

	/**
	 * Adds a value to property SomeValuesFrom from an instance of Class
	 * 
	 * [Generated from RDFReactor template rule #add4dynamic]
	 */
	public void addSomeValuesFrom(Class value) {
		Base.add(this.model, this.getResource(), SOMEVALUESFROM, value);
	}

	/**
	 * Sets a value of property SomeValuesFrom from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be set
	 * 
	 * [Generated from RDFReactor template rule #set1static]
	 */
	public static void setSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOMEVALUESFROM, value);
	}

	/**
	 * Sets a value of property SomeValuesFrom from an RDF2Go node. First, all
	 * existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set1dynamic]
	 */
	public void setSomeValuesFrom(org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOMEVALUESFROM, value);
	}

	/**
	 * Sets a value of property SomeValuesFrom from an instance of Class First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set3static]
	 */
	public static void setSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Class value) {
		Base.set(model, instanceResource, SOMEVALUESFROM, value);
	}

	/**
	 * Sets a value of property SomeValuesFrom from an instance of Class First,
	 * all existing values are removed, then this value is added. Cardinality
	 * constraints are not checked, but this method exists only for properties
	 * with no minCardinality or minCardinality == 1.
	 * 
	 * @param value
	 *            the value to be added
	 * 
	 * [Generated from RDFReactor template rule #set4dynamic]
	 */
	public void setSomeValuesFrom(Class value) {
		Base.set(this.model, this.getResource(), SOMEVALUESFROM, value);
	}

	/**
	 * Removes a value of property SomeValuesFrom as an RDF2Go node
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1static]
	 */
	public static void removeSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOMEVALUESFROM, value);
	}

	/**
	 * Removes a value of property SomeValuesFrom as an RDF2Go node
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove1dynamic]
	 */
	public void removeSomeValuesFrom(org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOMEVALUESFROM, value);
	}

	/**
	 * Removes a value of property SomeValuesFrom given as an instance of Class
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove3static]
	 */
	public static void removeSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource,
			Class value) {
		Base.remove(model, instanceResource, SOMEVALUESFROM, value);
	}

	/**
	 * Removes a value of property SomeValuesFrom given as an instance of Class
	 * 
	 * @param value
	 *            the value to be removed
	 * 
	 * [Generated from RDFReactor template rule #remove4dynamic]
	 */
	public void removeSomeValuesFrom(Class value) {
		Base.remove(this.model, this.getResource(), SOMEVALUESFROM, value);
	}

	/**
	 * Removes all values of property SomeValuesFrom *
	 * 
	 * @param model
	 *            an RDF2Go model
	 * @param resource
	 *            an RDF2Go resource
	 * 
	 * [Generated from RDFReactor template rule #removeall1static]
	 */
	public static void removeAllSomeValuesFrom(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOMEVALUESFROM);
	}

	/**
	 * Removes all values of property SomeValuesFrom * [Generated from
	 * RDFReactor template rule #removeall1dynamic]
	 */
	public void addSomeValuesFrom() {
		Base.removeAll(this.model, this.getResource(), SOMEVALUESFROM);
	}

	public static OWL_Protege_NRL_Restriction getInstance(Model model,
			Resource resource) {
		return Base.getInstance(model, resource,
				OWL_Protege_NRL_Restriction.class);
	}

	/**
	 * Reads cardinality constraints from OWL, and if not present reads from
	 * NRL.
	 */
	public Integer getCardinality() {
		assert this.model != null;
		assert this.getResource() != null;
		Integer i = (Integer) Base.get(this.model, this.getResource(),
				OWL.cardinality, Integer.class);
		if (i == null)
			i = (Integer) Base.get(this.model, this.getResource(),
					NRL.CARDINALITY, Integer.class);
		return i;
	}

	/**
	 * Reads cardinality constraints from OWL, and if not present reads from
	 * Protege extension vocabulary. If even that is not present, reads from
	 * NRL. As a fall-back, returns null.
	 */
	public Integer getMinCardinality() {
		assert this.model != null;
		assert this.getResource() != null;
		Integer i = (Integer) Base.get(this.model, this.getResource(),
				OWL.minCardinality, Integer.class);
		if (i == null)
			i = (Integer) Base.get(this.model, this.getResource(),
					Protege.MIN_CARDINALITY, Integer.class);
		if (i == null)
			i = (Integer) Base.get(this.model, this.getResource(),
					NRL.MIN_CARDINALITY, Integer.class);
		return i;
	}

	/**
	 * Reads cardinality constraints from OWL, and if not present reads from
	 * Protege extension vocabulary. If even that is not present, reads from
	 * NRL. As a fall-back, returns null.
	 */
	public Integer getMaxCardinality() {
		assert this.model != null;
		assert this.getResource() != null;
		Integer i = (Integer) Base.get(this.model, this.getResource(),
				OWL.maxCardinality, Integer.class);
		if (i == null)
			i = (Integer) Base.get(this.model, this.getResource(),
					Protege.MAX_CARDINALITY, Integer.class);
		if (i == null)
			i = (Integer) Base.get(this.model, this.getResource(),
					NRL.MAX_CARDINALITY, Integer.class);
		return i;
	}
}