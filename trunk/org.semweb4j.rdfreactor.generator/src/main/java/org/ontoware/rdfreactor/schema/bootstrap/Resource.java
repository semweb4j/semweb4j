/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 25.01.08 23:14
 */
package org.ontoware.rdfreactor.schema.bootstrap;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorRuntimeEntity;





/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Comment </li>
 *   <li> IsDefinedBy </li>
 *   <li> Label </li>
 *   <li> Member </li>
 *   <li> SeeAlso </li>
 *   <li> Type </li>
 *   <li> Value </li>
 * </ul>
 * 
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 25.01.08 23:14
 */
public class Resource extends ReactorRuntimeEntity {
	
	public String[] getAllComment_asArray() {
		return Base.getAll_asArray(this.model, this.getResource(), COMMENT, String.class);
	}


    /** http://www.w3.org/2000/01/rdf-schema#Resource */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Resource", false);

    /** http://www.w3.org/2000/01/rdf-schema#comment */
	public static final URI COMMENT = new URIImpl("http://www.w3.org/2000/01/rdf-schema#comment",false);

    /** http://www.w3.org/2000/01/rdf-schema#isDefinedBy */
	public static final URI ISDEFINEDBY = new URIImpl("http://www.w3.org/2000/01/rdf-schema#isDefinedBy",false);

    /** http://www.w3.org/2000/01/rdf-schema#label */
	public static final URI LABEL = new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false);

    /** http://www.w3.org/2000/01/rdf-schema#member */
	public static final URI MEMBER = new URIImpl("http://www.w3.org/2000/01/rdf-schema#member",false);

    /** http://www.w3.org/2000/01/rdf-schema#seeAlso */
	public static final URI SEEALSO = new URIImpl("http://www.w3.org/2000/01/rdf-schema#seeAlso",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#type */
	public static final URI TYPE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#value */
	public static final URI VALUE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#value",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#comment",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#isDefinedBy",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#member",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#seeAlso",false),
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type",false),
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#value",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Resource ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Resource ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Resource ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Resource ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Resource ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Resource).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstancesAsRdf2GoResources(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * Delete all rdf:type from this instance. Other triples are not affected.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods




     /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMMENT);
	}
	
    /**
     * Get all values of property Comment as a List of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-list] 
     */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllComment_asNodeList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNodeList(model, instanceResource, COMMENT);
	}

    /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMMENT);
	}

    /**
     * Get all values of property Comment as a List of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-list] 
     */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllComment_asNodeList() {
		return Base.getAll_asNodeList(this.model, this.getResource(), COMMENT);
	}
     /**
     * Get all values of property Comment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<String> getAllComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMMENT, String.class);
	}
	
    /**
     * Get all values of property Comment as a List of String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static-list] 
     */
	public static java.util.List<String> getAllComment_asList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, COMMENT, String.class);
	}

    /**
     * Get all values of property Comment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<String> getAllComment() {
		return Base.getAll(this.model, this.getResource(), COMMENT, String.class);
	}

    /**
     * Get all values of property Comment as a List of String 
     * @return a List of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-list] 
     */
	public java.util.List<String> getAllComment_asList() {
		return Base.getAll_asList(this.model, this.getResource(), COMMENT, String.class);
	}
 
    /**
     * Adds a value to property Comment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Adds a value to property Comment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMMENT, value);
	}
    /**
     * Adds a value to property Comment from an instance of String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, String value) {
		Base.add(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Adds a value to property Comment from an instance of String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComment(String value) {
		Base.add(this.model, this.getResource(), COMMENT, value);
	}
  

    /**
     * Sets a value of property Comment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Sets a value of property Comment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMMENT, value);
	}
    /**
     * Sets a value of property Comment from an instance of String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, String value) {
		Base.set(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Sets a value of property Comment from an instance of String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComment(String value) {
		Base.set(this.model, this.getResource(), COMMENT, value);
	}
  


    /**
     * Removes a value of property Comment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Removes a value of property Comment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMMENT, value);
	}
    /**
     * Removes a value of property Comment given as an instance of String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, String value) {
		Base.remove(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Removes a value of property Comment given as an instance of String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComment(String value) {
		Base.remove(this.model, this.getResource(), COMMENT, value);
	}
  
    /**
     * Removes all values of property Comment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMMENT);
	}
	
    /**
     * Removes all values of property Comment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addComment() {
		Base.removeAll(this.model, this.getResource(), COMMENT);
	}
      /**
     * Get all values of property IsDefinedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsDefinedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISDEFINEDBY);
	}
	
    /**
     * Get all values of property IsDefinedBy as a List of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-list] 
     */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllIsDefinedBy_asNodeList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNodeList(model, instanceResource, ISDEFINEDBY);
	}

    /**
     * Get all values of property IsDefinedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsDefinedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISDEFINEDBY);
	}

    /**
     * Get all values of property IsDefinedBy as a List of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-list] 
     */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllIsDefinedBy_asNodeList() {
		return Base.getAll_asNodeList(this.model, this.getResource(), ISDEFINEDBY);
	}
     /**
     * Get all values of property IsDefinedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Resource> getAllIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISDEFINEDBY, Resource.class);
	}
	
    /**
     * Get all values of property IsDefinedBy as a List of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static-list] 
     */
	public static java.util.List<Resource> getAllIsDefinedBy_asList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, ISDEFINEDBY, Resource.class);
	}

    /**
     * Get all values of property IsDefinedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Resource> getAllIsDefinedBy() {
		return Base.getAll(this.model, this.getResource(), ISDEFINEDBY, Resource.class);
	}

    /**
     * Get all values of property IsDefinedBy as a List of Resource 
     * @return a List of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-list] 
     */
	public java.util.List<Resource> getAllIsDefinedBy_asList() {
		return Base.getAll_asList(this.model, this.getResource(), ISDEFINEDBY, Resource.class);
	}
 
    /**
     * Adds a value to property IsDefinedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISDEFINEDBY, value);
	}
	
    /**
     * Adds a value to property IsDefinedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsDefinedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISDEFINEDBY, value);
	}
    /**
     * Adds a value to property IsDefinedBy from an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.add(model, instanceResource, ISDEFINEDBY, value);
	}
	
    /**
     * Adds a value to property IsDefinedBy from an instance of Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsDefinedBy(Resource value) {
		Base.add(this.model, this.getResource(), ISDEFINEDBY, value);
	}
  

    /**
     * Sets a value of property IsDefinedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISDEFINEDBY, value);
	}
	
    /**
     * Sets a value of property IsDefinedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsDefinedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISDEFINEDBY, value);
	}
    /**
     * Sets a value of property IsDefinedBy from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.set(model, instanceResource, ISDEFINEDBY, value);
	}
	
    /**
     * Sets a value of property IsDefinedBy from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsDefinedBy(Resource value) {
		Base.set(this.model, this.getResource(), ISDEFINEDBY, value);
	}
  


    /**
     * Removes a value of property IsDefinedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISDEFINEDBY, value);
	}
	
    /**
     * Removes a value of property IsDefinedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsDefinedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISDEFINEDBY, value);
	}
    /**
     * Removes a value of property IsDefinedBy given as an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.remove(model, instanceResource, ISDEFINEDBY, value);
	}
	
    /**
     * Removes a value of property IsDefinedBy given as an instance of Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsDefinedBy(Resource value) {
		Base.remove(this.model, this.getResource(), ISDEFINEDBY, value);
	}
  
    /**
     * Removes all values of property IsDefinedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISDEFINEDBY);
	}
	
    /**
     * Removes all values of property IsDefinedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addIsDefinedBy() {
		Base.removeAll(this.model, this.getResource(), ISDEFINEDBY);
	}
      /**
     * Get all values of property Label as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABEL);
	}
	
    /**
     * Get all values of property Label as a List of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-list] 
     */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllLabel_asNodeList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNodeList(model, instanceResource, LABEL);
	}

    /**
     * Get all values of property Label as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLabel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABEL);
	}

    /**
     * Get all values of property Label as a List of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-list] 
     */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllLabel_asNodeList() {
		return Base.getAll_asNodeList(this.model, this.getResource(), LABEL);
	}
     /**
     * Get all values of property Label     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<String> getAllLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABEL, String.class);
	}
	
    /**
     * Get all values of property Label as a List of String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static-list] 
     */
	public static java.util.List<String> getAllLabel_asList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, LABEL, String.class);
	}

    /**
     * Get all values of property Label     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<String> getAllLabel() {
		return Base.getAll(this.model, this.getResource(), LABEL, String.class);
	}

    /**
     * Get all values of property Label as a List of String 
     * @return a List of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-list] 
     */
	public java.util.List<String> getAllLabel_asList() {
		return Base.getAll_as(this.model, this.getResource(), LABEL, String.class).asList();
	}
 
    /**
     * Adds a value to property Label as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LABEL, value);
	}
	
    /**
     * Adds a value to property Label as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LABEL, value);
	}
    /**
     * Adds a value to property Label from an instance of String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, String value) {
		Base.add(model, instanceResource, LABEL, value);
	}
	
    /**
     * Adds a value to property Label from an instance of String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLabel(String value) {
		Base.add(this.model, this.getResource(), LABEL, value);
	}
  

    /**
     * Sets a value of property Label from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LABEL, value);
	}
	
    /**
     * Sets a value of property Label from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LABEL, value);
	}
    /**
     * Sets a value of property Label from an instance of String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, String value) {
		Base.set(model, instanceResource, LABEL, value);
	}
	
    /**
     * Sets a value of property Label from an instance of String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLabel(String value) {
		Base.set(this.model, this.getResource(), LABEL, value);
	}
  


    /**
     * Removes a value of property Label as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LABEL, value);
	}
	
    /**
     * Removes a value of property Label as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LABEL, value);
	}
    /**
     * Removes a value of property Label given as an instance of String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, String value) {
		Base.remove(model, instanceResource, LABEL, value);
	}
	
    /**
     * Removes a value of property Label given as an instance of String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLabel(String value) {
		Base.remove(this.model, this.getResource(), LABEL, value);
	}
  
    /**
     * Removes all values of property Label     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABEL);
	}
	
    /**
     * Removes all values of property Label	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addLabel() {
		Base.removeAll(this.model, this.getResource(), LABEL);
	}
      /**
     * Get all values of property Member as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMember_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MEMBER);
	}
	
    /**
     * Get all values of property Member as a List of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-list] 
     */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllMember_asNodeList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNodeList(model, instanceResource, MEMBER);
	}

    /**
     * Get all values of property Member as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMember_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEMBER);
	}

    /**
     * Get all values of property Member as a List of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-list] 
     */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllMember_asNodeList() {
		return Base.getAll_asNodeList(this.model, this.getResource(), MEMBER);
	}
     /**
     * Get all values of property Member     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Resource> getAllMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MEMBER, Resource.class);
	}
	
    /**
     * Get all values of property Member as a List of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static-list] 
     */
	public static java.util.List<Resource> getAllMember_asList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, MEMBER, Resource.class);
	}

    /**
     * Get all values of property Member     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Resource> getAllMember() {
		return Base.getAll(this.model, this.getResource(), MEMBER, Resource.class);
	}

    /**
     * Get all values of property Member as a List of Resource 
     * @return a List of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-list] 
     */
	public java.util.List<Resource> getAllMember_asList() {
		return Base.getAll_asList(this.model, this.getResource(), MEMBER, Resource.class);
	}
 
    /**
     * Adds a value to property Member as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Adds a value to property Member as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MEMBER, value);
	}
    /**
     * Adds a value to property Member from an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.add(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Adds a value to property Member from an instance of Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMember(Resource value) {
		Base.add(this.model, this.getResource(), MEMBER, value);
	}
  

    /**
     * Sets a value of property Member from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Sets a value of property Member from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MEMBER, value);
	}
    /**
     * Sets a value of property Member from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.set(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Sets a value of property Member from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMember(Resource value) {
		Base.set(this.model, this.getResource(), MEMBER, value);
	}
  


    /**
     * Removes a value of property Member as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Removes a value of property Member as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MEMBER, value);
	}
    /**
     * Removes a value of property Member given as an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.remove(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Removes a value of property Member given as an instance of Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMember(Resource value) {
		Base.remove(this.model, this.getResource(), MEMBER, value);
	}
  
    /**
     * Removes all values of property Member     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MEMBER);
	}
	
    /**
     * Removes all values of property Member	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addMember() {
		Base.removeAll(this.model, this.getResource(), MEMBER);
	}
      /**
     * Get all values of property SeeAlso as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSeeAlso_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SEEALSO);
	}
	
    /**
     * Get all values of property SeeAlso as a List of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-list] 
     */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllSeeAlso_asNodeList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNodeList(model, instanceResource, SEEALSO);
	}

    /**
     * Get all values of property SeeAlso as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSeeAlso_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SEEALSO);
	}

    /**
     * Get all values of property SeeAlso as a List of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-list] 
     */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllSeeAlso_asNodeList() {
		return Base.getAll_asNodeList(this.model, this.getResource(), SEEALSO);
	}
     /**
     * Get all values of property SeeAlso     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Resource> getAllSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SEEALSO, Resource.class);
	}
	
    /**
     * Get all values of property SeeAlso as a List of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static-list] 
     */
	public static java.util.List<Resource> getAllSeeAlso_asList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, SEEALSO, Resource.class);
	}

    /**
     * Get all values of property SeeAlso     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Resource> getAllSeeAlso() {
		return Base.getAll(this.model, this.getResource(), SEEALSO, Resource.class);
	}

    /**
     * Get all values of property SeeAlso as a List of Resource 
     * @return a List of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-list] 
     */
	public java.util.List<Resource> getAllSeeAlso_asList() {
		return Base.getAll_asList(this.model, this.getResource(), SEEALSO, Resource.class);
	}
 
    /**
     * Adds a value to property SeeAlso as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SEEALSO, value);
	}
	
    /**
     * Adds a value to property SeeAlso as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSeeAlso( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SEEALSO, value);
	}
    /**
     * Adds a value to property SeeAlso from an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.add(model, instanceResource, SEEALSO, value);
	}
	
    /**
     * Adds a value to property SeeAlso from an instance of Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSeeAlso(Resource value) {
		Base.add(this.model, this.getResource(), SEEALSO, value);
	}
  

    /**
     * Sets a value of property SeeAlso from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SEEALSO, value);
	}
	
    /**
     * Sets a value of property SeeAlso from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSeeAlso( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SEEALSO, value);
	}
    /**
     * Sets a value of property SeeAlso from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.set(model, instanceResource, SEEALSO, value);
	}
	
    /**
     * Sets a value of property SeeAlso from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSeeAlso(Resource value) {
		Base.set(this.model, this.getResource(), SEEALSO, value);
	}
  


    /**
     * Removes a value of property SeeAlso as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SEEALSO, value);
	}
	
    /**
     * Removes a value of property SeeAlso as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSeeAlso( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SEEALSO, value);
	}
    /**
     * Removes a value of property SeeAlso given as an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.remove(model, instanceResource, SEEALSO, value);
	}
	
    /**
     * Removes a value of property SeeAlso given as an instance of Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSeeAlso(Resource value) {
		Base.remove(this.model, this.getResource(), SEEALSO, value);
	}
  
    /**
     * Removes all values of property SeeAlso     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SEEALSO);
	}
	
    /**
     * Removes all values of property SeeAlso	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addSeeAlso() {
		Base.removeAll(this.model, this.getResource(), SEEALSO);
	}
      /**
     * Get all values of property Type as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TYPE);
	}
	
    /**
     * Get all values of property Type as a List of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-list] 
     */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllType_asNodeList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNodeList(model, instanceResource, TYPE);
	}

    /**
     * Get all values of property Type as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TYPE);
	}

    /**
     * Get all values of property Type as a List of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-list] 
     */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllType_asNodeList() {
		return Base.getAll_asNodeList(this.model, this.getResource(), TYPE);
	}
     /**
     * Get all values of property Type     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Class> getAllType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TYPE, Class.class);
	}
	
    /**
     * Get all values of property Type as a List of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static-list] 
     */
	public static java.util.List<Class> getAllType_asList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, TYPE, Class.class);
	}

    /**
     * Get all values of property Type     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Class> getAllType() {
		return Base.getAll(this.model, this.getResource(), TYPE, Class.class);
	}

    /**
     * Get all values of property Type as a List of Class 
     * @return a List of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-list] 
     */
	public java.util.List<Class> getAllType_asList() {
		return Base.getAll_asList(this.model, this.getResource(), TYPE, Class.class);
	}
 
    /**
     * Adds a value to property Type as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TYPE, value);
	}
	
    /**
     * Adds a value to property Type as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Adds a value to property Type from an instance of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Class value) {
		Base.add(model, instanceResource, TYPE, value);
	}
	
    /**
     * Adds a value to property Type from an instance of Class 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addType(Class value) {
		Base.add(this.model, this.getResource(), TYPE, value);
	}
  

    /**
     * Sets a value of property Type from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TYPE, value);
	}
	
    /**
     * Sets a value of property Type from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Sets a value of property Type from an instance of Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Class value) {
		Base.set(model, instanceResource, TYPE, value);
	}
	
    /**
     * Sets a value of property Type from an instance of Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setType(Class value) {
		Base.set(this.model, this.getResource(), TYPE, value);
	}
  


    /**
     * Removes a value of property Type as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TYPE, value);
	}
	
    /**
     * Removes a value of property Type as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Removes a value of property Type given as an instance of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Class value) {
		Base.remove(model, instanceResource, TYPE, value);
	}
	
    /**
     * Removes a value of property Type given as an instance of Class 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeType(Class value) {
		Base.remove(this.model, this.getResource(), TYPE, value);
	}
  
    /**
     * Removes all values of property Type     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TYPE);
	}
	
    /**
     * Removes all values of property Type	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addType() {
		Base.removeAll(this.model, this.getResource(), TYPE);
	}
      /**
     * Get all values of property Value as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VALUE);
	}
	
    /**
     * Get all values of property Value as a List of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-list] 
     */
	public static java.util.List<org.ontoware.rdf2go.model.node.Node> getAllValue_asNodeList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNodeList(model, instanceResource, VALUE);
	}

    /**
     * Get all values of property Value as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VALUE);
	}

    /**
     * Get all values of property Value as a List of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-list] 
     */
	public java.util.List<org.ontoware.rdf2go.model.node.Node> getAllValue_asNodeList() {
		return Base.getAll_asNodeList(this.model, this.getResource(), VALUE);
	}
     /**
     * Get all values of property Value     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Resource> getAllValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VALUE, Resource.class);
	}
	
    /**
     * Get all values of property Value as a List of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static-list] 
     */
	public static java.util.List<Resource> getAllValue_asList(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asList(model, instanceResource, VALUE, Resource.class);
	}

    /**
     * Get all values of property Value     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Resource> getAllValue() {
		return Base.getAll(this.model, this.getResource(), VALUE, Resource.class);
	}

    /**
     * Get all values of property Value as a List of Resource 
     * @return a List of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-list] 
     */
	public java.util.List<Resource> getAllValue_asList() {
		return Base.getAll_asList(this.model, this.getResource(), VALUE, Resource.class);
	}
 
    /**
     * Adds a value to property Value as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VALUE, value);
	}
	
    /**
     * Adds a value to property Value as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VALUE, value);
	}
    /**
     * Adds a value to property Value from an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.add(model, instanceResource, VALUE, value);
	}
	
    /**
     * Adds a value to property Value from an instance of Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addValue(Resource value) {
		Base.add(this.model, this.getResource(), VALUE, value);
	}
  

    /**
     * Sets a value of property Value from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VALUE, value);
	}
	
    /**
     * Sets a value of property Value from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VALUE, value);
	}
    /**
     * Sets a value of property Value from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.set(model, instanceResource, VALUE, value);
	}
	
    /**
     * Sets a value of property Value from an instance of Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setValue(Resource value) {
		Base.set(this.model, this.getResource(), VALUE, value);
	}
  


    /**
     * Removes a value of property Value as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VALUE, value);
	}
	
    /**
     * Removes a value of property Value as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VALUE, value);
	}
    /**
     * Removes a value of property Value given as an instance of Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Resource value) {
		Base.remove(model, instanceResource, VALUE, value);
	}
	
    /**
     * Removes a value of property Value given as an instance of Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeValue(Resource value) {
		Base.remove(this.model, this.getResource(), VALUE, value);
	}
  
    /**
     * Removes all values of property Value     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VALUE);
	}
	
    /**
     * Removes all values of property Value	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addValue() {
		Base.removeAll(this.model, this.getResource(), VALUE);
	}
 }