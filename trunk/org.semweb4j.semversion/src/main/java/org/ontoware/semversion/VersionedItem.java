/**
 * generated by RDFReactor on 9:59 on 29.2005
 */
package org.ontoware.semversion;

import java.util.Calendar;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.semversion.impl.UserImpl;

/**
 * Any item that is versioned. Versioned items have a comment, label, creation
 * time, deletion time, provenance, tags, a URI, a User who created it, optional
 * user-define meta-data.
 * 
 * @author voelkel
 */
public abstract class VersionedItem {

	private org.ontoware.semversion.impl.generated.VersionedItem versionedItem;
	private Session session;

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI. Creating
	 * two wrappers for the same instanceURI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri
	 *            URI of this instance
	 */
	public VersionedItem(Model model, Session session, URI uri) {
		this.versionedItem = new org.ontoware.semversion.impl.generated.VersionedItem(
				model, uri, true);
		this.session = session;
	}
	
	public Session getSession() {
		return this.session;
	}

	/**
	 * @return one of the comments. 
	 */
	public String getComment() {
		// FIXME dropping all other comment than the first
		return this.versionedItem.getAllComment_as().firstValue();
	}

	/**
	 * @return the creation time of this item
	 */
	public Calendar getCreationTime() throws RDFDataException {
		return this.versionedItem.getCreationTime();
	}

	/**
	 * @return the deletionTime, or FOREVER if no deletion time has been set
	 *         yet. A version with no deletion time is considered to be 'live'.
	 */
	public Calendar getDeletionTime() throws RDFDataException {
		Calendar deletionTime = this.versionedItem.getDeletionTime();
		if (deletionTime == null)
			return TransactionTime.FOREVER;
		else
			return deletionTime;
	}

	public String getLabel() {
		return this.versionedItem.getAllLabel_as().firstValue();
	}

	/**
	 * @return the provenance URI or null if none has been set
	 */
	public URI getProvenance() throws RDFDataException {
		return this.versionedItem.getProvenance();
	}

	protected SemVersion getSemVersion() {
		return (SemVersion) versionedItem.getModel().getProperty(
				SemVersion.SEMVERSIONIMPL);
	}

	/**
	 * Tags are used e.g. to tag things as 'suggestion'
	 * 
	 * @return a tag, if this item has one. Otherwise null.
	 */
	protected String getTag() throws RDFDataException {
		return this.versionedItem.getAllTag_as().firstValue();
	}

	/**
	 * @return the transaction time, which contains creation and deletio time
	 */
	public TransactionTime getTransactionTime() {
		try {
			Calendar start = this.getCreationTime();
			Calendar end = this.getDeletionTime();
			TransactionTime t = new TransactionTime(start, end);
			return t;
		} catch (RDFDataException e) {
			throw new RuntimeException(e);
		}
	}

	public URI getURI() {
		return this.versionedItem.getResource().asURI();
	}

	/**
	 * @return the creator of this item
	 */
	public User getUser() {
		org.ontoware.semversion.impl.generated.User u = this.versionedItem
				.getAuthor();
		if (u == null)
			return null;
		else
			return new UserImpl(u);
	}

	/**
	 * @return the URI of the graph which contains additional metadata in RDF
	 */
	public URI getUserdefinedMetadata() {
		return this.versionedItem.getUserdefinedMetadata();
	}

//	/**
//	 * removes a value
//	 */
//	protected void removeCreationTime(long value) {
//		this.versionedItem.removeCreationTime();
//	}
//
//	/**
//	 * removes a value
//	 */
//	protected void removeDeletionTime(long value) {
//		this.versionedItem.removeDeletionTime();
//	}

	public void setComment(String comment) {
		this.versionedItem.setComment(comment);
	}

	/**
	 * removes all values and sets this one
	 */
	protected void setCreationTime(Calendar value) throws RDFDataException {
		this.versionedItem.setCreationTime(value);
	}

	/**
	 * removes all values and sets this one
	 */
	protected void setDeletionTime(Calendar value) throws RDFDataException {
		this.versionedItem.setDeletionTime(value);
	}

	public void setLabel(String label) {
		this.versionedItem.setLabel(label);
	}

	/**
	 * removes all values and sets this one
	 */
	protected void setProvenance(URI value) throws RDFDataException {
		if (value != null)
			this.versionedItem.setProvenance(value);
	}

	/**
	 * removes all values and sets this one
	 */
	protected void setTag(String value) throws RDFDataException {
		this.versionedItem.setTag(value);
	}

	/**
	 * removes all values and sets this one
	 */
	protected void setUser(User value) throws RDFDataException {
		this.versionedItem
				.setAuthor(((org.ontoware.semversion.impl.UserImpl) value)
						.getUser());
	}

	/**
	 * removes all values and sets this one
	 */
	protected void setUserdefinedMetadata(URI value) {
		this.versionedItem.setUserdefinedMetadata(value);
	}

}
