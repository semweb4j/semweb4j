/**
 * generated by RDFReactor on 9:59 on 29.2005
 */
package org.ontoware.semversion;

import java.util.Calendar;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.semversion.impl.SemVersionImpl;
import org.ontoware.semversion.impl.UserImpl;

public abstract class VersionedItem {

	private org.ontoware.semversion.impl.generated.VersionedItem versionedItem;

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI. Creating
	 * two wrappers for the same instanceURI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri
	 *            URI of this instance
	 */
	public VersionedItem(Model model, URI uri) {
		this.versionedItem = new org.ontoware.semversion.impl.generated.VersionedItem(
				model, uri);
	}

	/**
	 * returns the only value. -1 if none is found, RDFDataException, if the
	 * property has multiple values
	 */
	public Calendar getCreationTime() throws RDFDataException {
		return this.versionedItem.getCreationTime();
	}

	/**
	 * @return the deletionTime, or FOREVER if no deletion time has been set
	 *         yet. A version with no deletion time is considered to be 'live'.
	 */
	public Calendar getDeletionTime() throws RDFDataException {
		Calendar deletionTime = this.versionedItem.getDeletionTime();
		if (deletionTime == null)
			return TransactionTime.FOREVER;
		else
			return deletionTime;
	}

	/**
	 * returns the only value. null if none is found, RDFDataException, if the
	 * property has multiple values
	 */
	public URI getProvenance() throws RDFDataException {
		return this.versionedItem.getProvenance();
	}

	public SemVersionImpl getSemVersion() {
		return (SemVersionImpl) versionedItem.getModel().getProperty(
				SemVersionImpl.SEMVERSIONIMPL);
	}

	/**
	 * returns the only value. null if none is found, RDFDataException, if the
	 * property has multiple values
	 */
	public String getTag() throws RDFDataException {
		return this.versionedItem.getTag();
	}

	public TransactionTime getTransactionTime() {
		try {
			Calendar start = this.getCreationTime();
			Calendar end = this.getDeletionTime();
			TransactionTime t = new TransactionTime(start, end);
			return t;
		} catch (RDFDataException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * returns the only value. null if none is found, RDFDataException, if the
	 * property has multiple values
	 */
	public UserImpl getUser() {
		org.ontoware.semversion.impl.generated.User u = this.versionedItem
				.getAuthor();
		if (u == null)
			return null;
		else
			return new UserImpl(u);
	}

	/**
	 * returns the only value. null if none is found, RDFDataException, if the
	 * property has multiple values
	 */
	public URI getUserdefinedMetadata() {
		return this.versionedItem.getUserdefinedMetadata();
	}

	public void removeTag() {
		this.versionedItem.removeTag();
	}

	/**
	 * removes a value
	 */
	public void removeCreationTime(long value) {
		this.versionedItem.removeCreationTime();
	}

	/**
	 * removes a value
	 */
	public void removeDeletionTime(long value) {
		this.versionedItem.removeDeletionTime();
	}

	/**
	 * removes all values and sets this one
	 */
	public void setCreationTime(Calendar value) throws RDFDataException {
		this.versionedItem.setCreationTime(value);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setDeletionTime(Calendar value) throws RDFDataException {
		this.versionedItem.setDeletionTime(value);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setProvenance(URI value) throws RDFDataException {
		if (value != null)
			this.versionedItem.setProvenance(value);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setTag(String value) throws RDFDataException {
		this.versionedItem.setTag(value);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setUser(User value) throws RDFDataException {
		UserImpl userimpl = (UserImpl) value;
		this.versionedItem.setAuthor( userimpl.getUser() );
	}

	/**
	 * removes all values and sets this one
	 */
	public void setUserdefinedMetadata(URI value) {
		this.versionedItem.setUserdefinedMetadata(value);
	}

	public void setLabel(String label) {
		this.versionedItem.setLabel(label);
	}

	public void setComment(String comment) {
		this.versionedItem.setLabel(comment);
	}

	public String getLabel() {
		return this.versionedItem.getLabel();
	}

	public String getComment() {
		return this.versionedItem.getComment();
	}

	public URI getURI() {
		return this.versionedItem.getResource().asURI();
	}

}
