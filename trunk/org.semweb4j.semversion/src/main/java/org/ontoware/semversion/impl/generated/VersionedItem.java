/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1046 2008-01-26 14:38:26Z max.at.xam.de $) on 12.03.08 12:36
 */
package org.ontoware.semversion.impl.generated;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Author </li>
 *   <li> CreationTime </li>
 *   <li> DeletionTime </li>
 *   <li> Provenance </li>
 *   <li> Tag </li>
 *   <li> UserdefinedMetadata </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 12.03.08 12:36
 */
public class VersionedItem extends Thing {

    /** http://purl.org/net/semversion#VersionedItem */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/net/semversion#VersionedItem", false);

    /** http://purl.org/net/semversion#hasAuthor */
	public static final URI AUTHOR = new URIImpl("http://purl.org/net/semversion#hasAuthor",false);

    /** http://purl.org/net/semversion#hasCreationTime */
	public static final URI CREATIONTIME = new URIImpl("http://purl.org/net/semversion#hasCreationTime",false);

    /** http://purl.org/net/semversion#hasDeletionTime */
	public static final URI DELETIONTIME = new URIImpl("http://purl.org/net/semversion#hasDeletionTime",false);

    /** http://purl.org/net/semversion#hasProvenance */
	public static final URI PROVENANCE = new URIImpl("http://purl.org/net/semversion#hasProvenance",false);

    /** http://purl.org/net/semversion#hasTag */
	public static final URI TAG = new URIImpl("http://purl.org/net/semversion#hasTag",false);

    /** http://purl.org/net/semversion#hasUserdefinedMetadata */
	public static final URI USERDEFINEDMETADATA = new URIImpl("http://purl.org/net/semversion#hasUserdefinedMetadata",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/net/semversion#hasAuthor",false),
      new URIImpl("http://purl.org/net/semversion#hasCreationTime",false),
      new URIImpl("http://purl.org/net/semversion#hasDeletionTime",false),
      new URIImpl("http://purl.org/net/semversion#hasProvenance",false),
      new URIImpl("http://purl.org/net/semversion#hasTag",false),
      new URIImpl("http://purl.org/net/semversion#hasUserdefinedMetadata",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected VersionedItem ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public VersionedItem ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public VersionedItem ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public VersionedItem ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public VersionedItem ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/net/semversion#VersionedItem).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends VersionedItem> getAllInstance_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, VersionedItem.class );
	}

    /**
	 * Delete all rdf:type from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@162198b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAuthor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AUTHOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@162198b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAuthor() {
		return Base.has(this.model, this.getResource(), AUTHOR);
	}

    /**
     * Get single value of property Author as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getAuthor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, AUTHOR);
	}
	
    /**
     * Get single value of property Author as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getAuthor_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), AUTHOR);
	}
     /**
     * Get single value of property Author     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static User getAuthor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (User) Base.get(model, instanceResource, AUTHOR, User.class);
	}
	
    /**
     * Get single value of property Author     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public User getAuthor() {
		return (User) Base.get(this.model, this.getResource(), AUTHOR, User.class);
	}
  
    /**
     * Adds a value to property Author as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addAuthor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, AUTHOR, value, 1);
	}
	
    /**
     * Adds a value to property Author as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addAuthor( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), AUTHOR, value, 1);
	}
    /**
     * Adds a value to property Author from an instance of User 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addAuthor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, User value)
    throws CardinalityException {
		Base.add(model, instanceResource, AUTHOR, value, 1);
	}
	
    /**
     * Adds a value to property Author from an instance of User 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addAuthor(User value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), AUTHOR, value, 1);
	}
 
 

    /**
     * Sets a value of property Author from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAuthor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AUTHOR, value);
	}
	
    /**
     * Sets a value of property Author from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAuthor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AUTHOR, value);
	}
    /**
     * Sets a value of property Author from an instance of User 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAuthor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, User value) {
		Base.set(model, instanceResource, AUTHOR, value);
	}
	
    /**
     * Sets a value of property Author from an instance of User 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAuthor(User value) {
		Base.set(this.model, this.getResource(), AUTHOR, value);
	}
  


    /**
     * Removes a value of property Author as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAuthor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AUTHOR, value);
	}
	
    /**
     * Removes a value of property Author as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAuthor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AUTHOR, value);
	}
    /**
     * Removes a value of property Author given as an instance of User 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAuthor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, User value) {
		Base.remove(model, instanceResource, AUTHOR, value);
	}
	
    /**
     * Removes a value of property Author given as an instance of User 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAuthor(User value) {
		Base.remove(this.model, this.getResource(), AUTHOR, value);
	}
  
    /**
     * Removes all values of property Author     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAuthor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AUTHOR);
	}
	
    /**
     * Removes all values of property Author	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addAuthor() {
		Base.removeAll(this.model, this.getResource(), AUTHOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1352367 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreationTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATIONTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1352367 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreationTime() {
		return Base.has(this.model, this.getResource(), CREATIONTIME);
	}

    /**
     * Get single value of property CreationTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getCreationTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, CREATIONTIME);
	}
	
    /**
     * Get single value of property CreationTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getCreationTime_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), CREATIONTIME);
	}
     /**
     * Get single value of property CreationTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getCreationTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, CREATIONTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property CreationTime     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getCreationTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), CREATIONTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property CreationTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addCreationTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CREATIONTIME, value, 1);
	}
	
    /**
     * Adds a value to property CreationTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addCreationTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CREATIONTIME, value, 1);
	}
    /**
     * Adds a value to property CreationTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addCreationTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, CREATIONTIME, value, 1);
	}
	
    /**
     * Adds a value to property CreationTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addCreationTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CREATIONTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property CreationTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreationTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATIONTIME, value);
	}
	
    /**
     * Sets a value of property CreationTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreationTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATIONTIME, value);
	}
    /**
     * Sets a value of property CreationTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreationTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, CREATIONTIME, value);
	}
	
    /**
     * Sets a value of property CreationTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreationTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), CREATIONTIME, value);
	}
  


    /**
     * Removes a value of property CreationTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeCreationTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, CREATIONTIME, value, 1);
	}
	
    /**
     * Removes a value of property CreationTime as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeCreationTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), CREATIONTIME, value, 1);
	}
    /**
     * Removes a value of property CreationTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeCreationTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.remove(model, instanceResource, CREATIONTIME, value, 1);
	}
	
    /**
     * Removes a value of property CreationTime from an instance of java.util.Calendar 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeCreationTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), CREATIONTIME, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1dcc4cd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDeletionTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DELETIONTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1dcc4cd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDeletionTime() {
		return Base.has(this.model, this.getResource(), DELETIONTIME);
	}

    /**
     * Get single value of property DeletionTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDeletionTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, DELETIONTIME);
	}
	
    /**
     * Get single value of property DeletionTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDeletionTime_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), DELETIONTIME);
	}
     /**
     * Get single value of property DeletionTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getDeletionTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, DELETIONTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property DeletionTime     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getDeletionTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), DELETIONTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property DeletionTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDeletionTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DELETIONTIME, value, 1);
	}
	
    /**
     * Adds a value to property DeletionTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDeletionTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DELETIONTIME, value, 1);
	}
    /**
     * Adds a value to property DeletionTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDeletionTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, DELETIONTIME, value, 1);
	}
	
    /**
     * Adds a value to property DeletionTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDeletionTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DELETIONTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property DeletionTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDeletionTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DELETIONTIME, value);
	}
	
    /**
     * Sets a value of property DeletionTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDeletionTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DELETIONTIME, value);
	}
    /**
     * Sets a value of property DeletionTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDeletionTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, DELETIONTIME, value);
	}
	
    /**
     * Sets a value of property DeletionTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDeletionTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), DELETIONTIME, value);
	}
  


    /**
     * Removes a value of property DeletionTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDeletionTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DELETIONTIME, value);
	}
	
    /**
     * Removes a value of property DeletionTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDeletionTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DELETIONTIME, value);
	}
    /**
     * Removes a value of property DeletionTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDeletionTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, DELETIONTIME, value);
	}
	
    /**
     * Removes a value of property DeletionTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDeletionTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), DELETIONTIME, value);
	}
  
    /**
     * Removes all values of property DeletionTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDeletionTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DELETIONTIME);
	}
	
    /**
     * Removes all values of property DeletionTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addDeletionTime() {
		Base.removeAll(this.model, this.getResource(), DELETIONTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a6d35 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasProvenance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PROVENANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a6d35 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasProvenance() {
		return Base.has(this.model, this.getResource(), PROVENANCE);
	}

    /**
     * Get single value of property Provenance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getProvenance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, PROVENANCE);
	}
	
    /**
     * Get single value of property Provenance as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getProvenance_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), PROVENANCE);
	}
     /**
     * Get single value of property Provenance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static org.ontoware.rdf2go.model.node.URI getProvenance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.URI) Base.get(model, instanceResource, PROVENANCE, org.ontoware.rdf2go.model.node.URI.class);
	}
	
    /**
     * Get single value of property Provenance     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public org.ontoware.rdf2go.model.node.URI getProvenance() {
		return (org.ontoware.rdf2go.model.node.URI) Base.get(this.model, this.getResource(), PROVENANCE, org.ontoware.rdf2go.model.node.URI.class);
	}
  
    /**
     * Adds a value to property Provenance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addProvenance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PROVENANCE, value, 1);
	}
	
    /**
     * Adds a value to property Provenance as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addProvenance( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PROVENANCE, value, 1);
	}
    /**
     * Adds a value to property Provenance from an instance of org.ontoware.rdf2go.model.node.URI 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addProvenance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.URI value)
    throws CardinalityException {
		Base.add(model, instanceResource, PROVENANCE, value, 1);
	}
	
    /**
     * Adds a value to property Provenance from an instance of org.ontoware.rdf2go.model.node.URI 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addProvenance(org.ontoware.rdf2go.model.node.URI value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PROVENANCE, value, 1);
	}
 
 

    /**
     * Sets a value of property Provenance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setProvenance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PROVENANCE, value);
	}
	
    /**
     * Sets a value of property Provenance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setProvenance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PROVENANCE, value);
	}
    /**
     * Sets a value of property Provenance from an instance of org.ontoware.rdf2go.model.node.URI 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setProvenance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.URI value) {
		Base.set(model, instanceResource, PROVENANCE, value);
	}
	
    /**
     * Sets a value of property Provenance from an instance of org.ontoware.rdf2go.model.node.URI 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setProvenance(org.ontoware.rdf2go.model.node.URI value) {
		Base.set(this.model, this.getResource(), PROVENANCE, value);
	}
  


    /**
     * Removes a value of property Provenance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeProvenance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PROVENANCE, value);
	}
	
    /**
     * Removes a value of property Provenance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeProvenance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PROVENANCE, value);
	}
    /**
     * Removes a value of property Provenance given as an instance of org.ontoware.rdf2go.model.node.URI 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeProvenance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.URI value) {
		Base.remove(model, instanceResource, PROVENANCE, value);
	}
	
    /**
     * Removes a value of property Provenance given as an instance of org.ontoware.rdf2go.model.node.URI 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeProvenance(org.ontoware.rdf2go.model.node.URI value) {
		Base.remove(this.model, this.getResource(), PROVENANCE, value);
	}
  
    /**
     * Removes all values of property Provenance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllProvenance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROVENANCE);
	}
	
    /**
     * Removes all values of property Provenance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addProvenance() {
		Base.removeAll(this.model, this.getResource(), PROVENANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d502d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d502d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTag() {
		return Base.has(this.model, this.getResource(), TAG);
	}

     /**
     * Get all values of property Tag as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, TAG);
	}
	
    /**
     * Get all values of property Tag as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, TAG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Tag as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), TAG);
	}

    /**
     * Get all values of property Tag as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), TAG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Tag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TAG, java.lang.String.class);
	}
	
    /**
     * Get all values of property Tag as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTag_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAG, java.lang.String.class);
	}

    /**
     * Get all values of property Tag     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTag() {
		return Base.getAll(this.model, this.getResource(), TAG, java.lang.String.class);
	}

    /**
     * Get all values of property Tag as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTag_as() {
		return Base.getAll_as(this.model, this.getResource(), TAG, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Tag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TAG, value);
	}
	
    /**
     * Adds a value to property Tag as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TAG, value);
	}
    /**
     * Adds a value to property Tag from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TAG, value);
	}
	
    /**
     * Adds a value to property Tag from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTag(java.lang.String value) {
		Base.add(this.model, this.getResource(), TAG, value);
	}
  

    /**
     * Sets a value of property Tag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TAG, value);
	}
	
    /**
     * Sets a value of property Tag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TAG, value);
	}
    /**
     * Sets a value of property Tag from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TAG, value);
	}
	
    /**
     * Sets a value of property Tag from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTag(java.lang.String value) {
		Base.set(this.model, this.getResource(), TAG, value);
	}
  


    /**
     * Removes a value of property Tag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TAG, value);
	}
	
    /**
     * Removes a value of property Tag as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TAG, value);
	}
    /**
     * Removes a value of property Tag given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TAG, value);
	}
	
    /**
     * Removes a value of property Tag given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTag(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TAG, value);
	}
  
    /**
     * Removes all values of property Tag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TAG);
	}
	
    /**
     * Removes all values of property Tag	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addTag() {
		Base.removeAll(this.model, this.getResource(), TAG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b29c9d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUserdefinedMetadata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USERDEFINEDMETADATA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b29c9d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUserdefinedMetadata() {
		return Base.has(this.model, this.getResource(), USERDEFINEDMETADATA);
	}

    /**
     * Get single value of property UserdefinedMetadata as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getUserdefinedMetadata_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, USERDEFINEDMETADATA);
	}
	
    /**
     * Get single value of property UserdefinedMetadata as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getUserdefinedMetadata_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), USERDEFINEDMETADATA);
	}
     /**
     * Get single value of property UserdefinedMetadata     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static org.ontoware.rdf2go.model.node.URI getUserdefinedMetadata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.URI) Base.get(model, instanceResource, USERDEFINEDMETADATA, org.ontoware.rdf2go.model.node.URI.class);
	}
	
    /**
     * Get single value of property UserdefinedMetadata     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public org.ontoware.rdf2go.model.node.URI getUserdefinedMetadata() {
		return (org.ontoware.rdf2go.model.node.URI) Base.get(this.model, this.getResource(), USERDEFINEDMETADATA, org.ontoware.rdf2go.model.node.URI.class);
	}
  
    /**
     * Adds a value to property UserdefinedMetadata as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addUserdefinedMetadata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, USERDEFINEDMETADATA, value, 1);
	}
	
    /**
     * Adds a value to property UserdefinedMetadata as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addUserdefinedMetadata( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), USERDEFINEDMETADATA, value, 1);
	}
    /**
     * Adds a value to property UserdefinedMetadata from an instance of org.ontoware.rdf2go.model.node.URI 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addUserdefinedMetadata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.URI value)
    throws CardinalityException {
		Base.add(model, instanceResource, USERDEFINEDMETADATA, value, 1);
	}
	
    /**
     * Adds a value to property UserdefinedMetadata from an instance of org.ontoware.rdf2go.model.node.URI 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addUserdefinedMetadata(org.ontoware.rdf2go.model.node.URI value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), USERDEFINEDMETADATA, value, 1);
	}
 
 

    /**
     * Sets a value of property UserdefinedMetadata from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUserdefinedMetadata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USERDEFINEDMETADATA, value);
	}
	
    /**
     * Sets a value of property UserdefinedMetadata from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUserdefinedMetadata( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USERDEFINEDMETADATA, value);
	}
    /**
     * Sets a value of property UserdefinedMetadata from an instance of org.ontoware.rdf2go.model.node.URI 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUserdefinedMetadata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.URI value) {
		Base.set(model, instanceResource, USERDEFINEDMETADATA, value);
	}
	
    /**
     * Sets a value of property UserdefinedMetadata from an instance of org.ontoware.rdf2go.model.node.URI 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUserdefinedMetadata(org.ontoware.rdf2go.model.node.URI value) {
		Base.set(this.model, this.getResource(), USERDEFINEDMETADATA, value);
	}
  


    /**
     * Removes a value of property UserdefinedMetadata as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUserdefinedMetadata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USERDEFINEDMETADATA, value);
	}
	
    /**
     * Removes a value of property UserdefinedMetadata as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUserdefinedMetadata( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USERDEFINEDMETADATA, value);
	}
    /**
     * Removes a value of property UserdefinedMetadata given as an instance of org.ontoware.rdf2go.model.node.URI 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUserdefinedMetadata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.URI value) {
		Base.remove(model, instanceResource, USERDEFINEDMETADATA, value);
	}
	
    /**
     * Removes a value of property UserdefinedMetadata given as an instance of org.ontoware.rdf2go.model.node.URI 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUserdefinedMetadata(org.ontoware.rdf2go.model.node.URI value) {
		Base.remove(this.model, this.getResource(), USERDEFINEDMETADATA, value);
	}
  
    /**
     * Removes all values of property UserdefinedMetadata     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUserdefinedMetadata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USERDEFINEDMETADATA);
	}
	
    /**
     * Removes all values of property UserdefinedMetadata	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addUserdefinedMetadata() {
		Base.removeAll(this.model, this.getResource(), USERDEFINEDMETADATA);
	}
 }