/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 16.10.07 16:48
 */
package org.ontoware.semversion.impl.generated;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * valid time, transaction time and core metadata
 *  
 * This class manages access to these properties:
 * <ul>
 *   <li> Author </li>
 *   <li> CreationTime </li>
 *   <li> DeletionTime </li>
 *   <li> Provenance </li>
 *   <li> Tag </li>
 *   <li> UserdefinedMetadata </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 16.10.07 16:48
 */
public class VersionedItem extends Thing {

    /** http://purl.org/net/semversion#VersionedItem */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/net/semversion#VersionedItem", false);

    /** http://purl.org/net/semversion#hasAuthor */
	public static final URI AUTHOR = new URIImpl("http://purl.org/net/semversion#hasAuthor",false);

    /** http://purl.org/net/semversion#hasCreationTime */
	public static final URI CREATIONTIME = new URIImpl("http://purl.org/net/semversion#hasCreationTime",false);

    /** http://purl.org/net/semversion#hasDeletionTime */
	public static final URI DELETIONTIME = new URIImpl("http://purl.org/net/semversion#hasDeletionTime",false);

    /** http://purl.org/net/semversion#hasProvenance */
	public static final URI PROVENANCE = new URIImpl("http://purl.org/net/semversion#hasProvenance",false);

    /** http://purl.org/net/semversion#hasTag */
	public static final URI TAG = new URIImpl("http://purl.org/net/semversion#hasTag",false);

    /** http://purl.org/net/semversion#hasUserdefinedMetadata */
	public static final URI USERDEFINEDMETADATA = new URIImpl("http://purl.org/net/semversion#hasUserdefinedMetadata",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/net/semversion#hasAuthor",false),
      new URIImpl("http://purl.org/net/semversion#hasCreationTime",false),
      new URIImpl("http://purl.org/net/semversion#hasDeletionTime",false),
      new URIImpl("http://purl.org/net/semversion#hasProvenance",false),
      new URIImpl("http://purl.org/net/semversion#hasTag",false),
      new URIImpl("http://purl.org/net/semversion#hasUserdefinedMetadata",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected VersionedItem ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public VersionedItem ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public VersionedItem ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public VersionedItem ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public VersionedItem ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public VersionedItem ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of VersionedItem or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static VersionedItem getInstance(Model model, URI uri) throws Exception {
		return (VersionedItem) getInstance(model, uri, VersionedItem.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public VersionedItem[] getAllInstances() {
		return (VersionedItem[]) getAllInstances(super.model, VersionedItem.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static VersionedItem[] getAllInstances(Model model) {
		return (VersionedItem[]) getAllInstances(model, VersionedItem.class);
	}


    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public User getAuthor() {
		return (User) get(AUTHOR, User.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setAuthor( User value ) {
		set(AUTHOR, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeAuthor() {
		removeAll(AUTHOR);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeAuthor( User value  ) {
		remove(AUTHOR, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllAuthor() {
		removeAll(AUTHOR);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, AUTHOR, value)
	 */
	public boolean hasAuthor( User value) {
		return hasValue(AUTHOR, value);
	}

	/**
	 * @return true if the model contains a statement (this, AUTHOR, *)
	 */
	public boolean hasAuthor() {
		return hasValue(AUTHOR);
	}

   

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.util.Calendar getCreationTime() {
		return (java.util.Calendar) get(CREATIONTIME, java.util.Calendar.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setCreationTime( java.util.Calendar value ) {
		set(CREATIONTIME, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeCreationTime() {
		removeAll(CREATIONTIME);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 * @throws CardinalityException if removing would change the number of
	 * values below the minimal cardinality 1
	 */
	public void removeCreationTime( java.util.Calendar value  )
	throws CardinalityException {
		remove(CREATIONTIME, value, 1);
	}

 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CREATIONTIME, value)
	 */
	public boolean hasCreationTime( java.util.Calendar value) {
		return hasValue(CREATIONTIME, value);
	}

	/**
	 * @return true if the model contains a statement (this, CREATIONTIME, *)
	 */
	public boolean hasCreationTime() {
		return hasValue(CREATIONTIME);
	}

   

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.util.Calendar getDeletionTime() {
		return (java.util.Calendar) get(DELETIONTIME, java.util.Calendar.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setDeletionTime( java.util.Calendar value ) {
		set(DELETIONTIME, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeDeletionTime() {
		removeAll(DELETIONTIME);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeDeletionTime( java.util.Calendar value  ) {
		remove(DELETIONTIME, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllDeletionTime() {
		removeAll(DELETIONTIME);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, DELETIONTIME, value)
	 */
	public boolean hasDeletionTime( java.util.Calendar value) {
		return hasValue(DELETIONTIME, value);
	}

	/**
	 * @return true if the model contains a statement (this, DELETIONTIME, *)
	 */
	public boolean hasDeletionTime() {
		return hasValue(DELETIONTIME);
	}

   

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public org.ontoware.rdf2go.model.node.URI getProvenance() {
		return (org.ontoware.rdf2go.model.node.URI) get(PROVENANCE, org.ontoware.rdf2go.model.node.URI.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setProvenance( org.ontoware.rdf2go.model.node.URI value ) {
		set(PROVENANCE, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeProvenance() {
		removeAll(PROVENANCE);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeProvenance( org.ontoware.rdf2go.model.node.URI value  ) {
		remove(PROVENANCE, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllProvenance() {
		removeAll(PROVENANCE);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, PROVENANCE, value)
	 */
	public boolean hasProvenance( org.ontoware.rdf2go.model.node.URI value) {
		return hasValue(PROVENANCE, value);
	}

	/**
	 * @return true if the model contains a statement (this, PROVENANCE, *)
	 */
	public boolean hasProvenance() {
		return hasValue(PROVENANCE);
	}

   

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getTag() {
		return (java.lang.String) get(TAG, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setTag( java.lang.String value ) {
		set(TAG, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeTag() {
		removeAll(TAG);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeTag( java.lang.String value  ) {
		remove(TAG, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllTag() {
		removeAll(TAG);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, TAG, value)
	 */
	public boolean hasTag( java.lang.String value) {
		return hasValue(TAG, value);
	}

	/**
	 * @return true if the model contains a statement (this, TAG, *)
	 */
	public boolean hasTag() {
		return hasValue(TAG);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addTag( java.lang.String value  ) {
		add(TAG, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public java.lang.String[] getAllTag() {
		return (java.lang.String[]) getAll(TAG, java.lang.String.class);
	}
  

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public org.ontoware.rdf2go.model.node.URI getUserdefinedMetadata() {
		return (org.ontoware.rdf2go.model.node.URI) get(USERDEFINEDMETADATA, org.ontoware.rdf2go.model.node.URI.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setUserdefinedMetadata( org.ontoware.rdf2go.model.node.URI value ) {
		set(USERDEFINEDMETADATA, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeUserdefinedMetadata() {
		removeAll(USERDEFINEDMETADATA);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeUserdefinedMetadata( org.ontoware.rdf2go.model.node.URI value  ) {
		remove(USERDEFINEDMETADATA, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllUserdefinedMetadata() {
		removeAll(USERDEFINEDMETADATA);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, USERDEFINEDMETADATA, value)
	 */
	public boolean hasUserdefinedMetadata( org.ontoware.rdf2go.model.node.URI value) {
		return hasValue(USERDEFINEDMETADATA, value);
	}

	/**
	 * @return true if the model contains a statement (this, USERDEFINEDMETADATA, *)
	 */
	public boolean hasUserdefinedMetadata() {
		return hasValue(USERDEFINEDMETADATA);
	}

    
}

  
  
