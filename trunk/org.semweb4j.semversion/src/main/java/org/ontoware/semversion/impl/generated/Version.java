/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1046 2008-01-26 14:38:26Z max.at.xam.de $) on 12.03.08 12:36
 */
package org.ontoware.semversion.impl.generated;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BranchLabel </li>
 *   <li> ChangeCause </li>
 *   <li> Child </li>
 *   <li> Container </li>
 *   <li> Content </li>
 *   <li> FirstParent </li>
 *   <li> SecondParent </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 12.03.08 12:36
 */
public class Version extends VersionedItem {

    /** http://purl.org/net/semversion#Version */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/net/semversion#Version", false);

    /** http://purl.org/net/semversion#branchLabel */
	public static final URI BRANCHLABEL = new URIImpl("http://purl.org/net/semversion#branchLabel",false);

    /** http://purl.org/net/semversion#hasChangeCause */
	public static final URI CHANGECAUSE = new URIImpl("http://purl.org/net/semversion#hasChangeCause",false);

    /** http://purl.org/net/semversion#hasChild */
	public static final URI CHILD = new URIImpl("http://purl.org/net/semversion#hasChild",false);

    /** http://purl.org/net/semversion#hasContainer */
	public static final URI CONTAINER = new URIImpl("http://purl.org/net/semversion#hasContainer",false);

    /** http://purl.org/net/semversion#hasContent */
	public static final URI CONTENT = new URIImpl("http://purl.org/net/semversion#hasContent",false);

    /** http://purl.org/net/semversion#hasFirstParent */
	public static final URI FIRSTPARENT = new URIImpl("http://purl.org/net/semversion#hasFirstParent",false);

    /** http://purl.org/net/semversion#hasSecondParent */
	public static final URI SECONDPARENT = new URIImpl("http://purl.org/net/semversion#hasSecondParent",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/net/semversion#branchLabel",false),
      new URIImpl("http://purl.org/net/semversion#hasChangeCause",false),
      new URIImpl("http://purl.org/net/semversion#hasChild",false),
      new URIImpl("http://purl.org/net/semversion#hasContainer",false),
      new URIImpl("http://purl.org/net/semversion#hasContent",false),
      new URIImpl("http://purl.org/net/semversion#hasFirstParent",false),
      new URIImpl("http://purl.org/net/semversion#hasSecondParent",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Version ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Version ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Version ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Version ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Version ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/net/semversion#Version).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Version> getAllInstance_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Version.class );
	}

    /**
	 * Delete all rdf:type from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Root' to this Version instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRoot_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, VersionedModel.ROOT, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Version' to this Version instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllVersion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, VersionedModel.VERSION, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Child' to this Version instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChild_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Version.CHILD, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FirstParent' to this Version instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFirstParent_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Version.FIRSTPARENT, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SecondParent' to this Version instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSecondParent_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Version.SECONDPARENT, objectValue);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18e8fe0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBranchLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BRANCHLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18e8fe0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBranchLabel() {
		return Base.has(this.model, this.getResource(), BRANCHLABEL);
	}

    /**
     * Get single value of property BranchLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getBranchLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, BRANCHLABEL);
	}
	
    /**
     * Get single value of property BranchLabel as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getBranchLabel_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), BRANCHLABEL);
	}
     /**
     * Get single value of property BranchLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getBranchLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, BRANCHLABEL, java.lang.String.class);
	}
	
    /**
     * Get single value of property BranchLabel     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getBranchLabel() {
		return (java.lang.String) Base.get(this.model, this.getResource(), BRANCHLABEL, java.lang.String.class);
	}
  
    /**
     * Adds a value to property BranchLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addBranchLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, BRANCHLABEL, value, 1);
	}
	
    /**
     * Adds a value to property BranchLabel as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addBranchLabel( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BRANCHLABEL, value, 1);
	}
    /**
     * Adds a value to property BranchLabel from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addBranchLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, BRANCHLABEL, value, 1);
	}
	
    /**
     * Adds a value to property BranchLabel from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addBranchLabel(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BRANCHLABEL, value, 1);
	}
 
 

    /**
     * Sets a value of property BranchLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBranchLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BRANCHLABEL, value);
	}
	
    /**
     * Sets a value of property BranchLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBranchLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BRANCHLABEL, value);
	}
    /**
     * Sets a value of property BranchLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBranchLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, BRANCHLABEL, value);
	}
	
    /**
     * Sets a value of property BranchLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBranchLabel(java.lang.String value) {
		Base.set(this.model, this.getResource(), BRANCHLABEL, value);
	}
  


    /**
     * Removes a value of property BranchLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeBranchLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, BRANCHLABEL, value, 1);
	}
	
    /**
     * Removes a value of property BranchLabel as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeBranchLabel( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), BRANCHLABEL, value, 1);
	}
    /**
     * Removes a value of property BranchLabel from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeBranchLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.remove(model, instanceResource, BRANCHLABEL, value, 1);
	}
	
    /**
     * Removes a value of property BranchLabel from an instance of java.lang.String 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeBranchLabel(java.lang.String value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), BRANCHLABEL, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@eb840f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChangeCause(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHANGECAUSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@eb840f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChangeCause() {
		return Base.has(this.model, this.getResource(), CHANGECAUSE);
	}

    /**
     * Get single value of property ChangeCause as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getChangeCause_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, CHANGECAUSE);
	}
	
    /**
     * Get single value of property ChangeCause as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getChangeCause_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), CHANGECAUSE);
	}
     /**
     * Get single value of property ChangeCause     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getChangeCause(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, CHANGECAUSE, java.lang.String.class);
	}
	
    /**
     * Get single value of property ChangeCause     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getChangeCause() {
		return (java.lang.String) Base.get(this.model, this.getResource(), CHANGECAUSE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property ChangeCause as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addChangeCause( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CHANGECAUSE, value, 1);
	}
	
    /**
     * Adds a value to property ChangeCause as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addChangeCause( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CHANGECAUSE, value, 1);
	}
    /**
     * Adds a value to property ChangeCause from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addChangeCause(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, CHANGECAUSE, value, 1);
	}
	
    /**
     * Adds a value to property ChangeCause from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addChangeCause(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CHANGECAUSE, value, 1);
	}
 
 

    /**
     * Sets a value of property ChangeCause from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChangeCause( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHANGECAUSE, value);
	}
	
    /**
     * Sets a value of property ChangeCause from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChangeCause( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHANGECAUSE, value);
	}
    /**
     * Sets a value of property ChangeCause from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChangeCause(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CHANGECAUSE, value);
	}
	
    /**
     * Sets a value of property ChangeCause from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChangeCause(java.lang.String value) {
		Base.set(this.model, this.getResource(), CHANGECAUSE, value);
	}
  


    /**
     * Removes a value of property ChangeCause as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChangeCause( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHANGECAUSE, value);
	}
	
    /**
     * Removes a value of property ChangeCause as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChangeCause( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHANGECAUSE, value);
	}
    /**
     * Removes a value of property ChangeCause given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChangeCause(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CHANGECAUSE, value);
	}
	
    /**
     * Removes a value of property ChangeCause given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChangeCause(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CHANGECAUSE, value);
	}
  
    /**
     * Removes all values of property ChangeCause     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChangeCause( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHANGECAUSE);
	}
	
    /**
     * Removes all values of property ChangeCause	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addChangeCause() {
		Base.removeAll(this.model, this.getResource(), CHANGECAUSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@125ee49 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHILD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@125ee49 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChild() {
		return Base.has(this.model, this.getResource(), CHILD);
	}

     /**
     * Get all values of property Child as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChild_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, CHILD);
	}
	
    /**
     * Get all values of property Child as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChild_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, CHILD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Child as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChild_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), CHILD);
	}

    /**
     * Get all values of property Child as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChild_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), CHILD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Child     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Version> getAllChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHILD, Version.class);
	}
	
    /**
     * Get all values of property Child as a ReactorResult of Version 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Version> getAllChild_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHILD, Version.class);
	}

    /**
     * Get all values of property Child     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Version> getAllChild() {
		return Base.getAll(this.model, this.getResource(), CHILD, Version.class);
	}

    /**
     * Get all values of property Child as a ReactorResult of Version 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Version> getAllChild_as() {
		return Base.getAll_as(this.model, this.getResource(), CHILD, Version.class);
	}
 
    /**
     * Adds a value to property Child as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChild( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHILD, value);
	}
	
    /**
     * Adds a value to property Child as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChild( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHILD, value);
	}
    /**
     * Adds a value to property Child from an instance of Version 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value) {
		Base.add(model, instanceResource, CHILD, value);
	}
	
    /**
     * Adds a value to property Child from an instance of Version 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChild(Version value) {
		Base.add(this.model, this.getResource(), CHILD, value);
	}
  

    /**
     * Sets a value of property Child from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChild( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHILD, value);
	}
	
    /**
     * Sets a value of property Child from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChild( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHILD, value);
	}
    /**
     * Sets a value of property Child from an instance of Version 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value) {
		Base.set(model, instanceResource, CHILD, value);
	}
	
    /**
     * Sets a value of property Child from an instance of Version 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChild(Version value) {
		Base.set(this.model, this.getResource(), CHILD, value);
	}
  


    /**
     * Removes a value of property Child as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChild( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHILD, value);
	}
	
    /**
     * Removes a value of property Child as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChild( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHILD, value);
	}
    /**
     * Removes a value of property Child given as an instance of Version 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value) {
		Base.remove(model, instanceResource, CHILD, value);
	}
	
    /**
     * Removes a value of property Child given as an instance of Version 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChild(Version value) {
		Base.remove(this.model, this.getResource(), CHILD, value);
	}
  
    /**
     * Removes all values of property Child     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChild( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHILD);
	}
	
    /**
     * Removes all values of property Child	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addChild() {
		Base.removeAll(this.model, this.getResource(), CHILD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d511e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTAINER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d511e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContainer() {
		return Base.has(this.model, this.getResource(), CONTAINER);
	}

    /**
     * Get single value of property Container as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContainer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, CONTAINER);
	}
	
    /**
     * Get single value of property Container as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContainer_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), CONTAINER);
	}
     /**
     * Get single value of property Container     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static VersionedModel getContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (VersionedModel) Base.get(model, instanceResource, CONTAINER, VersionedModel.class);
	}
	
    /**
     * Get single value of property Container     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public VersionedModel getContainer() {
		return (VersionedModel) Base.get(this.model, this.getResource(), CONTAINER, VersionedModel.class);
	}
  
    /**
     * Adds a value to property Container as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContainer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTAINER, value, 1);
	}
	
    /**
     * Adds a value to property Container as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContainer( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTAINER, value, 1);
	}
    /**
     * Adds a value to property Container from an instance of VersionedModel 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VersionedModel value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTAINER, value, 1);
	}
	
    /**
     * Adds a value to property Container from an instance of VersionedModel 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContainer(VersionedModel value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTAINER, value, 1);
	}
 
 

    /**
     * Sets a value of property Container from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContainer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Sets a value of property Container from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContainer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTAINER, value);
	}
    /**
     * Sets a value of property Container from an instance of VersionedModel 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VersionedModel value) {
		Base.set(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Sets a value of property Container from an instance of VersionedModel 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContainer(VersionedModel value) {
		Base.set(this.model, this.getResource(), CONTAINER, value);
	}
  


    /**
     * Removes a value of property Container as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeContainer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, CONTAINER, value, 1);
	}
	
    /**
     * Removes a value of property Container as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeContainer( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), CONTAINER, value, 1);
	}
    /**
     * Removes a value of property Container from an instance of VersionedModel 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VersionedModel value)
    throws CardinalityException {
		Base.remove(model, instanceResource, CONTAINER, value, 1);
	}
	
    /**
     * Removes a value of property Container from an instance of VersionedModel 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeContainer(VersionedModel value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), CONTAINER, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1947647 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1947647 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContent() {
		return Base.has(this.model, this.getResource(), CONTENT);
	}

    /**
     * Get single value of property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, CONTENT);
	}
	
    /**
     * Get single value of property Content as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContent_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), CONTENT);
	}
     /**
     * Get single value of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static RDFModel getContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (RDFModel) Base.get(model, instanceResource, CONTENT, RDFModel.class);
	}
	
    /**
     * Get single value of property Content     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public RDFModel getContent() {
		return (RDFModel) Base.get(this.model, this.getResource(), CONTENT, RDFModel.class);
	}
  
    /**
     * Adds a value to property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENT, value, 1);
	}
	
    /**
     * Adds a value to property Content as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContent( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENT, value, 1);
	}
    /**
     * Adds a value to property Content from an instance of RDFModel 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFModel value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENT, value, 1);
	}
	
    /**
     * Adds a value to property Content from an instance of RDFModel 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContent(RDFModel value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENT, value, 1);
	}
 
 

    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Sets a value of property Content from an instance of RDFModel 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFModel value) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an instance of RDFModel 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContent(RDFModel value) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
  


    /**
     * Removes a value of property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Removes a value of property Content given as an instance of RDFModel 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFModel value) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content given as an instance of RDFModel 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContent(RDFModel value) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
  
    /**
     * Removes all values of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENT);
	}
	
    /**
     * Removes all values of property Content	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addContent() {
		Base.removeAll(this.model, this.getResource(), CONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3744bc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFirstParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FIRSTPARENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3744bc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFirstParent() {
		return Base.has(this.model, this.getResource(), FIRSTPARENT);
	}

    /**
     * Get single value of property FirstParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFirstParent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, FIRSTPARENT);
	}
	
    /**
     * Get single value of property FirstParent as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFirstParent_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), FIRSTPARENT);
	}
     /**
     * Get single value of property FirstParent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static Version getFirstParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (Version) Base.get(model, instanceResource, FIRSTPARENT, Version.class);
	}
	
    /**
     * Get single value of property FirstParent     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public Version getFirstParent() {
		return (Version) Base.get(this.model, this.getResource(), FIRSTPARENT, Version.class);
	}
  
    /**
     * Adds a value to property FirstParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFirstParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTPARENT, value, 1);
	}
	
    /**
     * Adds a value to property FirstParent as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFirstParent( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTPARENT, value, 1);
	}
    /**
     * Adds a value to property FirstParent from an instance of Version 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFirstParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value)
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTPARENT, value, 1);
	}
	
    /**
     * Adds a value to property FirstParent from an instance of Version 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFirstParent(Version value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTPARENT, value, 1);
	}
 
 

    /**
     * Sets a value of property FirstParent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFirstParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FIRSTPARENT, value);
	}
	
    /**
     * Sets a value of property FirstParent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFirstParent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FIRSTPARENT, value);
	}
    /**
     * Sets a value of property FirstParent from an instance of Version 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFirstParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value) {
		Base.set(model, instanceResource, FIRSTPARENT, value);
	}
	
    /**
     * Sets a value of property FirstParent from an instance of Version 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFirstParent(Version value) {
		Base.set(this.model, this.getResource(), FIRSTPARENT, value);
	}
  


    /**
     * Removes a value of property FirstParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFirstParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FIRSTPARENT, value);
	}
	
    /**
     * Removes a value of property FirstParent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFirstParent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FIRSTPARENT, value);
	}
    /**
     * Removes a value of property FirstParent given as an instance of Version 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFirstParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value) {
		Base.remove(model, instanceResource, FIRSTPARENT, value);
	}
	
    /**
     * Removes a value of property FirstParent given as an instance of Version 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFirstParent(Version value) {
		Base.remove(this.model, this.getResource(), FIRSTPARENT, value);
	}
  
    /**
     * Removes all values of property FirstParent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFirstParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FIRSTPARENT);
	}
	
    /**
     * Removes all values of property FirstParent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addFirstParent() {
		Base.removeAll(this.model, this.getResource(), FIRSTPARENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f6fd54 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSecondParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SECONDPARENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f6fd54 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSecondParent() {
		return Base.has(this.model, this.getResource(), SECONDPARENT);
	}

    /**
     * Get single value of property SecondParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSecondParent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(model, instanceResource, SECONDPARENT);
	}
	
    /**
     * Get single value of property SecondParent as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSecondParent_asNode() {
		return (org.ontoware.rdf2go.model.node.Node) Base.get_asNode(this.model, this.getResource(), SECONDPARENT);
	}
     /**
     * Get single value of property SecondParent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static Version getSecondParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (Version) Base.get(model, instanceResource, SECONDPARENT, Version.class);
	}
	
    /**
     * Get single value of property SecondParent     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public Version getSecondParent() {
		return (Version) Base.get(this.model, this.getResource(), SECONDPARENT, Version.class);
	}
  
    /**
     * Adds a value to property SecondParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSecondParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SECONDPARENT, value, 1);
	}
	
    /**
     * Adds a value to property SecondParent as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSecondParent( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SECONDPARENT, value, 1);
	}
    /**
     * Adds a value to property SecondParent from an instance of Version 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSecondParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value)
    throws CardinalityException {
		Base.add(model, instanceResource, SECONDPARENT, value, 1);
	}
	
    /**
     * Adds a value to property SecondParent from an instance of Version 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSecondParent(Version value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SECONDPARENT, value, 1);
	}
 
 

    /**
     * Sets a value of property SecondParent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSecondParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SECONDPARENT, value);
	}
	
    /**
     * Sets a value of property SecondParent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSecondParent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SECONDPARENT, value);
	}
    /**
     * Sets a value of property SecondParent from an instance of Version 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSecondParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value) {
		Base.set(model, instanceResource, SECONDPARENT, value);
	}
	
    /**
     * Sets a value of property SecondParent from an instance of Version 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSecondParent(Version value) {
		Base.set(this.model, this.getResource(), SECONDPARENT, value);
	}
  


    /**
     * Removes a value of property SecondParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSecondParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SECONDPARENT, value);
	}
	
    /**
     * Removes a value of property SecondParent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSecondParent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SECONDPARENT, value);
	}
    /**
     * Removes a value of property SecondParent given as an instance of Version 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSecondParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Version value) {
		Base.remove(model, instanceResource, SECONDPARENT, value);
	}
	
    /**
     * Removes a value of property SecondParent given as an instance of Version 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSecondParent(Version value) {
		Base.remove(this.model, this.getResource(), SECONDPARENT, value);
	}
  
    /**
     * Removes all values of property SecondParent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSecondParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SECONDPARENT);
	}
	
    /**
     * Removes all values of property SecondParent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addSecondParent() {
		Base.removeAll(this.model, this.getResource(), SECONDPARENT);
	}
 }