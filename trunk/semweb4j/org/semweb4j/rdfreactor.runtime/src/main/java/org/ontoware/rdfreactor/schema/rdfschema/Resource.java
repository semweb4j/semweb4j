
/**
 * generated by http://RDFReactor.ontoware.org on 08.05.06 17:17
 */
package org.ontoware.rdfreactor.schema.rdfschema;

import java.net.URL;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.model.TypeUtils;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.runtime.ReactorBaseImpl;
import org.ontoware.rdfreactor.schema.owl.Class;


/**
 * This class was generated by <a href="http://RDFReactor.ontoware.org">RDFReactor</a> on 08.05.06 17:17
 * This class manages access to these properties:
 * <ul>
 *   <li> Type </li>
 *   <li> IsDefinedBy </li>
 *   <li> Member </li>
 *   <li> SeeAlso </li>
 *   <li> Label </li>
 *   <li> Comment </li>
 *   <li> Value </li>
 * </ul>
 * Schema Comment: The class resource, everything.
 */
public class Resource extends ReactorBaseImpl {

    /** http://www.w3.org/2000/01/rdf-schema#Resource */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Resource",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#type */
	public static final URI TYPE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type",false);

    /** http://www.w3.org/2000/01/rdf-schema#isDefinedBy */
	public static final URI ISDEFINEDBY = new URIImpl("http://www.w3.org/2000/01/rdf-schema#isDefinedBy",false);

    /** http://www.w3.org/2000/01/rdf-schema#member */
	public static final URI MEMBER = new URIImpl("http://www.w3.org/2000/01/rdf-schema#member",false);

    /** http://www.w3.org/2000/01/rdf-schema#seeAlso */
	public static final URI SEEALSO = new URIImpl("http://www.w3.org/2000/01/rdf-schema#seeAlso",false);

    /** http://www.w3.org/2000/01/rdf-schema#label */
	public static final URI LABEL = new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false);

    /** http://www.w3.org/2000/01/rdf-schema#comment */
	public static final URI COMMENT = new URIImpl("http://www.w3.org/2000/01/rdf-schema#comment",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#value */
	public static final URI VALUE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#value",false);
	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier URI, BlankNode or URL that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Resource ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Resource ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Resource ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a URL.
	 * Creating two wrappers for the same URL is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param url URL of this instance
	 */
	public Resource ( Model model, URL url ) {
		this(model, TypeUtils.toResource(url), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Resource ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Resource ( Model model ) {
		this(model, RDFS_CLASS, true);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @return all instances of this class
	 */
	public Resource[] getAllInstances() {
		return (Resource[]) getAllInstances(super.model, Resource.class);
	}

	/**
	 * @return all A's that have a relation 'Predicate' to this Resource instance
	 */
	public Statement[] getAllPredicate_Inverse() {
		return (Statement[]) getAll_Inverse(Statement.PREDICATE, this.getResource(), Statement.class);
	}

	/**
	 * add 'Predicate'-Inverse
	 */
	public void addPredicate_Inverse(Statement value) {
		value.add( Statement.PREDICATE ,this);
	}


	/**
	 * @return all A's that have a relation 'Object' to this Resource instance
	 */
	public Statement[] getAllObject_Inverse() {
		return (Statement[]) getAll_Inverse(Statement.OBJECT, this.getResource(), Statement.class);
	}

	/**
	 * add 'Object'-Inverse
	 */
	public void addObject_Inverse(Statement value) {
		value.add( Statement.OBJECT ,this);
	}


	/**
	 * @return all A's that have a relation 'Subject' to this Resource instance
	 */
	public Statement[] getAllSubject_Inverse() {
		return (Statement[]) getAll_Inverse(Statement.SUBJECT, this.getResource(), Statement.class);
	}

	/**
	 * add 'Subject'-Inverse
	 */
	public void addSubject_Inverse(Statement value) {
		value.add( Statement.SUBJECT ,this);
	}


	/**
	 * @return all A's that have a relation 'First' to this Resource instance
	 */
	public List[] getAllFirst_Inverse() {
		return (List[]) getAll_Inverse(List.FIRST, this.getResource(), List.class);
	}

	/**
	 * add 'First'-Inverse
	 */
	public void addFirst_Inverse(List value) {
		value.add( List.FIRST ,this);
	}


	/**
	 * @return all A's that have a relation 'IsDefinedBy' to this Resource instance
	 */
	public Resource[] getAllIsDefinedBy_Inverse() {
		return (Resource[]) getAll_Inverse(Resource.ISDEFINEDBY, this.getResource(), Resource.class);
	}

	/**
	 * add 'IsDefinedBy'-Inverse
	 */
	public void addIsDefinedBy_Inverse(Resource value) {
		value.add( Resource.ISDEFINEDBY ,this);
	}


	/**
	 * @return all A's that have a relation 'Member' to this Resource instance
	 */
	public Resource[] getAllMember_Inverse() {
		return (Resource[]) getAll_Inverse(Resource.MEMBER, this.getResource(), Resource.class);
	}

	/**
	 * add 'Member'-Inverse
	 */
	public void addMember_Inverse(Resource value) {
		value.add( Resource.MEMBER ,this);
	}


	/**
	 * @return all A's that have a relation 'SeeAlso' to this Resource instance
	 */
	public Resource[] getAllSeeAlso_Inverse() {
		return (Resource[]) getAll_Inverse(Resource.SEEALSO, this.getResource(), Resource.class);
	}

	/**
	 * add 'SeeAlso'-Inverse
	 */
	public void addSeeAlso_Inverse(Resource value) {
		value.add( Resource.SEEALSO ,this);
	}


	/**
	 * @return all A's that have a relation 'Value' to this Resource instance
	 */
	public Resource[] getAllValue_Inverse() {
		return (Resource[]) getAll_Inverse(Resource.VALUE, this.getResource(), Resource.class);
	}

	/**
	 * add 'Value'-Inverse
	 */
	public void addValue_Inverse(Resource value) {
		value.add( Resource.VALUE ,this);
	}



    /**
     * Schema Comment: The subject is an instance of a class.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Class getType() {
		return (Class) get(TYPE, Class.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: The subject is an instance of a class.
	 */
	public void setType( Class value ) {
		set(TYPE, value);
	}

 	/**
	 * removes a value
     * Schema Comment: The subject is an instance of a class.
	 */
	public void removeType( Class value  ) {
		remove(TYPE, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: The subject is an instance of a class.
	 */
	public void addType( Class value  ) {
		add(TYPE, value );
	}
 
	public void addType( org.ontoware.rdfreactor.schema.rdfschema.Class value  ) {
		add(TYPE, value );
	}

	/**
	 * returns all values
     * Schema Comment: The subject is an instance of a class.
	 */
	public Class[] getAllType() {
		return (Class[]) getAll(TYPE, Class.class);
	}
 

    /**
     * Schema Comment: The defininition of the subject resource.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getIsDefinedBy() {
		return (Resource) get(ISDEFINEDBY, Resource.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: The defininition of the subject resource.
	 */
	public void setIsDefinedBy( Resource value ) {
		set(ISDEFINEDBY, value);
	}

	public void setIsDefinedBy( URL url ) {
		set(ISDEFINEDBY, url);
	}

	/**
	 * removes a value
     * Schema Comment: The defininition of the subject resource.
	 */
	public void removeIsDefinedBy( Resource value  ) {
		remove(ISDEFINEDBY, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: The defininition of the subject resource.
	 */
	public void addIsDefinedBy( Resource value  ) {
		add(ISDEFINEDBY, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: The defininition of the subject resource.
	 */
	public Resource[] getAllIsDefinedBy() {
		return (Resource[]) getAll(ISDEFINEDBY, Resource.class);
	}
 

    /**
     * Schema Comment: A member of the subject resource.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getMember() {
		return (Resource) get(MEMBER, Resource.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: A member of the subject resource.
	 */
	public void setMember( Resource value ) {
		set(MEMBER, value);
	}

 	/**
	 * removes a value
     * Schema Comment: A member of the subject resource.
	 */
	public void removeMember( Resource value  ) {
		remove(MEMBER, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: A member of the subject resource.
	 */
	public void addMember( Resource value  ) {
		add(MEMBER, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: A member of the subject resource.
	 */
	public Resource[] getAllMember() {
		return (Resource[]) getAll(MEMBER, Resource.class);
	}
 

    /**
     * Schema Comment: Further information about the subject resource.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getSeeAlso() {
		return (Resource) get(SEEALSO, Resource.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: Further information about the subject resource.
	 */
	public void setSeeAlso( Resource value ) {
		set(SEEALSO, value);
	}

 	/**
	 * removes a value
     * Schema Comment: Further information about the subject resource.
	 */
	public void removeSeeAlso( Resource value  ) {
		remove(SEEALSO, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: Further information about the subject resource.
	 */
	public void addSeeAlso( Resource value  ) {
		add(SEEALSO, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: Further information about the subject resource.
	 */
	public Resource[] getAllSeeAlso() {
		return (Resource[]) getAll(SEEALSO, Resource.class);
	}
 

    /**
     * Schema Comment: A human-readable name for the subject.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public String getLabel() {
		return (String) get(LABEL, String.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: A human-readable name for the subject.
	 */
	public void setLabel( String value ) {
		set(LABEL, value);
	}

 	/**
	 * removes a value
     * Schema Comment: A human-readable name for the subject.
	 */
	public void removeLabel( String value  ) {
		remove(LABEL, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: A human-readable name for the subject.
	 */
	public void addLabel( String value  ) {
		add(LABEL, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: A human-readable name for the subject.
	 */
	public String[] getAllLabel() {
		return (String[]) getAll(LABEL, String.class);
	}
 

    /**
     * Schema Comment: A description of the subject resource.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public String getComment() {
		return (String) get(COMMENT, String.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: A description of the subject resource.
	 */
	public void setComment( String value ) {
		set(COMMENT, value);
	}

 	/**
	 * removes a value
     * Schema Comment: A description of the subject resource.
	 */
	public void removeComment( String value  ) {
		remove(COMMENT, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: A description of the subject resource.
	 */
	public void addComment( String value  ) {
		add(COMMENT, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: A description of the subject resource.
	 */
	public String[] getAllComment() {
		return (String[]) getAll(COMMENT, String.class);
	}
 

    /**
     * Schema Comment: Idiomatic property used for structured values.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getValue() {
		return (Resource) get(VALUE, Resource.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: Idiomatic property used for structured values.
	 */
	public void setValue( Resource value ) {
		set(VALUE, value);
	}

 	/**
	 * removes a value
     * Schema Comment: Idiomatic property used for structured values.
	 */
	public void removeValue( Resource value  ) {
		remove(VALUE, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: Idiomatic property used for structured values.
	 */
	public void addValue( Resource value  ) {
		add(VALUE, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: Idiomatic property used for structured values.
	 */
	public Resource[] getAllValue() {
		return (Resource[]) getAll(VALUE, Resource.class);
	}
  }

  
  
