
/**
 * generated by http://RDFReactor.ontoware.org on 08.05.06 18:57
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.schema.rdfschema.Property;


/**
 * This class was generated by <a href="http://RDFReactor.ontoware.org">RDFReactor</a> on 08.05.06 18:57
 * This class manages access to these properties:
 * <ul>
 *   <li> MaxCardinality </li>
 *   <li> MinCardinality </li>
 *   <li> OnProperty </li>
 *   <li> AllValuesFrom </li>
 *   <li> HasValue </li>
 *   <li> SomeValuesFrom </li>
 *   <li> Cardinality </li>
 * </ul>
 */
public class Restriction extends Class {

    /** http://www.w3.org/2002/07/owl#Restriction */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2002/07/owl#Restriction",false);

    /** http://www.w3.org/2002/07/owl#maxCardinality */
	public static final URI MAXCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality",false);

    /** http://www.w3.org/2002/07/owl#minCardinality */
	public static final URI MINCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#minCardinality",false);

    /** http://www.w3.org/2002/07/owl#onProperty */
	public static final URI ONPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false);

    /** http://www.w3.org/2002/07/owl#allValuesFrom */
	public static final URI ALLVALUESFROM = new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom",false);

    /** http://www.w3.org/2002/07/owl#hasValue */
	public static final URI HASVALUE = new URIImpl("http://www.w3.org/2002/07/owl#hasValue",false);

    /** http://www.w3.org/2002/07/owl#someValuesFrom */
	public static final URI SOMEVALUESFROM = new URIImpl("http://www.w3.org/2002/07/owl#someValuesFrom",false);

    /** http://www.w3.org/2002/07/owl#cardinality */
	public static final URI CARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#cardinality",false);
	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier URI, BlankNode or URL that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Restriction ( Model model, URI classURI, Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Restriction ( Model model, Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Restriction ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Restriction ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Restriction ( Model model ) {
		this(model, RDFS_CLASS, true);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @return all instances of this class
	 */
	public Restriction[] getAllInstances() {
		return (Restriction[]) getAllInstances(super.model, Restriction.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Restriction[] getAllInstances(Model model) {
		return (Restriction[]) getAllInstances(model, Restriction.class);
	}


    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public int getMaxCardinality() {
		return (Integer) get(MAXCARDINALITY, Integer.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setMaxCardinality( int value ) {
		set(MAXCARDINALITY, value);
	}

 	/**
	 * removes a value
	 */
	public void removeMaxCardinality( int value  ) {
		remove(MAXCARDINALITY, value);
	}
  
	/**
	 * adds a value
	 */
	public void addMaxCardinality( int value  ) {
		add(MAXCARDINALITY, value );
	}
 
	/**
	 * returns all values
	 */
	public Integer[] getAllMaxCardinality() {
		return (Integer[]) getAll(MAXCARDINALITY, Integer.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public int getMinCardinality() {
		return (Integer) get(MINCARDINALITY, Integer.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setMinCardinality( int value ) {
		set(MINCARDINALITY, value);
	}

 	/**
	 * removes a value
	 */
	public void removeMinCardinality( int value  ) {
		remove(MINCARDINALITY, value);
	}
  
	/**
	 * adds a value
	 */
	public void addMinCardinality( int value  ) {
		add(MINCARDINALITY, value );
	}
 
	/**
	 * returns all values
	 */
	public Integer[] getAllMinCardinality() {
		return (Integer[]) getAll(MINCARDINALITY, Integer.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Property getOnProperty() {
		return (Property) get(ONPROPERTY, Property.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setOnProperty( Property value ) {
		set(ONPROPERTY, value);
	}

 	/**
	 * removes a value
	 */
	public void removeOnProperty( Property value  ) {
		remove(ONPROPERTY, value);
	}
  
	/**
	 * adds a value
	 */
	public void addOnProperty( Property value  ) {
		add(ONPROPERTY, value );
	}
 
	/**
	 * returns all values
	 */
	public Property[] getAllOnProperty() {
		return (Property[]) getAll(ONPROPERTY, Property.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Class getAllValuesFrom() {
		return (Class) get(ALLVALUESFROM, Class.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setAllValuesFrom( Class value ) {
		set(ALLVALUESFROM, value);
	}

 	/**
	 * removes a value
	 */
	public void removeAllValuesFrom( Class value  ) {
		remove(ALLVALUESFROM, value);
	}
  
	/**
	 * adds a value
	 */
	public void addAllValuesFrom( Class value  ) {
		add(ALLVALUESFROM, value );
	}
 
	/**
	 * returns all values
	 */
	public Class[] getAllAllValuesFrom() {
		return (Class[]) getAll(ALLVALUESFROM, Class.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public org.ontoware.rdfreactor.schema.rdfschema.Class getHasValue() {
		return (org.ontoware.rdfreactor.schema.rdfschema.Class) get(HASVALUE, org.ontoware.rdfreactor.schema.rdfschema.Class.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setHasValue( org.ontoware.rdfreactor.schema.rdfschema.Class value ) {
		set(HASVALUE, value);
	}

 	/**
	 * removes a value
	 */
	public void removeHasValue( org.ontoware.rdfreactor.schema.rdfschema.Class value  ) {
		remove(HASVALUE, value);
	}
  
	/**
	 * adds a value
	 */
	public void addHasValue( org.ontoware.rdfreactor.schema.rdfschema.Class value  ) {
		add(HASVALUE, value );
	}
 
	/**
	 * returns all values
	 */
	public org.ontoware.rdfreactor.schema.rdfschema.Class[] getAllHasValue() {
		return (org.ontoware.rdfreactor.schema.rdfschema.Class[]) getAll(HASVALUE, org.ontoware.rdfreactor.schema.rdfschema.Class.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Class getSomeValuesFrom() {
		return (Class) get(SOMEVALUESFROM, Class.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setSomeValuesFrom( Class value ) {
		set(SOMEVALUESFROM, value);
	}

 	/**
	 * removes a value
	 */
	public void removeSomeValuesFrom( Class value  ) {
		remove(SOMEVALUESFROM, value);
	}
  
	/**
	 * adds a value
	 */
	public void addSomeValuesFrom( Class value  ) {
		add(SOMEVALUESFROM, value );
	}
 
	/**
	 * returns all values
	 */
	public Class[] getAllSomeValuesFrom() {
		return (Class[]) getAll(SOMEVALUESFROM, Class.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public int getCardinality() {
		return (Integer) get(CARDINALITY, Integer.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setCardinality( int value ) {
		set(CARDINALITY, value);
	}

 	/**
	 * removes a value
	 */
	public void removeCardinality( int value  ) {
		remove(CARDINALITY, value);
	}
  
	/**
	 * adds a value
	 */
	public void addCardinality( int value  ) {
		add(CARDINALITY, value );
	}
 
	/**
	 * returns all values
	 */
	public Integer[] getAllCardinality() {
		return (Integer[]) getAll(CARDINALITY, Integer.class);
	}
  }

  
  
