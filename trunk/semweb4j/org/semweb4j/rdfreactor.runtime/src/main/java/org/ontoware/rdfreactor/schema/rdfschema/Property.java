
/**
 * generated by http://RDFReactor.ontoware.org on 08.05.06 17:17
 */
package org.ontoware.rdfreactor.schema.rdfschema;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.schema.owl.Restriction;


/**
 * This class was generated by <a href="http://RDFReactor.ontoware.org">RDFReactor</a> on 08.05.06 17:17
 * This class manages access to these properties:
 * <ul>
 *   <li> Range </li>
 *   <li> SubPropertyOf </li>
 *   <li> Domain </li>
 * </ul>
 * Schema Comment: The class of RDF properties.
 */
public class Property extends org.ontoware.rdfreactor.schema.rdfschema.Resource {

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#Property */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#Property",false);

    /** http://www.w3.org/2000/01/rdf-schema#range */
	public static final URI RANGE = new URIImpl("http://www.w3.org/2000/01/rdf-schema#range",false);

    /** http://www.w3.org/2000/01/rdf-schema#subPropertyOf */
	public static final URI SUBPROPERTYOF = new URIImpl("http://www.w3.org/2000/01/rdf-schema#subPropertyOf",false);

    /** http://www.w3.org/2000/01/rdf-schema#domain */
	public static final URI DOMAIN = new URIImpl("http://www.w3.org/2000/01/rdf-schema#domain",false);
	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier URI, BlankNode or URL that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Property ( Model model, URI classURI, Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Property ( Model model, Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Property ( Model model, URI uri ) {
		this(model, uri, true);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Property ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Property ( Model model ) {
		this(model, RDFS_CLASS, true);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @return all instances of this class
	 */
	public Property[] getAllInstances() {
		return (Property[]) getAllInstances(super.model, Property.class);
	}

	public static Property[] getAllInstances(Model model) {
		return (Property[]) getAllInstances(model, Property.class);
	}

	/**
	 * @return all A's that have a relation 'SubPropertyOf' to this Property instance
	 */
	public Property[] getAllSubPropertyOf_Inverse() {
		return (Property[]) getAll_Inverse(Property.SUBPROPERTYOF, this.getResource(), Property.class);
	}

	/**
	 * add 'SubPropertyOf'-Inverse
	 */
	public void addSubPropertyOf_Inverse(Property value) {
		value.add( Property.SUBPROPERTYOF ,this);
	}



    /**
     * Schema Comment: A range of the subject property.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Class getRange() {
		return (Class) get(RANGE, Class.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: A range of the subject property.
	 */
	public void setRange( Class value ) {
		set(RANGE, value);
	}

 	/**
	 * removes a value
     * Schema Comment: A range of the subject property.
	 */
	public void removeRange( Class value  ) {
		remove(RANGE, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: A range of the subject property.
	 */
	public void addRange( Class value  ) {
		add(RANGE, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: A range of the subject property.
	 */
	public Class[] getAllRange() {
		return (Class[]) getAll(RANGE, Class.class);
	}
 

    /**
     * Schema Comment: The subject is a subproperty of a property.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Property getSubPropertyOf() {
		return (Property) get(SUBPROPERTYOF, Property.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: The subject is a subproperty of a property.
	 */
	public void setSubPropertyOf( Property value ) {
		set(SUBPROPERTYOF, value);
	}

 	/**
	 * removes a value
     * Schema Comment: The subject is a subproperty of a property.
	 */
	public void removeSubPropertyOf( Property value  ) {
		remove(SUBPROPERTYOF, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: The subject is a subproperty of a property.
	 */
	public void addSubPropertyOf( Property value  ) {
		add(SUBPROPERTYOF, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: The subject is a subproperty of a property.
	 */
	public Property[] getAllSubPropertyOf() {
		return (Property[]) getAll(SUBPROPERTYOF, Property.class);
	}
 

    /**
     * Schema Comment: A domain of the subject property.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Class getDomain() {
		return (Class) get(DOMAIN, Class.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: A domain of the subject property.
	 */
	public void setDomain( Class value ) {
		set(DOMAIN, value);
	}

 	/**
	 * removes a value
     * Schema Comment: A domain of the subject property.
	 */
	public void removeDomain( Class value  ) {
		remove(DOMAIN, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: A domain of the subject property.
	 */
	public void addDomain( Class value  ) {
		add(DOMAIN, value );
	}
 
	/**
	 * returns all values
     * Schema Comment: A domain of the subject property.
	 */
	public Class[] getAllDomain() {
		return (Class[]) getAll(DOMAIN, Class.class);
	}
	
	// ///////////////////////
	// OWL

	/**
	 * add an OWL restriction
	 */
	public void addRestriction(Restriction value) {
		value.addOnProperty(this);
	}

	/**
	 * @return all OWL restrictions 
	 */
	public Restriction[] getAllRestriction() {
		return (Restriction[]) getAll_Inverse(Restriction.ONPROPERTY, this.getResource(), Restriction.class);
	}

  }

  
  
