
/**
 * generated by http://RDFReactor.semweb4j.org on 15.02.07 16:10
 */
package org.ontoware.tag;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 15.02.07 16:10
 * This class manages access to these properties:
 * <ul>
 *   <li> Tag </li>
 * </ul>
 * Schema Comment: This class acts as a catch-all for all properties, for which no domain has specified.
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfschema.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	public static final URI RDFS_CLASS = URIImpl.createURIWithoutChecking("http://www.w3.org/2000/01/rdf-schema#Class");

    /** http://semfs.ontoware.org/ontology/tagfs#hasTag */
	public static final URI TAG = URIImpl.createURIWithoutChecking("http://semfs.ontoware.org/ontology/tagfs#hasTag");

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      URIImpl.createURIWithoutChecking("http://semfs.ontoware.org/ontology/tagfs#hasTag") 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, String uriString, boolean write) {
		super(model, RDFS_CLASS, URIImpl.createURIWithoutChecking(uriString), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2GO model
	 * @param uri instance identifier
	 * @return an instance of Thing or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Thing getInstance(Model model, URI uri) throws Exception {
		return (Thing) getInstance(model, uri, Thing.class);
	}

	/**
	 * @return all instances of this class
	 */
	public Thing[] getAllInstances() {
		return (Thing[]) getAllInstances(super.model, Thing.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Thing[] getAllInstances(Model model) {
		return (Thing[]) getAllInstances(model, Thing.class);
	}


    /**
     * Schema Comment: links a resource to a tag string
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getTag() {
		return (java.lang.String) get(TAG, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
     * Schema Comment: links a resource to a tag string
	 */
	public void setTag( java.lang.String value ) {
		set(TAG, value);
	}

 	/**
	 * removes a value
     * Schema Comment: links a resource to a tag string
	 */
	public void removeTag( java.lang.String value  ) {
		remove(TAG, value);
	}
  
	/**
	 * adds a value
     * Schema Comment: links a resource to a tag string
	 */
	public void addTag( java.lang.String value  ) {
		add(TAG, value );
	}

	/**
	 * returns all values
     * Schema Comment: links a resource to a tag string
	 */
	public java.lang.String[] getAllTag() {
		return (java.lang.String[]) getAll(TAG, java.lang.String.class);
	}
   
}

  
  
