
/**
 * generated by http://RDFReactor.semweb4j.org on 13.02.07 18:21
 */
package test;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelException;

import org.ontoware.rdfreactor.runtime.CardinalityException;

import org.ontoware.rdfreactor.runtime.ReactorBaseNamed;

/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 13.02.07 18:21
 * This class manages access to these properties:
 * <ul>
 *   <li> Friend </li>
 * </ul>
 */
public class MyClass extends ReactorBaseNamed {

    /** schema://myclass */
	public static final URI RDFS_CLASS = URIImpl.createURIWithoutChecking("schema://myclass");

    /** schema://knows */
	public static final URI FRIEND = URIImpl.createURIWithoutChecking("schema://knows");

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      URIImpl.createURIWithoutChecking("schema://knows") 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected MyClass ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public MyClass ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public MyClass ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelException if URI syntax is wrong
	 */
	public MyClass ( Model model, String uriString ) throws ModelException {
		this(model, URIImpl.create(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public MyClass ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public MyClass ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2GO model
	 * @param uri instance identifier
	 * @return an instance of MyClass or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static MyClass getInstance(Model model, URI uri) throws Exception {
		return (MyClass) getInstance(model, uri, MyClass.class);
	}

	/**
	 * @return all instances of this class
	 */
	public MyClass[] getAllInstances() {
		return (MyClass[]) getAllInstances(super.model, MyClass.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static MyClass[] getAllInstances(Model model) {
		return (MyClass[]) getAllInstances(model, MyClass.class);
	}

	/**
	 * @return all A's that have a relation 'Friend' to this MyClass instance
	 */
	public MyClass[] getAllclass.vmFriend_Inverse() {
		return (MyClass[]) getAll_Inverse(MyClass.FRIEND, this.getResource(), MyClass.class);
	}

	/**
	 * add 'Friend'-Inverse
	 */
	public void addclass.vmFriend_Inverse(MyClass value) {
		value.add( MyClass.FRIEND ,this);
	}



 	/**
	 * removes a value
	 * @throws CardinalityException if removing would change the number of
	 * values below the minimal cardinality 0
	 */
	public void removeclass.vmFriend( MyClass value  )
	throws CardinalityException {
		remove(FRIEND, value, 0);
	}
 
	/**
	 * adds a value
	 * @throws CardinalityException if adding would change the number of
	 * values above the maximal cardinality 2147483647
	 */
	public void addclass.vmFriend( MyClass value  )
	throws CardinalityException {
		add(FRIEND, value, 2147483647 );
	}
    
}

  
  
