
/**
 * generated by http://RDFReactor.ontoware.org on 10.05.06 00:53
 */
package org.ontoware.rdfreactor.example;

import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.ontoware.org">RDFReactor</a> on 10.05.06 00:53
 * This class manages access to these properties:
 * <ul>
 *   <li> Name </li>
 *   <li> Age </li>
 *   <li> Knows </li>
 * </ul>
 */
public class Person extends Agent {

    /** http://purl.org/net/xamde/ns/test#Person */
	public static final URI RDFS_CLASS = URIImpl.createURIWithoutChecking("http://purl.org/net/xamde/ns/test#Person");

    /** http://purl.org/net/xamde/ns/test#hasName */
	public static final URI NAME = URIImpl.createURIWithoutChecking("http://purl.org/net/xamde/ns/test#hasName");

    /** http://purl.org/net/xamde/ns/test#hasAge */
	public static final URI AGE = URIImpl.createURIWithoutChecking("http://purl.org/net/xamde/ns/test#hasAge");

    /** http://purl.org/net/xamde/ns/test#knows */
	public static final URI KNOWS = URIImpl.createURIWithoutChecking("http://purl.org/net/xamde/ns/test#knows");
	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier URI, BlankNode or URL that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Person ( Model model, URI classURI, Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Person ( Model model, Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Person ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException 
	 */
	public Person ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, URIImpl.create(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Person ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Person ( Model model ) {
		this(model, RDFS_CLASS, true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @return all instances of this class
	 */
	public Person[] getAllInstances() {
		return (Person[]) getAllInstances(super.model, Person.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Person[] getAllInstances(Model model) {
		return (Person[]) getAllInstances(model, Person.class);
	}

	/**
	 * @return all A's that have a relation 'Knows' to this Person instance
	 */
	public Person[] getAllKnows_Inverse() {
		return (Person[]) getAll_Inverse(Person.KNOWS, this.getResource(), Person.class);
	}

	/**
	 * add 'Knows'-Inverse
	 */
	public void addKnows_Inverse(Person value) {
		value.add( Person.KNOWS ,this);
	}



    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getName() {
		return (java.lang.String) get(NAME, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setName( java.lang.String value ) {
		set(NAME, value);
	}

 	/**
	 * removes a value
	 */
	public void removeName( java.lang.String value  ) {
		remove(NAME, value);
	}
  
	/**
	 * adds a value
	 */
	public void addName( java.lang.String value  ) {
		add(NAME, value );
	}
 
	/**
	 * returns all values
	 */
	public java.lang.String[] getAllName() {
		return (java.lang.String[]) getAll(NAME, java.lang.String.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.Integer getAge() {
		return (java.lang.Integer) get(AGE, java.lang.Integer.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setAge( java.lang.Integer value ) {
		set(AGE, value);
	}

 	/**
	 * removes a value
	 */
	public void removeAge( java.lang.Integer value  ) {
		remove(AGE, value);
	}
  
	/**
	 * adds a value
	 */
	public void addAge( java.lang.Integer value  ) {
		add(AGE, value );
	}
 
	/**
	 * returns all values
	 */
	public java.lang.Integer[] getAllAge() {
		return (java.lang.Integer[]) getAll(AGE, java.lang.Integer.class);
	}
 

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Person getKnows() {
		return (Person) get(KNOWS, Person.class);
	}

	/**
	 * removes all values and sets this one
	 */
	public void setKnows( Person value ) {
		set(KNOWS, value);
	}

 	/**
	 * removes a value
	 */
	public void removeKnows( Person value  ) {
		remove(KNOWS, value);
	}
  
	/**
	 * adds a value
	 */
	public void addKnows( Person value  ) {
		add(KNOWS, value );
	}
 
	/**
	 * returns all values
	 */
	public Person[] getAllKnows() {
		return (Person[]) getAll(KNOWS, Person.class);
	}
  }

  
  
