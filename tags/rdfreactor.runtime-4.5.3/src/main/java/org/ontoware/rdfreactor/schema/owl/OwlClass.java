/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 26.01.08 12:47
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.schema.rdfs.List;
import org.ontoware.rdfreactor.schema.rdfs.Resource;





/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ComplementOf </li>
 *   <li> DisjointWith </li>
 *   <li> EquivalentClass </li>
 *   <li> IntersectionOf </li>
 *   <li> UnionOf </li>
 *   <li> OneOf </li>
 *   <li> SubClassOf </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 26.01.08 12:47
 */
public class OwlClass extends OwlThing {

    /** http://www.w3.org/2002/07/owl#Class */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2002/07/owl#Class", false);

    /** http://www.w3.org/2002/07/owl#complementOf */
	public static final URI COMPLEMENTOF = new URIImpl("http://www.w3.org/2002/07/owl#complementOf",false);

    /** http://www.w3.org/2002/07/owl#disjointWith */
	public static final URI DISJOINTWITH = new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false);

    /** http://www.w3.org/2002/07/owl#equivalentClass */
	public static final URI EQUIVALENTCLASS = new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false);

    /** http://www.w3.org/2002/07/owl#intersectionOf */
	public static final URI INTERSECTIONOF = new URIImpl("http://www.w3.org/2002/07/owl#intersectionOf",false);

    /** http://www.w3.org/2002/07/owl#unionOf */
	public static final URI UNIONOF = new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false);

    /** http://www.w3.org/2002/07/owl#oneOf */
	public static final URI ONEOF = new URIImpl("http://www.w3.org/2002/07/owl#oneOf",false);

    /** http://www.w3.org/2000/01/rdf-schema#subClassOf */
	public static final URI SUBCLASSOF = new URIImpl("http://www.w3.org/2000/01/rdf-schema#subClassOf",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#complementOf",false),
      new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false),
      new URIImpl("http://www.w3.org/2002/07/owl#intersectionOf",false),
      new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false), 
      new URIImpl("http://www.w3.org/2002/07/owl#oneOf",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#subClassOf",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected OwlClass ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public OwlClass ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public OwlClass ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public OwlClass ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public OwlClass ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2002/07/owl#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends OwlClass> getAllInstance_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, OwlClass.class );
	}

    /**
	 * Delete all rdf:type from this instance. Other triples are not affected.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ComplementOf' to this OwlClass instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComplementOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlClass.COMPLEMENTOF, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this OwlClass instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDisjointWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlClass.DISJOINTWITH, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this OwlClass instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlClass.EQUIVALENTCLASS, objectValue);
	}



     /**
     * Get all values of property ComplementOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, COMPLEMENTOF);
	}
	
    /**
     * Get all values of property ComplementOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, COMPLEMENTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ComplementOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), COMPLEMENTOF);
	}

    /**
     * Get all values of property ComplementOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), COMPLEMENTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ComplementOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlClass> getAllComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPLEMENTOF, OwlClass.class);
	}
	
    /**
     * Get all values of property ComplementOf as a ReactorResult of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlClass> getAllComplementOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPLEMENTOF, OwlClass.class);
	}

    /**
     * Get all values of property ComplementOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlClass> getAllComplementOf() {
		return Base.getAll(this.model, this.getResource(), COMPLEMENTOF, OwlClass.class);
	}

    /**
     * Get all values of property ComplementOf as a ReactorResult of OwlClass 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlClass> getAllComplementOf_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPLEMENTOF, OwlClass.class);
	}
 
    /**
     * Adds a value to property ComplementOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Adds a value to property ComplementOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComplementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPLEMENTOF, value);
	}
    /**
     * Adds a value to property ComplementOf from an instance of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.add(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Adds a value to property ComplementOf from an instance of OwlClass 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComplementOf(OwlClass value) {
		Base.add(this.model, this.getResource(), COMPLEMENTOF, value);
	}
  

    /**
     * Sets a value of property ComplementOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Sets a value of property ComplementOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComplementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPLEMENTOF, value);
	}
    /**
     * Sets a value of property ComplementOf from an instance of OwlClass 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.set(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Sets a value of property ComplementOf from an instance of OwlClass 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComplementOf(OwlClass value) {
		Base.set(this.model, this.getResource(), COMPLEMENTOF, value);
	}
  


    /**
     * Removes a value of property ComplementOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Removes a value of property ComplementOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComplementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPLEMENTOF, value);
	}
    /**
     * Removes a value of property ComplementOf given as an instance of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.remove(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Removes a value of property ComplementOf given as an instance of OwlClass 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComplementOf(OwlClass value) {
		Base.remove(this.model, this.getResource(), COMPLEMENTOF, value);
	}
  
    /**
     * Removes all values of property ComplementOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPLEMENTOF);
	}
	
    /**
     * Removes all values of property ComplementOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addComplementOf() {
		Base.removeAll(this.model, this.getResource(), COMPLEMENTOF);
	}
      /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlClass> getAllDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISJOINTWITH, OwlClass.class);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlClass> getAllDisjointWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, OwlClass.class);
	}

    /**
     * Get all values of property DisjointWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlClass> getAllDisjointWith() {
		return Base.getAll(this.model, this.getResource(), DISJOINTWITH, OwlClass.class);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of OwlClass 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlClass> getAllDisjointWith_as() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, OwlClass.class);
	}
 
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Adds a value to property DisjointWith from an instance of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith from an instance of OwlClass 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDisjointWith(OwlClass value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
  

    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Sets a value of property DisjointWith from an instance of OwlClass 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an instance of OwlClass 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDisjointWith(OwlClass value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
  


    /**
     * Removes a value of property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Removes a value of property DisjointWith given as an instance of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith given as an instance of OwlClass 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDisjointWith(OwlClass value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
  
    /**
     * Removes all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Removes all values of property DisjointWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addDisjointWith() {
		Base.removeAll(this.model, this.getResource(), DISJOINTWITH);
	}
      /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlClass> getAllEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTCLASS, OwlClass.class);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlClass> getAllEquivalentClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, OwlClass.class);
	}

    /**
     * Get all values of property EquivalentClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlClass> getAllEquivalentClass() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTCLASS, OwlClass.class);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of OwlClass 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlClass> getAllEquivalentClass_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, OwlClass.class);
	}
 
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Adds a value to property EquivalentClass from an instance of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass from an instance of OwlClass 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEquivalentClass(OwlClass value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  

    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Sets a value of property EquivalentClass from an instance of OwlClass 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an instance of OwlClass 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEquivalentClass(OwlClass value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  


    /**
     * Removes a value of property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Removes a value of property EquivalentClass given as an instance of OwlClass 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass given as an instance of OwlClass 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEquivalentClass(OwlClass value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  
    /**
     * Removes all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Removes all values of property EquivalentClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addEquivalentClass() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTCLASS);
	}
      /**
     * Get all values of property IntersectionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIntersectionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, INTERSECTIONOF);
	}
	
    /**
     * Get all values of property IntersectionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIntersectionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, INTERSECTIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IntersectionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIntersectionOf_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), INTERSECTIONOF);
	}

    /**
     * Get all values of property IntersectionOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIntersectionOf_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), INTERSECTIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IntersectionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<List> getAllIntersectionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERSECTIONOF, List.class);
	}
	
    /**
     * Get all values of property IntersectionOf as a ReactorResult of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<List> getAllIntersectionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERSECTIONOF, List.class);
	}

    /**
     * Get all values of property IntersectionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<List> getAllIntersectionOf() {
		return Base.getAll(this.model, this.getResource(), INTERSECTIONOF, List.class);
	}

    /**
     * Get all values of property IntersectionOf as a ReactorResult of List 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<List> getAllIntersectionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERSECTIONOF, List.class);
	}
 
    /**
     * Adds a value to property IntersectionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIntersectionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERSECTIONOF, value);
	}
	
    /**
     * Adds a value to property IntersectionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIntersectionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERSECTIONOF, value);
	}
    /**
     * Adds a value to property IntersectionOf from an instance of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIntersectionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.add(model, instanceResource, INTERSECTIONOF, value);
	}
	
    /**
     * Adds a value to property IntersectionOf from an instance of List 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIntersectionOf(List value) {
		Base.add(this.model, this.getResource(), INTERSECTIONOF, value);
	}
  

    /**
     * Sets a value of property IntersectionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIntersectionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERSECTIONOF, value);
	}
	
    /**
     * Sets a value of property IntersectionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIntersectionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERSECTIONOF, value);
	}
    /**
     * Sets a value of property IntersectionOf from an instance of List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIntersectionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.set(model, instanceResource, INTERSECTIONOF, value);
	}
	
    /**
     * Sets a value of property IntersectionOf from an instance of List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIntersectionOf(List value) {
		Base.set(this.model, this.getResource(), INTERSECTIONOF, value);
	}
  


    /**
     * Removes a value of property IntersectionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIntersectionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERSECTIONOF, value);
	}
	
    /**
     * Removes a value of property IntersectionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIntersectionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERSECTIONOF, value);
	}
    /**
     * Removes a value of property IntersectionOf given as an instance of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIntersectionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.remove(model, instanceResource, INTERSECTIONOF, value);
	}
	
    /**
     * Removes a value of property IntersectionOf given as an instance of List 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIntersectionOf(List value) {
		Base.remove(this.model, this.getResource(), INTERSECTIONOF, value);
	}
  
    /**
     * Removes all values of property IntersectionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIntersectionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERSECTIONOF);
	}
	
    /**
     * Removes all values of property IntersectionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addIntersectionOf() {
		Base.removeAll(this.model, this.getResource(), INTERSECTIONOF);
	}
      /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, UNIONOF);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<List> getAllUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNIONOF, List.class);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<List> getAllUnionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, List.class);
	}

    /**
     * Get all values of property UnionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<List> getAllUnionOf() {
		return Base.getAll(this.model, this.getResource(), UNIONOF, List.class);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of List 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<List> getAllUnionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, List.class);
	}
 
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Adds a value to property UnionOf from an instance of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf from an instance of List 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnionOf(List value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
  

    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Sets a value of property UnionOf from an instance of List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an instance of List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnionOf(List value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
  


    /**
     * Removes a value of property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Removes a value of property UnionOf given as an instance of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf given as an instance of List 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnionOf(List value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
  
    /**
     * Removes all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNIONOF);
	}
	
    /**
     * Removes all values of property UnionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addUnionOf() {
		Base.removeAll(this.model, this.getResource(), UNIONOF);
	}
 
	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Domain' to this Class instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDomain_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlProperty.DOMAIN, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Range' to this Class instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRange_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlProperty.RANGE, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Type' to this Class instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllType_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Resource.TYPE, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SubClassOf' to this Class instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubClassOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OwlClass.SUBCLASSOF, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AllValuesFrom' to this Class instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAllValuesFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Restriction.ALLVALUESFROM, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SomeValuesFrom' to this Class instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSomeValuesFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Restriction.SOMEVALUESFROM, objectValue);
	}



     /**
     * Get all values of property OneOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, ONEOF);
	}
	
    /**
     * Get all values of property OneOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, ONEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OneOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), ONEOF);
	}

    /**
     * Get all values of property OneOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), ONEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OneOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<List> getAllOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONEOF, List.class);
	}
	
    /**
     * Get all values of property OneOf as a ReactorResult of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<List> getAllOneOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONEOF, List.class);
	}

    /**
     * Get all values of property OneOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<List> getAllOneOf() {
		return Base.getAll(this.model, this.getResource(), ONEOF, List.class);
	}

    /**
     * Get all values of property OneOf as a ReactorResult of List 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<List> getAllOneOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ONEOF, List.class);
	}
 
    /**
     * Adds a value to property OneOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Adds a value to property OneOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOneOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONEOF, value);
	}
    /**
     * Adds a value to property OneOf from an instance of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.add(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Adds a value to property OneOf from an instance of List 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOneOf(List value) {
		Base.add(this.model, this.getResource(), ONEOF, value);
	}
  

    /**
     * Sets a value of property OneOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Sets a value of property OneOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOneOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONEOF, value);
	}
    /**
     * Sets a value of property OneOf from an instance of List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.set(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Sets a value of property OneOf from an instance of List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOneOf(List value) {
		Base.set(this.model, this.getResource(), ONEOF, value);
	}
  


    /**
     * Removes a value of property OneOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Removes a value of property OneOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOneOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONEOF, value);
	}
    /**
     * Removes a value of property OneOf given as an instance of List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, List value) {
		Base.remove(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Removes a value of property OneOf given as an instance of List 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOneOf(List value) {
		Base.remove(this.model, this.getResource(), ONEOF, value);
	}
  
    /**
     * Removes all values of property OneOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONEOF);
	}
	
    /**
     * Removes all values of property OneOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addOneOf() {
		Base.removeAll(this.model, this.getResource(), ONEOF);
	}
      /**
     * Get all values of property SubClassOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubClassOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(model, instanceResource, SUBCLASSOF);
	}
	
    /**
     * Get all values of property SubClassOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubClassOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(model, instanceResource, SUBCLASSOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubClassOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubClassOf_asNode() {
		return (ClosableIterator<org.ontoware.rdf2go.model.node.Node>) Base.getAll_asNode(this.model, this.getResource(), SUBCLASSOF);
	}

    /**
     * Get all values of property SubClassOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubClassOf_asNode_() {
		return (ReactorResult<org.ontoware.rdf2go.model.node.Node>) Base.getAll_as(this.model, this.getResource(), SUBCLASSOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubClassOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<OwlClass> getAllSubClassOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBCLASSOF, OwlClass.class);
	}
	
    /**
     * Get all values of property SubClassOf as a ReactorResult of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<OwlClass> getAllSubClassOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBCLASSOF, OwlClass.class);
	}

    /**
     * Get all values of property SubClassOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<OwlClass> getAllSubClassOf() {
		return Base.getAll(this.model, this.getResource(), SUBCLASSOF, OwlClass.class);
	}

    /**
     * Get all values of property SubClassOf as a ReactorResult of Class 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<OwlClass> getAllSubClassOf_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBCLASSOF, OwlClass.class);
	}
 
    /**
     * Adds a value to property SubClassOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubClassOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBCLASSOF, value);
	}
	
    /**
     * Adds a value to property SubClassOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubClassOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBCLASSOF, value);
	}
    /**
     * Adds a value to property SubClassOf from an instance of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubClassOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.add(model, instanceResource, SUBCLASSOF, value);
	}
	
    /**
     * Adds a value to property SubClassOf from an instance of Class 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubClassOf(OwlClass value) {
		Base.add(this.model, this.getResource(), SUBCLASSOF, value);
	}
  

    /**
     * Sets a value of property SubClassOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubClassOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBCLASSOF, value);
	}
	
    /**
     * Sets a value of property SubClassOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubClassOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBCLASSOF, value);
	}
    /**
     * Sets a value of property SubClassOf from an instance of Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubClassOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.set(model, instanceResource, SUBCLASSOF, value);
	}
	
    /**
     * Sets a value of property SubClassOf from an instance of Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubClassOf(OwlClass value) {
		Base.set(this.model, this.getResource(), SUBCLASSOF, value);
	}
  


    /**
     * Removes a value of property SubClassOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubClassOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBCLASSOF, value);
	}
	
    /**
     * Removes a value of property SubClassOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubClassOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBCLASSOF, value);
	}
    /**
     * Removes a value of property SubClassOf given as an instance of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubClassOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, OwlClass value) {
		Base.remove(model, instanceResource, SUBCLASSOF, value);
	}
	
    /**
     * Removes a value of property SubClassOf given as an instance of Class 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubClassOf(OwlClass value) {
		Base.remove(this.model, this.getResource(), SUBCLASSOF, value);
	}
  
    /**
     * Removes all values of property SubClassOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubClassOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBCLASSOF);
	}
	
    /**
     * Removes all values of property SubClassOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addSubClassOf() {
		Base.removeAll(this.model, this.getResource(), SUBCLASSOF);
	}

}