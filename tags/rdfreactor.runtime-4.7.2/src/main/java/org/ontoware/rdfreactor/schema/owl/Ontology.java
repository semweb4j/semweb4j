/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 26.01.08 12:47
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;





/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BackwardCompatibleWith </li>
 *   <li> Imports </li>
 *   <li> IncompatibleWith </li>
 *   <li> PriorVersion </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 26.01.08 12:47
 */
public class Ontology extends OwlThing {

    /** http://www.w3.org/2002/07/owl#Ontology */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2002/07/owl#Ontology", false);

    /** http://www.w3.org/2002/07/owl#backwardCompatibleWith */
	public static final URI BACKWARDCOMPATIBLEWITH = new URIImpl("http://www.w3.org/2002/07/owl#backwardCompatibleWith",false);

    /** http://www.w3.org/2002/07/owl#imports */
	public static final URI IMPORTS = new URIImpl("http://www.w3.org/2002/07/owl#imports",false);

    /** http://www.w3.org/2002/07/owl#incompatibleWith */
	public static final URI INCOMPATIBLEWITH = new URIImpl("http://www.w3.org/2002/07/owl#incompatibleWith",false);

    /** http://www.w3.org/2002/07/owl#priorVersion */
	public static final URI PRIORVERSION = new URIImpl("http://www.w3.org/2002/07/owl#priorVersion",false);

    /** all property-URIs with this class as domain */
    @SuppressWarnings("hiding")
	public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#backwardCompatibleWith",false),
      new URIImpl("http://www.w3.org/2002/07/owl#imports",false),
      new URIImpl("http://www.w3.org/2002/07/owl#incompatibleWith",false),
      new URIImpl("http://www.w3.org/2002/07/owl#priorVersion",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Ontology ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Ontology ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Ontology ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Ontology ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Ontology ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2002/07/owl#Ontology).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Ontology> getAllInstance_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Ontology.class );
	}

    /**
	 * Delete all rdf:type from this instance. Other triples are not affected.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'BackwardCompatibleWith' to this Ontology instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBackwardCompatibleWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Ontology.BACKWARDCOMPATIBLEWITH, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Ontology instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Ontology.IMPORTS, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IncompatibleWith' to this Ontology instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIncompatibleWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Ontology.INCOMPATIBLEWITH, objectValue);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PriorVersion' to this Ontology instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPriorVersion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Ontology.PRIORVERSION, objectValue);
	}



     /**
     * Get all values of property BackwardCompatibleWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBackwardCompatibleWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BACKWARDCOMPATIBLEWITH);
	}
	
    /**
     * Get all values of property BackwardCompatibleWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBackwardCompatibleWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BACKWARDCOMPATIBLEWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BackwardCompatibleWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBackwardCompatibleWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH);
	}

    /**
     * Get all values of property BackwardCompatibleWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBackwardCompatibleWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BackwardCompatibleWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Ontology> getAllBackwardCompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BACKWARDCOMPATIBLEWITH, Ontology.class);
	}
	
    /**
     * Get all values of property BackwardCompatibleWith as a ReactorResult of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Ontology> getAllBackwardCompatibleWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BACKWARDCOMPATIBLEWITH, Ontology.class);
	}

    /**
     * Get all values of property BackwardCompatibleWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Ontology> getAllBackwardCompatibleWith() {
		return Base.getAll(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, Ontology.class);
	}

    /**
     * Get all values of property BackwardCompatibleWith as a ReactorResult of Ontology 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Ontology> getAllBackwardCompatibleWith_as() {
		return Base.getAll_as(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, Ontology.class);
	}
 
    /**
     * Adds a value to property BackwardCompatibleWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBackwardCompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BACKWARDCOMPATIBLEWITH, value);
	}
	
    /**
     * Adds a value to property BackwardCompatibleWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBackwardCompatibleWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, value);
	}
    /**
     * Adds a value to property BackwardCompatibleWith from an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBackwardCompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.add(model, instanceResource, BACKWARDCOMPATIBLEWITH, value);
	}
	
    /**
     * Adds a value to property BackwardCompatibleWith from an instance of Ontology 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBackwardCompatibleWith(Ontology value) {
		Base.add(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, value);
	}
  

    /**
     * Sets a value of property BackwardCompatibleWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBackwardCompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BACKWARDCOMPATIBLEWITH, value);
	}
	
    /**
     * Sets a value of property BackwardCompatibleWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBackwardCompatibleWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, value);
	}
    /**
     * Sets a value of property BackwardCompatibleWith from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBackwardCompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.set(model, instanceResource, BACKWARDCOMPATIBLEWITH, value);
	}
	
    /**
     * Sets a value of property BackwardCompatibleWith from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBackwardCompatibleWith(Ontology value) {
		Base.set(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, value);
	}
  


    /**
     * Removes a value of property BackwardCompatibleWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBackwardCompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BACKWARDCOMPATIBLEWITH, value);
	}
	
    /**
     * Removes a value of property BackwardCompatibleWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBackwardCompatibleWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, value);
	}
    /**
     * Removes a value of property BackwardCompatibleWith given as an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBackwardCompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.remove(model, instanceResource, BACKWARDCOMPATIBLEWITH, value);
	}
	
    /**
     * Removes a value of property BackwardCompatibleWith given as an instance of Ontology 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBackwardCompatibleWith(Ontology value) {
		Base.remove(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH, value);
	}
  
    /**
     * Removes all values of property BackwardCompatibleWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBackwardCompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BACKWARDCOMPATIBLEWITH);
	}
	
    /**
     * Removes all values of property BackwardCompatibleWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addBackwardCompatibleWith() {
		Base.removeAll(this.model, this.getResource(), BACKWARDCOMPATIBLEWITH);
	}
      /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMPORTS);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Ontology> getAllImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMPORTS, Ontology.class);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Ontology> getAllImports_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, Ontology.class);
	}

    /**
     * Get all values of property Imports     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Ontology> getAllImports() {
		return Base.getAll(this.model, this.getResource(), IMPORTS, Ontology.class);
	}

    /**
     * Get all values of property Imports as a ReactorResult of Ontology 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Ontology> getAllImports_as() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, Ontology.class);
	}
 
    /**
     * Adds a value to property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Adds a value to property Imports from an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports from an instance of Ontology 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImports(Ontology value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
  

    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Sets a value of property Imports from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImports(Ontology value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
  


    /**
     * Removes a value of property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Removes a value of property Imports given as an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports given as an instance of Ontology 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImports(Ontology value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
  
    /**
     * Removes all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMPORTS);
	}
	
    /**
     * Removes all values of property Imports	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addImports() {
		Base.removeAll(this.model, this.getResource(), IMPORTS);
	}
      /**
     * Get all values of property IncompatibleWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIncompatibleWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INCOMPATIBLEWITH);
	}
	
    /**
     * Get all values of property IncompatibleWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIncompatibleWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCOMPATIBLEWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IncompatibleWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIncompatibleWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INCOMPATIBLEWITH);
	}

    /**
     * Get all values of property IncompatibleWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIncompatibleWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INCOMPATIBLEWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IncompatibleWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Ontology> getAllIncompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INCOMPATIBLEWITH, Ontology.class);
	}
	
    /**
     * Get all values of property IncompatibleWith as a ReactorResult of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Ontology> getAllIncompatibleWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCOMPATIBLEWITH, Ontology.class);
	}

    /**
     * Get all values of property IncompatibleWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Ontology> getAllIncompatibleWith() {
		return Base.getAll(this.model, this.getResource(), INCOMPATIBLEWITH, Ontology.class);
	}

    /**
     * Get all values of property IncompatibleWith as a ReactorResult of Ontology 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Ontology> getAllIncompatibleWith_as() {
		return Base.getAll_as(this.model, this.getResource(), INCOMPATIBLEWITH, Ontology.class);
	}
 
    /**
     * Adds a value to property IncompatibleWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIncompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INCOMPATIBLEWITH, value);
	}
	
    /**
     * Adds a value to property IncompatibleWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIncompatibleWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INCOMPATIBLEWITH, value);
	}
    /**
     * Adds a value to property IncompatibleWith from an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIncompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.add(model, instanceResource, INCOMPATIBLEWITH, value);
	}
	
    /**
     * Adds a value to property IncompatibleWith from an instance of Ontology 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIncompatibleWith(Ontology value) {
		Base.add(this.model, this.getResource(), INCOMPATIBLEWITH, value);
	}
  

    /**
     * Sets a value of property IncompatibleWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIncompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INCOMPATIBLEWITH, value);
	}
	
    /**
     * Sets a value of property IncompatibleWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIncompatibleWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INCOMPATIBLEWITH, value);
	}
    /**
     * Sets a value of property IncompatibleWith from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIncompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.set(model, instanceResource, INCOMPATIBLEWITH, value);
	}
	
    /**
     * Sets a value of property IncompatibleWith from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIncompatibleWith(Ontology value) {
		Base.set(this.model, this.getResource(), INCOMPATIBLEWITH, value);
	}
  


    /**
     * Removes a value of property IncompatibleWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIncompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INCOMPATIBLEWITH, value);
	}
	
    /**
     * Removes a value of property IncompatibleWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIncompatibleWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INCOMPATIBLEWITH, value);
	}
    /**
     * Removes a value of property IncompatibleWith given as an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIncompatibleWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.remove(model, instanceResource, INCOMPATIBLEWITH, value);
	}
	
    /**
     * Removes a value of property IncompatibleWith given as an instance of Ontology 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIncompatibleWith(Ontology value) {
		Base.remove(this.model, this.getResource(), INCOMPATIBLEWITH, value);
	}
  
    /**
     * Removes all values of property IncompatibleWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIncompatibleWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INCOMPATIBLEWITH);
	}
	
    /**
     * Removes all values of property IncompatibleWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addIncompatibleWith() {
		Base.removeAll(this.model, this.getResource(), INCOMPATIBLEWITH);
	}
      /**
     * Get all values of property PriorVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPriorVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIORVERSION);
	}
	
    /**
     * Get all values of property PriorVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPriorVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIORVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PriorVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPriorVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIORVERSION);
	}

    /**
     * Get all values of property PriorVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPriorVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIORVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PriorVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Ontology> getAllPriorVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIORVERSION, Ontology.class);
	}
	
    /**
     * Get all values of property PriorVersion as a ReactorResult of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Ontology> getAllPriorVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIORVERSION, Ontology.class);
	}

    /**
     * Get all values of property PriorVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Ontology> getAllPriorVersion() {
		return Base.getAll(this.model, this.getResource(), PRIORVERSION, Ontology.class);
	}

    /**
     * Get all values of property PriorVersion as a ReactorResult of Ontology 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Ontology> getAllPriorVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIORVERSION, Ontology.class);
	}
 
    /**
     * Adds a value to property PriorVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPriorVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIORVERSION, value);
	}
	
    /**
     * Adds a value to property PriorVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPriorVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIORVERSION, value);
	}
    /**
     * Adds a value to property PriorVersion from an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPriorVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.add(model, instanceResource, PRIORVERSION, value);
	}
	
    /**
     * Adds a value to property PriorVersion from an instance of Ontology 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPriorVersion(Ontology value) {
		Base.add(this.model, this.getResource(), PRIORVERSION, value);
	}
  

    /**
     * Sets a value of property PriorVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPriorVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIORVERSION, value);
	}
	
    /**
     * Sets a value of property PriorVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPriorVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIORVERSION, value);
	}
    /**
     * Sets a value of property PriorVersion from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPriorVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.set(model, instanceResource, PRIORVERSION, value);
	}
	
    /**
     * Sets a value of property PriorVersion from an instance of Ontology 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPriorVersion(Ontology value) {
		Base.set(this.model, this.getResource(), PRIORVERSION, value);
	}
  


    /**
     * Removes a value of property PriorVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePriorVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIORVERSION, value);
	}
	
    /**
     * Removes a value of property PriorVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePriorVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIORVERSION, value);
	}
    /**
     * Removes a value of property PriorVersion given as an instance of Ontology 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePriorVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Ontology value) {
		Base.remove(model, instanceResource, PRIORVERSION, value);
	}
	
    /**
     * Removes a value of property PriorVersion given as an instance of Ontology 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePriorVersion(Ontology value) {
		Base.remove(this.model, this.getResource(), PRIORVERSION, value);
	}
  
    /**
     * Removes all values of property PriorVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPriorVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIORVERSION);
	}
	
    /**
     * Removes all values of property PriorVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void addPriorVersion() {
		Base.removeAll(this.model, this.getResource(), PRIORVERSION);
	}
 }