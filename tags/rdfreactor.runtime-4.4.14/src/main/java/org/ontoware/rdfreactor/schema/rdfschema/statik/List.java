/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 11.11.07 18:35
 */
package org.ontoware.rdfreactor.schema.rdfschema.statik;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * 
 *  
 * This class manages access to these properties:
 * <ul>
 *   <li> First </li>
 *   <li> Rest </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 11.11.07 18:35
 */
public class List extends Resource {

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#List */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#List", false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#first */
	public static final URI FIRST = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#first",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#rest */
	public static final URI REST = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#first",false),
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest",false) 
    };

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of classResource in the model
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}


	/**
	 * @return all A's that have a relation 'Rest' to this List instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRest_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, List.REST, objectValue);
	}



    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getFirst(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return (Resource) Base.get(model, resource, FIRST, Resource.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setFirst( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value ) {
		Base.set(model, resource, FIRST, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeFirst(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll(model, resource, FIRST);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeFirst( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value  ) {
		Base.remove(model, resource, FIRST, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllFirst(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll( model, resource, FIRST);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, FIRST, value)
	 */
	public boolean hasFirst( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value) {
		return Base.hasValue(model, resource, FIRST, value);
	}

	/**
	 * @return true if the model contains a statement (this, FIRST, *)
	 */
	public boolean hasFirst(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.hasValue(model, resource, FIRST);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addFirst( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value  ) {
		Base.add(model, resource,FIRST, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public ClosableIterator<Resource> getAllFirst(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.getAll(model, resource,FIRST, Resource.class);
	}
  

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public List getRest(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return (List) Base.get(model, resource, REST, List.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setRest( Model model, org.ontoware.rdf2go.model.node.Resource resource, List value ) {
		Base.set(model, resource, REST, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeRest(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll(model, resource, REST);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeRest( Model model, org.ontoware.rdf2go.model.node.Resource resource, List value  ) {
		Base.remove(model, resource, REST, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllRest(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll( model, resource, REST);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, REST, value)
	 */
	public boolean hasRest( Model model, org.ontoware.rdf2go.model.node.Resource resource, List value) {
		return Base.hasValue(model, resource, REST, value);
	}

	/**
	 * @return true if the model contains a statement (this, REST, *)
	 */
	public boolean hasRest(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.hasValue(model, resource, REST);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addRest( Model model, org.ontoware.rdf2go.model.node.Resource resource, List value  ) {
		Base.add(model, resource,REST, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public ClosableIterator<List> getAllRest(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.getAll(model, resource,REST, List.class);
	}
   
}

  
  
