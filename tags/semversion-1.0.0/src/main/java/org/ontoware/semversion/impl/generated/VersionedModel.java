/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 16.10.07 16:48
 */
package org.ontoware.semversion.impl.generated;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * A tree of Versions
 *  
 * This class manages access to these properties:
 * <ul>
 *   <li> Root </li>
 *   <li> Version </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 16.10.07 16:48
 */
public class VersionedModel extends VersionedItem {

    /** http://purl.org/net/semversion#VersionedModel */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/net/semversion#VersionedModel", false);

    /** http://purl.org/net/semversion#hasRoot */
	public static final URI ROOT = new URIImpl("http://purl.org/net/semversion#hasRoot",false);

    /** http://purl.org/net/semversion#hasVersion */
	public static final URI VERSION = new URIImpl("http://purl.org/net/semversion#hasVersion",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/net/semversion#hasRoot",false),
      new URIImpl("http://purl.org/net/semversion#hasVersion",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected VersionedModel ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public VersionedModel ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public VersionedModel ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public VersionedModel ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public VersionedModel ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public VersionedModel ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of VersionedModel or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static VersionedModel getInstance(Model model, URI uri) throws Exception {
		return (VersionedModel) getInstance(model, uri, VersionedModel.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public VersionedModel[] getAllInstances() {
		return (VersionedModel[]) getAllInstances(super.model, VersionedModel.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static VersionedModel[] getAllInstances(Model model) {
		return (VersionedModel[]) getAllInstances(model, VersionedModel.class);
	}

	/**
	 * @return all A's that have a relation 'VersionedModel' to this VersionedModel instance
	 */
	public Thing[] getAllVersionedModel_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.VERSIONEDMODEL, this.getResource(), Thing.class);
	}

	/**
	 * add 'VersionedModel'-Inverse
	 * @param value
	 */
	public void addVersionedModel_Inverse(Thing value) {
		value.add( Thing.VERSIONEDMODEL ,this);
	}


	/**
	 * @return all A's that have a relation 'Container' to this VersionedModel instance
	 */
	public Version[] getAllContainer_Inverse() {
		return (Version[]) getAll_Inverse(Version.CONTAINER, this.getResource(), Version.class);
	}

	/**
	 * add 'Container'-Inverse
	 * @param value
	 */
	public void addContainer_Inverse(Version value) {
		value.add( Version.CONTAINER ,this);
	}



    /**
     * Schema Comment: has only one root
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Version getRoot() {
		return (Version) get(ROOT, Version.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: has only one root
	 */
	public void setRoot( Version value ) {
		set(ROOT, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: has only one root
	 */
	public void removeRoot() {
		removeAll(ROOT);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: has only one root
	 */
	public void removeRoot( Version value  ) {
		remove(ROOT, value);
	}

	/**
	 * removes all values
     * Schema Comment: has only one root
	 */
	public void removeAllRoot() {
		removeAll(ROOT);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, ROOT, value)
	 */
	public boolean hasRoot( Version value) {
		return hasValue(ROOT, value);
	}

	/**
	 * @return true if the model contains a statement (this, ROOT, *)
	 */
	public boolean hasRoot() {
		return hasValue(ROOT);
	}

   

    /**
     * Schema Comment: exhaustive list of all versions
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Version getVersion() {
		return (Version) get(VERSION, Version.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: exhaustive list of all versions
	 */
	public void setVersion( Version value ) {
		set(VERSION, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: exhaustive list of all versions
	 */
	public void removeVersion() {
		removeAll(VERSION);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: exhaustive list of all versions
	 */
	public void removeVersion( Version value  ) {
		remove(VERSION, value);
	}

	/**
	 * removes all values
     * Schema Comment: exhaustive list of all versions
	 */
	public void removeAllVersion() {
		removeAll(VERSION);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, VERSION, value)
	 */
	public boolean hasVersion( Version value) {
		return hasValue(VERSION, value);
	}

	/**
	 * @return true if the model contains a statement (this, VERSION, *)
	 */
	public boolean hasVersion() {
		return hasValue(VERSION);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: exhaustive list of all versions
	 */
	public void addVersion( Version value  ) {
		add(VERSION, value );
	}

	/**
	 * @return all values
     * Schema Comment: exhaustive list of all versions
	 */
	public Version[] getAllVersion() {
		return (Version[]) getAll(VERSION, Version.class);
	}
   
}

  
  
