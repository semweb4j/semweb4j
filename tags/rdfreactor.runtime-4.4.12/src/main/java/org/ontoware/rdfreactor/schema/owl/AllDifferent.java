
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 17:50
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.schema.rdfschema.List;
import org.ontoware.rdfreactor.schema.rdfschema.Resource;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 17:50
 * This class manages access to these properties:
 * <ul>
 *   <li> DistinctMembers </li>
 * </ul>
 */
public class AllDifferent extends Resource {

    /** http://www.w3.org/2002/07/owl#AllDifferent */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2002/07/owl#AllDifferent", false);

    /** http://www.w3.org/2002/07/owl#distinctMembers */
	public static final URI DISTINCTMEMBERS = new URIImpl("http://www.w3.org/2002/07/owl#distinctMembers",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#distinctMembers",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected AllDifferent ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public AllDifferent ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public AllDifferent ( Model model, String uriString, boolean write) {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public AllDifferent ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public AllDifferent ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of AllDifferent or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static AllDifferent getInstance(Model model, URI uri) throws Exception {
		return (AllDifferent) getInstance(model, uri, AllDifferent.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public AllDifferent[] getAllInstances() {
		return (AllDifferent[]) getAllInstances(super.model, AllDifferent.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static AllDifferent[] getAllInstances(Model model) {
		return (AllDifferent[]) getAllInstances(model, AllDifferent.class);
	}


    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public List getDistinctMembers() {
		return (List) get(DISTINCTMEMBERS, List.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setDistinctMembers( List value ) {
		set(DISTINCTMEMBERS, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removeDistinctMembers( List value  ) {
		remove(DISTINCTMEMBERS, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, DISTINCTMEMBERS, value)
	 */
	public boolean hasDistinctMembers( List value) {
		return hasValue(DISTINCTMEMBERS, value);
	}

	/**
	 * @return true if the model contains a statement (this, DISTINCTMEMBERS, *)
	 */
	public boolean hasDistinctMembers() {
		return hasValue(DISTINCTMEMBERS);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addDistinctMembers( List value  ) {
		add(DISTINCTMEMBERS, value );
	}

	/**
	 * @return all values
	 */
	public List[] getAllDistinctMembers() {
		return (List[]) getAll(DISTINCTMEMBERS, List.class);
	}
   
}

  
  
