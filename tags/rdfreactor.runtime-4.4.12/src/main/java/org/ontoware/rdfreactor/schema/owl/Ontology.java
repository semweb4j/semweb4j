
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 17:50
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.schema.rdfschema.Resource;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 17:50
 * This class manages access to these properties:
 * <ul>
 *   <li> Imports </li>
 *   <li> PriorVersion </li>
 *   <li> IncompatibleWith </li>
 *   <li> BackwardCompatibleWith </li>
 * </ul>
 */
public class Ontology extends Resource {

    /** http://www.w3.org/2002/07/owl#Ontology */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2002/07/owl#Ontology", false);

    /** http://www.w3.org/2002/07/owl#imports */
	public static final URI IMPORTS = new URIImpl("http://www.w3.org/2002/07/owl#imports",false);

    /** http://www.w3.org/2002/07/owl#priorVersion */
	public static final URI PRIORVERSION = new URIImpl("http://www.w3.org/2002/07/owl#priorVersion",false);

    /** http://www.w3.org/2002/07/owl#incompatibleWith */
	public static final URI INCOMPATIBLEWITH = new URIImpl("http://www.w3.org/2002/07/owl#incompatibleWith",false);

    /** http://www.w3.org/2002/07/owl#backwardCompatibleWith */
	public static final URI BACKWARDCOMPATIBLEWITH = new URIImpl("http://www.w3.org/2002/07/owl#backwardCompatibleWith",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#imports",false),
      new URIImpl("http://www.w3.org/2002/07/owl#priorVersion",false),
      new URIImpl("http://www.w3.org/2002/07/owl#incompatibleWith",false),
      new URIImpl("http://www.w3.org/2002/07/owl#backwardCompatibleWith",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Ontology ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Ontology ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Ontology ( Model model, String uriString, boolean write) {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Ontology ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Ontology ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Ontology or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Ontology getInstance(Model model, URI uri) throws Exception {
		return (Ontology) getInstance(model, uri, Ontology.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Ontology[] getAllInstances() {
		return (Ontology[]) getAllInstances(super.model, Ontology.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Ontology[] getAllInstances(Model model) {
		return (Ontology[]) getAllInstances(model, Ontology.class);
	}

	/**
	 * @return all A's that have a relation 'Imports' to this Ontology instance
	 */
	public Ontology[] getAllImports_Inverse() {
		return (Ontology[]) getAll_Inverse(Ontology.IMPORTS, this.getResource(), Ontology.class);
	}

	/**
	 * add 'Imports'-Inverse
	 * @param value
	 */
	public void addImports_Inverse(Ontology value) {
		value.add( Ontology.IMPORTS ,this);
	}


	/**
	 * @return all A's that have a relation 'PriorVersion' to this Ontology instance
	 */
	public Ontology[] getAllPriorVersion_Inverse() {
		return (Ontology[]) getAll_Inverse(Ontology.PRIORVERSION, this.getResource(), Ontology.class);
	}

	/**
	 * add 'PriorVersion'-Inverse
	 * @param value
	 */
	public void addPriorVersion_Inverse(Ontology value) {
		value.add( Ontology.PRIORVERSION ,this);
	}


	/**
	 * @return all A's that have a relation 'IncompatibleWith' to this Ontology instance
	 */
	public Ontology[] getAllIncompatibleWith_Inverse() {
		return (Ontology[]) getAll_Inverse(Ontology.INCOMPATIBLEWITH, this.getResource(), Ontology.class);
	}

	/**
	 * add 'IncompatibleWith'-Inverse
	 * @param value
	 */
	public void addIncompatibleWith_Inverse(Ontology value) {
		value.add( Ontology.INCOMPATIBLEWITH ,this);
	}


	/**
	 * @return all A's that have a relation 'BackwardCompatibleWith' to this Ontology instance
	 */
	public Ontology[] getAllBackwardCompatibleWith_Inverse() {
		return (Ontology[]) getAll_Inverse(Ontology.BACKWARDCOMPATIBLEWITH, this.getResource(), Ontology.class);
	}

	/**
	 * add 'BackwardCompatibleWith'-Inverse
	 * @param value
	 */
	public void addBackwardCompatibleWith_Inverse(Ontology value) {
		value.add( Ontology.BACKWARDCOMPATIBLEWITH ,this);
	}



    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Ontology getImports() {
		return (Ontology) get(IMPORTS, Ontology.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setImports( Ontology value ) {
		set(IMPORTS, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removeImports( Ontology value  ) {
		remove(IMPORTS, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, IMPORTS, value)
	 */
	public boolean hasImports( Ontology value) {
		return hasValue(IMPORTS, value);
	}

	/**
	 * @return true if the model contains a statement (this, IMPORTS, *)
	 */
	public boolean hasImports() {
		return hasValue(IMPORTS);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addImports( Ontology value  ) {
		add(IMPORTS, value );
	}

	/**
	 * @return all values
	 */
	public Ontology[] getAllImports() {
		return (Ontology[]) getAll(IMPORTS, Ontology.class);
	}
  

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Ontology getPriorVersion() {
		return (Ontology) get(PRIORVERSION, Ontology.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setPriorVersion( Ontology value ) {
		set(PRIORVERSION, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removePriorVersion( Ontology value  ) {
		remove(PRIORVERSION, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, PRIORVERSION, value)
	 */
	public boolean hasPriorVersion( Ontology value) {
		return hasValue(PRIORVERSION, value);
	}

	/**
	 * @return true if the model contains a statement (this, PRIORVERSION, *)
	 */
	public boolean hasPriorVersion() {
		return hasValue(PRIORVERSION);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addPriorVersion( Ontology value  ) {
		add(PRIORVERSION, value );
	}

	/**
	 * @return all values
	 */
	public Ontology[] getAllPriorVersion() {
		return (Ontology[]) getAll(PRIORVERSION, Ontology.class);
	}
  

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Ontology getIncompatibleWith() {
		return (Ontology) get(INCOMPATIBLEWITH, Ontology.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setIncompatibleWith( Ontology value ) {
		set(INCOMPATIBLEWITH, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removeIncompatibleWith( Ontology value  ) {
		remove(INCOMPATIBLEWITH, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, INCOMPATIBLEWITH, value)
	 */
	public boolean hasIncompatibleWith( Ontology value) {
		return hasValue(INCOMPATIBLEWITH, value);
	}

	/**
	 * @return true if the model contains a statement (this, INCOMPATIBLEWITH, *)
	 */
	public boolean hasIncompatibleWith() {
		return hasValue(INCOMPATIBLEWITH);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addIncompatibleWith( Ontology value  ) {
		add(INCOMPATIBLEWITH, value );
	}

	/**
	 * @return all values
	 */
	public Ontology[] getAllIncompatibleWith() {
		return (Ontology[]) getAll(INCOMPATIBLEWITH, Ontology.class);
	}
  

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Ontology getBackwardCompatibleWith() {
		return (Ontology) get(BACKWARDCOMPATIBLEWITH, Ontology.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setBackwardCompatibleWith( Ontology value ) {
		set(BACKWARDCOMPATIBLEWITH, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removeBackwardCompatibleWith( Ontology value  ) {
		remove(BACKWARDCOMPATIBLEWITH, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, BACKWARDCOMPATIBLEWITH, value)
	 */
	public boolean hasBackwardCompatibleWith( Ontology value) {
		return hasValue(BACKWARDCOMPATIBLEWITH, value);
	}

	/**
	 * @return true if the model contains a statement (this, BACKWARDCOMPATIBLEWITH, *)
	 */
	public boolean hasBackwardCompatibleWith() {
		return hasValue(BACKWARDCOMPATIBLEWITH);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addBackwardCompatibleWith( Ontology value  ) {
		add(BACKWARDCOMPATIBLEWITH, value );
	}

	/**
	 * @return all values
	 */
	public Ontology[] getAllBackwardCompatibleWith() {
		return (Ontology[]) getAll(BACKWARDCOMPATIBLEWITH, Ontology.class);
	}
   
}

  
  
