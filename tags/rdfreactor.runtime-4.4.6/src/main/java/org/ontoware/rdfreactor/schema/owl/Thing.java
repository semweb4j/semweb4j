
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 17:50
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.schema.rdfschema.Resource;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 17:50
 * This class manages access to these properties:
 * <ul>
 *   <li> SameAs </li>
 *   <li> DifferentFrom </li>
 * </ul>
 */
public class Thing extends Resource {

    /** http://www.w3.org/2002/07/owl#Thing */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2002/07/owl#Thing", false);

    /** http://www.w3.org/2002/07/owl#sameAs */
	public static final URI SAMEAS = new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false);

    /** http://www.w3.org/2002/07/owl#differentFrom */
	public static final URI DIFFERENTFROM = new URIImpl("http://www.w3.org/2002/07/owl#differentFrom",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false),
      new URIImpl("http://www.w3.org/2002/07/owl#differentFrom",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, String uriString, boolean write) {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Thing or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Thing getInstance(Model model, URI uri) throws Exception {
		return (Thing) getInstance(model, uri, Thing.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Thing[] getAllInstances() {
		return (Thing[]) getAllInstances(super.model, Thing.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Thing[] getAllInstances(Model model) {
		return (Thing[]) getAllInstances(model, Thing.class);
	}

	/**
	 * @return all A's that have a relation 'SameAs' to this Thing instance
	 */
	public Thing[] getAllSameAs_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.SAMEAS, this.getResource(), Thing.class);
	}

	/**
	 * add 'SameAs'-Inverse
	 * @param value
	 */
	public void addSameAs_Inverse(Thing value) {
		value.add( Thing.SAMEAS ,this);
	}


	/**
	 * @return all A's that have a relation 'DifferentFrom' to this Thing instance
	 */
	public Thing[] getAllDifferentFrom_Inverse() {
		return (Thing[]) getAll_Inverse(Thing.DIFFERENTFROM, this.getResource(), Thing.class);
	}

	/**
	 * add 'DifferentFrom'-Inverse
	 * @param value
	 */
	public void addDifferentFrom_Inverse(Thing value) {
		value.add( Thing.DIFFERENTFROM ,this);
	}



    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSameAs() {
		return (Thing) get(SAMEAS, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setSameAs( Thing value ) {
		set(SAMEAS, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removeSameAs( Thing value  ) {
		remove(SAMEAS, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SAMEAS, value)
	 */
	public boolean hasSameAs( Thing value) {
		return hasValue(SAMEAS, value);
	}

	/**
	 * @return true if the model contains a statement (this, SAMEAS, *)
	 */
	public boolean hasSameAs() {
		return hasValue(SAMEAS);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addSameAs( Thing value  ) {
		add(SAMEAS, value );
	}

	/**
	 * @return all values
	 */
	public Thing[] getAllSameAs() {
		return (Thing[]) getAll(SAMEAS, Thing.class);
	}
  

    /**
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getDifferentFrom() {
		return (Thing) get(DIFFERENTFROM, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
	 */
	public void setDifferentFrom( Thing value ) {
		set(DIFFERENTFROM, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
	 */
	public void removeDifferentFrom( Thing value  ) {
		remove(DIFFERENTFROM, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, DIFFERENTFROM, value)
	 */
	public boolean hasDifferentFrom( Thing value) {
		return hasValue(DIFFERENTFROM, value);
	}

	/**
	 * @return true if the model contains a statement (this, DIFFERENTFROM, *)
	 */
	public boolean hasDifferentFrom() {
		return hasValue(DIFFERENTFROM);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
	 */
	public void addDifferentFrom( Thing value  ) {
		add(DIFFERENTFROM, value );
	}

	/**
	 * @return all values
	 */
	public Thing[] getAllDifferentFrom() {
		return (Thing[]) getAll(DIFFERENTFROM, Thing.class);
	}
   
}

  
  
