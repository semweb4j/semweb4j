/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 16.10.07 16:48
 */
package org.ontoware.semversion.impl.generated;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * A set of triples (content TripleSet) with a set of metadata
 *  
 * This class manages access to these properties:
 * <ul>
 *   <li> BranchLabel </li>
 *   <li> ChangeCause </li>
 *   <li> Child </li>
 *   <li> Container </li>
 *   <li> Content </li>
 *   <li> FirstParent </li>
 *   <li> SecondParent </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 16.10.07 16:48
 */
public class Version extends VersionedItem {

    /** http://purl.org/net/semversion#Version */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/net/semversion#Version", false);

    /** http://purl.org/net/semversion#branchLabel */
	public static final URI BRANCHLABEL = new URIImpl("http://purl.org/net/semversion#branchLabel",false);

    /** http://purl.org/net/semversion#hasChangeCause */
	public static final URI CHANGECAUSE = new URIImpl("http://purl.org/net/semversion#hasChangeCause",false);

    /** http://purl.org/net/semversion#hasChild */
	public static final URI CHILD = new URIImpl("http://purl.org/net/semversion#hasChild",false);

    /** http://purl.org/net/semversion#hasContainer */
	public static final URI CONTAINER = new URIImpl("http://purl.org/net/semversion#hasContainer",false);

    /** http://purl.org/net/semversion#hasContent */
	public static final URI CONTENT = new URIImpl("http://purl.org/net/semversion#hasContent",false);

    /** http://purl.org/net/semversion#hasFirstParent */
	public static final URI FIRSTPARENT = new URIImpl("http://purl.org/net/semversion#hasFirstParent",false);

    /** http://purl.org/net/semversion#hasSecondParent */
	public static final URI SECONDPARENT = new URIImpl("http://purl.org/net/semversion#hasSecondParent",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/net/semversion#branchLabel",false),
      new URIImpl("http://purl.org/net/semversion#hasChangeCause",false),
      new URIImpl("http://purl.org/net/semversion#hasChild",false),
      new URIImpl("http://purl.org/net/semversion#hasContainer",false),
      new URIImpl("http://purl.org/net/semversion#hasContent",false),
      new URIImpl("http://purl.org/net/semversion#hasFirstParent",false),
      new URIImpl("http://purl.org/net/semversion#hasSecondParent",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Version ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Version ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Version ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public Version ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Version ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Version ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Version or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Version getInstance(Model model, URI uri) throws Exception {
		return (Version) getInstance(model, uri, Version.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Version[] getAllInstances() {
		return (Version[]) getAllInstances(super.model, Version.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Version[] getAllInstances(Model model) {
		return (Version[]) getAllInstances(model, Version.class);
	}

	/**
	 * @return all A's that have a relation 'Root' to this Version instance
	 */
	public VersionedModel[] getAllRoot_Inverse() {
		return (VersionedModel[]) getAll_Inverse(VersionedModel.ROOT, this.getResource(), VersionedModel.class);
	}

	/**
	 * add 'Root'-Inverse
	 * @param value
	 */
	public void addRoot_Inverse(VersionedModel value) {
		value.add( VersionedModel.ROOT ,this);
	}


	/**
	 * @return all A's that have a relation 'Version' to this Version instance
	 */
	public VersionedModel[] getAllVersion_Inverse() {
		return (VersionedModel[]) getAll_Inverse(VersionedModel.VERSION, this.getResource(), VersionedModel.class);
	}

	/**
	 * add 'Version'-Inverse
	 * @param value
	 */
	public void addVersion_Inverse(VersionedModel value) {
		value.add( VersionedModel.VERSION ,this);
	}


	/**
	 * @return all A's that have a relation 'Child' to this Version instance
	 */
	public Version[] getAllChild_Inverse() {
		return (Version[]) getAll_Inverse(Version.CHILD, this.getResource(), Version.class);
	}

	/**
	 * add 'Child'-Inverse
	 * @param value
	 */
	public void addChild_Inverse(Version value) {
		value.add( Version.CHILD ,this);
	}


	/**
	 * @return all A's that have a relation 'FirstParent' to this Version instance
	 */
	public Version[] getAllFirstParent_Inverse() {
		return (Version[]) getAll_Inverse(Version.FIRSTPARENT, this.getResource(), Version.class);
	}

	/**
	 * add 'FirstParent'-Inverse
	 * @param value
	 */
	public void addFirstParent_Inverse(Version value) {
		value.add( Version.FIRSTPARENT ,this);
	}


	/**
	 * @return all A's that have a relation 'SecondParent' to this Version instance
	 */
	public Version[] getAllSecondParent_Inverse() {
		return (Version[]) getAll_Inverse(Version.SECONDPARENT, this.getResource(), Version.class);
	}

	/**
	 * add 'SecondParent'-Inverse
	 * @param value
	 */
	public void addSecondParent_Inverse(Version value) {
		value.add( Version.SECONDPARENT ,this);
	}



    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getBranchLabel() {
		return (java.lang.String) get(BRANCHLABEL, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setBranchLabel( java.lang.String value ) {
		set(BRANCHLABEL, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeBranchLabel() {
		removeAll(BRANCHLABEL);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeBranchLabel( java.lang.String value  ) {
		remove(BRANCHLABEL, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllBranchLabel() {
		removeAll(BRANCHLABEL);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, BRANCHLABEL, value)
	 */
	public boolean hasBranchLabel( java.lang.String value) {
		return hasValue(BRANCHLABEL, value);
	}

	/**
	 * @return true if the model contains a statement (this, BRANCHLABEL, *)
	 */
	public boolean hasBranchLabel() {
		return hasValue(BRANCHLABEL);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addBranchLabel( java.lang.String value  ) {
		add(BRANCHLABEL, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public java.lang.String[] getAllBranchLabel() {
		return (java.lang.String[]) getAll(BRANCHLABEL, java.lang.String.class);
	}
  

    /**
     * Schema Comment: one of 'commit', 'branch', 'merge'
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getChangeCause() {
		return (java.lang.String) get(CHANGECAUSE, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: one of 'commit', 'branch', 'merge'
	 */
	public void setChangeCause( java.lang.String value ) {
		set(CHANGECAUSE, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: one of 'commit', 'branch', 'merge'
	 */
	public void removeChangeCause() {
		removeAll(CHANGECAUSE);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: one of 'commit', 'branch', 'merge'
	 */
	public void removeChangeCause( java.lang.String value  ) {
		remove(CHANGECAUSE, value);
	}

	/**
	 * removes all values
     * Schema Comment: one of 'commit', 'branch', 'merge'
	 */
	public void removeAllChangeCause() {
		removeAll(CHANGECAUSE);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CHANGECAUSE, value)
	 */
	public boolean hasChangeCause( java.lang.String value) {
		return hasValue(CHANGECAUSE, value);
	}

	/**
	 * @return true if the model contains a statement (this, CHANGECAUSE, *)
	 */
	public boolean hasChangeCause() {
		return hasValue(CHANGECAUSE);
	}

   

    /**
     * Schema Comment: inverse of firstParent and secondParent, relation maintained manually
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Version getChild() {
		return (Version) get(CHILD, Version.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: inverse of firstParent and secondParent, relation maintained manually
	 */
	public void setChild( Version value ) {
		set(CHILD, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: inverse of firstParent and secondParent, relation maintained manually
	 */
	public void removeChild() {
		removeAll(CHILD);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: inverse of firstParent and secondParent, relation maintained manually
	 */
	public void removeChild( Version value  ) {
		remove(CHILD, value);
	}

	/**
	 * removes all values
     * Schema Comment: inverse of firstParent and secondParent, relation maintained manually
	 */
	public void removeAllChild() {
		removeAll(CHILD);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CHILD, value)
	 */
	public boolean hasChild( Version value) {
		return hasValue(CHILD, value);
	}

	/**
	 * @return true if the model contains a statement (this, CHILD, *)
	 */
	public boolean hasChild() {
		return hasValue(CHILD);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: inverse of firstParent and secondParent, relation maintained manually
	 */
	public void addChild( Version value  ) {
		add(CHILD, value );
	}

	/**
	 * @return all values
     * Schema Comment: inverse of firstParent and secondParent, relation maintained manually
	 */
	public Version[] getAllChild() {
		return (Version[]) getAll(CHILD, Version.class);
	}
  

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public VersionedModel getContainer() {
		return (VersionedModel) get(CONTAINER, VersionedModel.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setContainer( VersionedModel value ) {
		set(CONTAINER, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeContainer() {
		removeAll(CONTAINER);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 * @throws CardinalityException if removing would change the number of
	 * values below the minimal cardinality 1
	 */
	public void removeContainer( VersionedModel value  )
	throws CardinalityException {
		remove(CONTAINER, value, 1);
	}

 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CONTAINER, value)
	 */
	public boolean hasContainer( VersionedModel value) {
		return hasValue(CONTAINER, value);
	}

	/**
	 * @return true if the model contains a statement (this, CONTAINER, *)
	 */
	public boolean hasContainer() {
		return hasValue(CONTAINER);
	}

   

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public RDFModel getContent() {
		return (RDFModel) get(CONTENT, RDFModel.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setContent( RDFModel value ) {
		set(CONTENT, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeContent() {
		removeAll(CONTENT);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeContent( RDFModel value  ) {
		remove(CONTENT, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllContent() {
		removeAll(CONTENT);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CONTENT, value)
	 */
	public boolean hasContent( RDFModel value) {
		return hasValue(CONTENT, value);
	}

	/**
	 * @return true if the model contains a statement (this, CONTENT, *)
	 */
	public boolean hasContent() {
		return hasValue(CONTENT);
	}

   

    /**
     * Schema Comment: A version has two parents only when merged
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Version getFirstParent() {
		return (Version) get(FIRSTPARENT, Version.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A version has two parents only when merged
	 */
	public void setFirstParent( Version value ) {
		set(FIRSTPARENT, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: A version has two parents only when merged
	 */
	public void removeFirstParent() {
		removeAll(FIRSTPARENT);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A version has two parents only when merged
	 */
	public void removeFirstParent( Version value  ) {
		remove(FIRSTPARENT, value);
	}

	/**
	 * removes all values
     * Schema Comment: A version has two parents only when merged
	 */
	public void removeAllFirstParent() {
		removeAll(FIRSTPARENT);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, FIRSTPARENT, value)
	 */
	public boolean hasFirstParent( Version value) {
		return hasValue(FIRSTPARENT, value);
	}

	/**
	 * @return true if the model contains a statement (this, FIRSTPARENT, *)
	 */
	public boolean hasFirstParent() {
		return hasValue(FIRSTPARENT);
	}

   

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Version getSecondParent() {
		return (Version) get(SECONDPARENT, Version.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setSecondParent( Version value ) {
		set(SECONDPARENT, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeSecondParent() {
		removeAll(SECONDPARENT);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeSecondParent( Version value  ) {
		remove(SECONDPARENT, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllSecondParent() {
		removeAll(SECONDPARENT);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SECONDPARENT, value)
	 */
	public boolean hasSecondParent( Version value) {
		return hasValue(SECONDPARENT, value);
	}

	/**
	 * @return true if the model contains a statement (this, SECONDPARENT, *)
	 */
	public boolean hasSecondParent() {
		return hasValue(SECONDPARENT);
	}

    
}

  
  
