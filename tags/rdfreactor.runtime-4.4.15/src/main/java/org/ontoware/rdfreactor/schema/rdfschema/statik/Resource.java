/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 11.11.07 18:35
 */
package org.ontoware.rdfreactor.schema.rdfschema.statik;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class acts as a catch-all for all properties, for which no domain has specified.
 *  
 * This class manages access to these properties:
 * <ul>
 *   <li> Comment </li>
 *   <li> IsDefinedBy </li>
 *   <li> Label </li>
 *   <li> SeeAlso </li>
 *   <li> Type </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 11.11.07 18:35
 */
public class Resource {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.w3.org/2000/01/rdf-schema#comment */
	public static final URI COMMENT = new URIImpl("http://www.w3.org/2000/01/rdf-schema#comment",false);

    /** http://www.w3.org/2000/01/rdf-schema#isDefinedBy */
	public static final URI ISDEFINEDBY = new URIImpl("http://www.w3.org/2000/01/rdf-schema#isDefinedBy",false);

    /** http://www.w3.org/2000/01/rdf-schema#label */
	public static final URI LABEL = new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false);

    /** http://www.w3.org/2000/01/rdf-schema#seeAlso */
	public static final URI SEEALSO = new URIImpl("http://www.w3.org/2000/01/rdf-schema#seeAlso",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#type */
	public static final URI TYPE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#comment",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#isDefinedBy",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#seeAlso",false),
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type",false) 
    };

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of classResource in the model
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}


	/**
	 * @return all A's that have a relation 'IsDefinedBy' to this Thing instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsDefinedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Resource.ISDEFINEDBY, objectValue);
	}


	/**
	 * @return all A's that have a relation 'SeeAlso' to this Thing instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSeeAlso_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Resource.SEEALSO, objectValue);
	}


	/**
	 * @return all A's that have a relation 'First' to this Thing instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFirst_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, List.FIRST, objectValue);
	}


	/**
	 * @return all A's that have a relation 'Object' to this Thing instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllObject_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Statement.OBJECT, objectValue);
	}


	/**
	 * @return all A's that have a relation 'Predicate' to this Thing instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPredicate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Statement.PREDICATE, objectValue);
	}


	/**
	 * @return all A's that have a relation 'Subject' to this Thing instance
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubject_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Statement.SUBJECT, objectValue);
	}



    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Literal getComment(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return (Literal) Base.get(model, resource, COMMENT, Literal.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setComment( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value ) {
		Base.set(model, resource, COMMENT, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeComment(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll(model, resource, COMMENT);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeComment( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value  ) {
		Base.remove(model, resource, COMMENT, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllComment(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll( model, resource, COMMENT);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, COMMENT, value)
	 */
	public boolean hasComment( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value) {
		return Base.hasValue(model, resource, COMMENT, value);
	}

	/**
	 * @return true if the model contains a statement (this, COMMENT, *)
	 */
	public boolean hasComment(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.hasValue(model, resource, COMMENT);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addComment( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value  ) {
		Base.add(model, resource,COMMENT, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public ClosableIterator<Literal> getAllComment(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.getAll(model, resource,COMMENT, Literal.class);
	}
  

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return (Resource) Base.get(model, resource, ISDEFINEDBY, Resource.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value ) {
		Base.set(model, resource, ISDEFINEDBY, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll(model, resource, ISDEFINEDBY);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value  ) {
		Base.remove(model, resource, ISDEFINEDBY, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll( model, resource, ISDEFINEDBY);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, ISDEFINEDBY, value)
	 */
	public boolean hasIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value) {
		return Base.hasValue(model, resource, ISDEFINEDBY, value);
	}

	/**
	 * @return true if the model contains a statement (this, ISDEFINEDBY, *)
	 */
	public boolean hasIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.hasValue(model, resource, ISDEFINEDBY);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addIsDefinedBy( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value  ) {
		Base.add(model, resource,ISDEFINEDBY, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public ClosableIterator<Resource> getAllIsDefinedBy(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.getAll(model, resource,ISDEFINEDBY, Resource.class);
	}
  

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Literal getLabel(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return (Literal) Base.get(model, resource, LABEL, Literal.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setLabel( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value ) {
		Base.set(model, resource, LABEL, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeLabel(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll(model, resource, LABEL);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeLabel( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value  ) {
		Base.remove(model, resource, LABEL, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllLabel(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll( model, resource, LABEL);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, LABEL, value)
	 */
	public boolean hasLabel( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value) {
		return Base.hasValue(model, resource, LABEL, value);
	}

	/**
	 * @return true if the model contains a statement (this, LABEL, *)
	 */
	public boolean hasLabel(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.hasValue(model, resource, LABEL);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addLabel( Model model, org.ontoware.rdf2go.model.node.Resource resource, Literal value  ) {
		Base.add(model, resource,LABEL, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public ClosableIterator<Literal> getAllLabel(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.getAll(model, resource,LABEL, Literal.class);
	}
  

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return (Resource) Base.get(model, resource, SEEALSO, Resource.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value ) {
		Base.set(model, resource, SEEALSO, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll(model, resource, SEEALSO);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value  ) {
		Base.remove(model, resource, SEEALSO, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll( model, resource, SEEALSO);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SEEALSO, value)
	 */
	public boolean hasSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value) {
		return Base.hasValue(model, resource, SEEALSO, value);
	}

	/**
	 * @return true if the model contains a statement (this, SEEALSO, *)
	 */
	public boolean hasSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.hasValue(model, resource, SEEALSO);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addSeeAlso( Model model, org.ontoware.rdf2go.model.node.Resource resource, Resource value  ) {
		Base.add(model, resource,SEEALSO, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public ClosableIterator<Resource> getAllSeeAlso(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.getAll(model, resource,SEEALSO, Resource.class);
	}
  

    /**
     * Schema Comment: 
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Class getType(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return (Class) Base.get(model, resource, TYPE, Class.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: 
	 */
	public void setType( Model model, org.ontoware.rdf2go.model.node.Resource resource, Class value ) {
		Base.set(model, resource, TYPE, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: 
	 */
	public void removeType(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll(model, resource, TYPE);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: 
	 */
	public void removeType( Model model, org.ontoware.rdf2go.model.node.Resource resource, Class value  ) {
		Base.remove(model, resource, TYPE, value);
	}

	/**
	 * removes all values
     * Schema Comment: 
	 */
	public void removeAllType(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		Base.removeAll( model, resource, TYPE);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, TYPE, value)
	 */
	public boolean hasType( Model model, org.ontoware.rdf2go.model.node.Resource resource, Class value) {
		return Base.hasValue(model, resource, TYPE, value);
	}

	/**
	 * @return true if the model contains a statement (this, TYPE, *)
	 */
	public boolean hasType(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.hasValue(model, resource, TYPE);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: 
	 */
	public void addType( Model model, org.ontoware.rdf2go.model.node.Resource resource, Class value  ) {
		Base.add(model, resource,TYPE, value );
	}

	/**
	 * @return all values
     * Schema Comment: 
	 */
	public ClosableIterator<Class> getAllType(Model model, org.ontoware.rdf2go.model.node.Resource resource) {
		return Base.getAll(model, resource,TYPE, Class.class);
	}
   
}

  
  
