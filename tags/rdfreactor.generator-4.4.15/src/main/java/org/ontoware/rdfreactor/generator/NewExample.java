/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 870 2007-11-07 17:30:59Z max.at.xam.de $) on 11.11.07 15:55
 */
package org.ontoware.rdfreactor.generator;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

/**
 * This class acts as a catch-all for all properties, for which no domain has specified.
 *  
 * This class manages access to these properties:
 * <ul>
 *   <li> Tag </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 11.11.07 15:55
 */
public class NewExample {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://semfs.ontoware.org/ontology/tagfs#hasTag */
	public static final URI TAG = new URIImpl("http://semfs.ontoware.org/ontology/tagfs#hasTag",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://semfs.ontoware.org/ontology/tagfs#hasTag",false) 
    };

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model
	 * @param uri
	 * @return true if URI is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, Resource r) {
		return Base.hasInstance(model, RDFS_CLASS, r);
	}

	/**
	 * @return all instances of this class
	 */
	public ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS);
	}
	
	public static void createInstance(Model model, Resource r) {
		Base.createInstance(model, RDFS_CLASS, r);
	}

	public static void deleteInstance(Model model, Resource r) {
		Base.deleteInstance(model, RDFS_CLASS, r);
	}


    /**
     * Schema Comment: links a resource to a tag string
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getTag(Model model, Resource resource) {
		return (java.lang.String) Base.get(model, resource, TAG, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: links a resource to a tag string
	 */
	public void setTag( Model model, Resource resource, java.lang.String value ) {
		Base.set(model, resource, TAG, value);
	}

	/**
	 * removes current value(s)
     * Schema Comment: links a resource to a tag string
	 */
	public void removeTag(Model model, Resource resource) {
		Base.removeAll(model, resource, TAG);
	}
 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: links a resource to a tag string
	 */
	public void removeTag( Model model, Resource resource,java.lang.String value  ) {
		Base.remove(model, resource, TAG, value);
	}

	/**
	 * removes all values
     * Schema Comment: links a resource to a tag string
	 */
	public void removeAllTag(Model model, Resource resource) {
		Base.removeAll(model, resource, TAG);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, TAG, value)
	 */
	public boolean hasTag( Model model, Resource resource, java.lang.String value) {
		return Base.hasValue(model, resource, TAG, value);
	}

	/**
	 * @return true if the model contains a statement (this, TAG, *)
	 */
	public boolean hasTag(Model model, Resource resource) {
		return Base.hasValue(model, resource, TAG);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: links a resource to a tag string
	 */
	public void addTag( Model model, Resource resource, java.lang.String value  ) {
		Base.add(model, resource, TAG, value );
	}

	/**
	 * @return all values
     * Schema Comment: links a resource to a tag string
	 */
	public ClosableIterator<String> getAllTag(Model model, Resource resource) {
		return Base.getAll(model, resource, TAG, String.class);
	}
   
}

  
  
