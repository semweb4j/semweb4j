
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 17:33
 */
package org.ontoware.rdfreactor.schema.rdfschema;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 17:33
 * This class manages access to these properties:
 * <ul>
 *   <li> Subject </li>
 *   <li> Predicate </li>
 *   <li> Object </li>
 * </ul>
 * Schema Comment: The class of RDF statements.
 */
public class Statement extends Resource {

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement", false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#subject */
	public static final URI SUBJECT = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#subject",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate */
	public static final URI PREDICATE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#object */
	public static final URI OBJECT = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#object",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#subject",false),
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate",false),
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#object",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Statement ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Statement ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Statement ( Model model, String uriString, boolean write) {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Statement ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Statement ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Statement or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Statement getInstance(Model model, URI uri) throws Exception {
		return (Statement) getInstance(model, uri, Statement.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Statement[] getAllInstances() {
		return (Statement[]) getAllInstances(super.model, Statement.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Statement[] getAllInstances(Model model) {
		return (Statement[]) getAllInstances(model, Statement.class);
	}


    /**
     * Schema Comment: The subject of the subject RDF statement.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getSubject() {
		return (Resource) get(SUBJECT, Resource.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The subject of the subject RDF statement.
	 */
	public void setSubject( Resource value ) {
		set(SUBJECT, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The subject of the subject RDF statement.
	 */
	public void removeSubject( Resource value  ) {
		remove(SUBJECT, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SUBJECT, value)
	 */
	public boolean hasSubject( Resource value) {
		return hasValue(SUBJECT, value);
	}

	/**
	 * @return true if the model contains a statement (this, SUBJECT, *)
	 */
	public boolean hasSubject() {
		return hasValue(SUBJECT);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The subject of the subject RDF statement.
	 */
	public void addSubject( Resource value  ) {
		add(SUBJECT, value );
	}

	/**
	 * @return all values
     * Schema Comment: The subject of the subject RDF statement.
	 */
	public Resource[] getAllSubject() {
		return (Resource[]) getAll(SUBJECT, Resource.class);
	}
  

    /**
     * Schema Comment: The predicate of the subject RDF statement.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getPredicate() {
		return (Resource) get(PREDICATE, Resource.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The predicate of the subject RDF statement.
	 */
	public void setPredicate( Resource value ) {
		set(PREDICATE, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The predicate of the subject RDF statement.
	 */
	public void removePredicate( Resource value  ) {
		remove(PREDICATE, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, PREDICATE, value)
	 */
	public boolean hasPredicate( Resource value) {
		return hasValue(PREDICATE, value);
	}

	/**
	 * @return true if the model contains a statement (this, PREDICATE, *)
	 */
	public boolean hasPredicate() {
		return hasValue(PREDICATE);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The predicate of the subject RDF statement.
	 */
	public void addPredicate( Resource value  ) {
		add(PREDICATE, value );
	}

	/**
	 * @return all values
     * Schema Comment: The predicate of the subject RDF statement.
	 */
	public Resource[] getAllPredicate() {
		return (Resource[]) getAll(PREDICATE, Resource.class);
	}
  

    /**
     * Schema Comment: The object of the subject RDF statement.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Resource getObject() {
		return (Resource) get(OBJECT, Resource.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The object of the subject RDF statement.
	 */
	public void setObject( Resource value ) {
		set(OBJECT, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The object of the subject RDF statement.
	 */
	public void removeObject( Resource value  ) {
		remove(OBJECT, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, OBJECT, value)
	 */
	public boolean hasObject( Resource value) {
		return hasValue(OBJECT, value);
	}

	/**
	 * @return true if the model contains a statement (this, OBJECT, *)
	 */
	public boolean hasObject() {
		return hasValue(OBJECT);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The object of the subject RDF statement.
	 */
	public void addObject( Resource value  ) {
		add(OBJECT, value );
	}

	/**
	 * @return all values
     * Schema Comment: The object of the subject RDF statement.
	 */
	public Resource[] getAllObject() {
		return (Resource[]) getAll(OBJECT, Resource.class);
	}
   
}

  
  
