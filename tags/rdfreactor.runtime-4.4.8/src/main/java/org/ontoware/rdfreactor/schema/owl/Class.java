/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 17:50
 */
package org.ontoware.rdfreactor.schema.owl;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.schema.rdfschema.List;
import org.ontoware.rdfreactor.schema.rdfschema.Property;
import org.ontoware.rdfreactor.schema.rdfschema.Resource;

/**
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 17:50 This
 * class manages access to these properties:
 * <ul>
 * <li> SubClassOf </li>
 * <li> OneOf </li>
 * <li> DisjointWith </li>
 * <li> IntersectionOf </li>
 * <li> EquivalentClass </li>
 * <li> UnionOf </li>
 * <li> ComplementOf </li>
 * </ul>
 */
public class Class extends Resource {

	/** http://www.w3.org/2000/01/rdf-schema#Class */
	public static final URI RDFS_CLASS = new URIImpl(
			"http://www.w3.org/2000/01/rdf-schema#Class", false);

	/** http://www.w3.org/2000/01/rdf-schema#subClassOf */
	public static final URI SUBCLASSOF = new URIImpl(
			"http://www.w3.org/2000/01/rdf-schema#subClassOf", false);

	/** http://www.w3.org/2002/07/owl#oneOf */
	public static final URI ONEOF = new URIImpl(
			"http://www.w3.org/2002/07/owl#oneOf", false);

	/** http://www.w3.org/2002/07/owl#disjointWith */
	public static final URI DISJOINTWITH = new URIImpl(
			"http://www.w3.org/2002/07/owl#disjointWith", false);

	/** http://www.w3.org/2002/07/owl#intersectionOf */
	public static final URI INTERSECTIONOF = new URIImpl(
			"http://www.w3.org/2002/07/owl#intersectionOf", false);

	/** http://www.w3.org/2002/07/owl#equivalentClass */
	public static final URI EQUIVALENTCLASS = new URIImpl(
			"http://www.w3.org/2002/07/owl#equivalentClass", false);

	/** http://www.w3.org/2002/07/owl#unionOf */
	public static final URI UNIONOF = new URIImpl(
			"http://www.w3.org/2002/07/owl#unionOf", false);

	/** http://www.w3.org/2002/07/owl#complementOf */
	public static final URI COMPLEMENTOF = new URIImpl(
			"http://www.w3.org/2002/07/owl#complementOf", false);

	/** all property-URIs with this class as domain */
	public static final URI[] MANAGED_URIS = {
			new URIImpl("http://www.w3.org/2000/01/rdf-schema#subClassOf",
					false),
			new URIImpl("http://www.w3.org/2002/07/owl#oneOf", false),
			new URIImpl("http://www.w3.org/2002/07/owl#disjointWith", false),
			new URIImpl("http://www.w3.org/2002/07/owl#intersectionOf", false),
			new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass", false),
			new URIImpl("http://www.w3.org/2002/07/owl#unionOf", false),
			new URIImpl("http://www.w3.org/2002/07/owl#complementOf", false) };

	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI. Creating
	 * two wrappers for the same instanceURI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI
	 *            URI of RDFS class
	 * @param instanceIdentifier
	 *            Resource that identifies this instance
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 */
	protected Class(Model model, URI classURI,
			org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
			boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI. Creating
	 * two wrappers for the same instanceURI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier
	 *            an RDF2Go Resource identifying this instance
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 */
	public Class(Model model,
			org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
			boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as
	 * a String. Creating two wrappers for the same URI is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString
	 *            a URI given as a String
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 */
	public Class(Model model, String uriString, boolean write) {
		super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode
	 *            BlankNode of this instance
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 */
	public Class(Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a randomly
	 * generated URI. Creating two wrappers results in different URIs.
	 * 
	 * @param model
	 *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write
	 *            if true, the statement (this, rdf:type, TYPE) is written to
	 *            the model
	 */
	public Class(Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

	// /////////////////////////////////////////////////////////////////
	// getters, setters, ...

	/**
	 * @param model
	 *            RDF2Go model
	 * @param uri
	 *            instance identifier
	 * @return an instance of Class or null if none existst
	 * @throws Exception
	 *             if Model causes problems
	 */
	public static Class getInstance(Model model, URI uri) throws Exception {
		return (Class) getInstance(model, uri, Class.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Class[] getAllInstances() {
		return (Class[]) getAllInstances(super.model, Class.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model
	 *            an RDF2Go model
	 */
	public static Class[] getAllInstances(Model model) {
		return (Class[]) getAllInstances(model, Class.class);
	}

	/**
	 * @return all A's that have a relation 'Type' to this Class instance
	 */
	public Class[] getAllType_InverseOwl() {
		return (Class[]) getAll_Inverse(Class.TYPE, this.getResource(),
				Class.class);
	}

	/**
	 * add 'Type'-Inverse
	 * 
	 * @param value
	 */
	public void addType_Inverse(Class value) {
		value.add(Class.TYPE, this);
	}

	/**
	 * @return all A's that have a relation 'SubClassOf' to this Class instance
	 */
	public Class[] getAllSubClassOf_Inverse() {
		return (Class[]) getAll_Inverse(Class.SUBCLASSOF, this.getResource(),
				Class.class);
	}

	/**
	 * add 'SubClassOf'-Inverse
	 * 
	 * @param value
	 */
	public void addSubClassOf_Inverse(Class value) {
		value.add(Class.SUBCLASSOF, this);
	}

	/**
	 * @return all A's that have a relation 'Domain' to this Class instance
	 */
	public Property[] getAllDomain_Inverse() {
		return (Property[]) getAll_Inverse(Property.DOMAIN, this.getResource(),
				Property.class);
	}

	/**
	 * add 'Domain'-Inverse
	 * 
	 * @param value
	 */
	public void addDomain_Inverse(Property value) {
		value.add(Property.DOMAIN, this);
	}

	/**
	 * @return all A's that have a relation 'Range' to this Class instance
	 */
	public Property[] getAllRange_Inverse() {
		return (Property[]) getAll_Inverse(Property.RANGE, this.getResource(),
				Property.class);
	}

	/**
	 * add 'Range'-Inverse
	 * 
	 * @param value
	 */
	public void addRange_Inverse(Property value) {
		value.add(Property.RANGE, this);
	}

	/**
	 * @return all A's that have a relation 'AllValuesFrom' to this Class
	 *         instance
	 */
	public Restriction[] getAllAllValuesFrom_Inverse() {
		return (Restriction[]) getAll_Inverse(Restriction.ALLVALUESFROM, this
				.getResource(), Restriction.class);
	}

	/**
	 * add 'AllValuesFrom'-Inverse
	 * 
	 * @param value
	 */
	public void addAllValuesFrom_Inverse(Restriction value) {
		value.add(Restriction.ALLVALUESFROM, this);
	}

	/**
	 * @return all A's that have a relation 'SomeValuesFrom' to this Class
	 *         instance
	 */
	public Restriction[] getAllSomeValuesFrom_Inverse() {
		return (Restriction[]) getAll_Inverse(Restriction.SOMEVALUESFROM, this
				.getResource(), Restriction.class);
	}

	/**
	 * add 'SomeValuesFrom'-Inverse
	 * 
	 * @param value
	 */
	public void addSomeValuesFrom_Inverse(Restriction value) {
		value.add(Restriction.SOMEVALUESFROM, this);
	}

	/**
	 * @return the only value. null if none is found
	 * @throws RDFDataException,
	 *             if the property has multiple values
	 */
	public Class getSubClassOf() {
		return (Class) get(SUBCLASSOF, Class.class);
	}

	/**
	 * removes all values and sets this one
	 * 
	 * @param value
	 *            the value to be set
	 */
	public void setSubClassOf(Class value) {
		set(SUBCLASSOF, value);
	}

	/**
	 * removes a value
	 * 
	 * @param value
	 *            the value to be removed
	 */
	public void removeSubClassOf(Class value) {
		remove(SUBCLASSOF, value);
	}

	/**
	 * @param value
	 * @return true if the model contains a statement (this, SUBCLASSOF, value)
	 */
	public boolean hasSubClassOf(Class value) {
		return hasValue(SUBCLASSOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, SUBCLASSOF, *)
	 */
	public boolean hasSubClassOf() {
		return hasValue(SUBCLASSOF);
	}

	/**
	 * adds a value
	 * 
	 * @param value
	 *            the value to be added
	 */
	public void addSubClassOf(Class value) {
		add(SUBCLASSOF, value);
	}

	/**
	 * @return all values
	 */
	public Class[] getAllSubClassOf() {
		return (Class[]) getAll(SUBCLASSOF, Class.class);
	}

	/**
	 * @return the only value. null if none is found
	 * @throws RDFDataException,
	 *             if the property has multiple values
	 */
	public List getOneOf() {
		return (List) get(ONEOF, List.class);
	}

	/**
	 * removes all values and sets this one
	 * 
	 * @param value
	 *            the value to be set
	 */
	public void setOneOf(List value) {
		set(ONEOF, value);
	}

	/**
	 * removes a value
	 * 
	 * @param value
	 *            the value to be removed
	 */
	public void removeOneOf(List value) {
		remove(ONEOF, value);
	}

	/**
	 * @param value
	 * @return true if the model contains a statement (this, ONEOF, value)
	 */
	public boolean hasOneOf(List value) {
		return hasValue(ONEOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, ONEOF, *)
	 */
	public boolean hasOneOf() {
		return hasValue(ONEOF);
	}

	/**
	 * adds a value
	 * 
	 * @param value
	 *            the value to be added
	 */
	public void addOneOf(List value) {
		add(ONEOF, value);
	}

	/**
	 * @return all values
	 */
	public List[] getAllOneOf() {
		return (List[]) getAll(ONEOF, List.class);
	}

	/**
	 * @return all A's that have a relation 'DisjointWith' to this Class
	 *         instance
	 */
	public Class[] getAllDisjointWith_Inverse() {
		return (Class[]) getAll_Inverse(Class.DISJOINTWITH, this
				.getResource(), Class.class);
	}

	/**
	 * add 'DisjointWith'-Inverse
	 * 
	 * @param value
	 */
	public void addDisjointWith_Inverse(Class value) {
		value.add(Class.DISJOINTWITH, this);
	}

	/**
	 * @return all A's that have a relation 'EquivalentClass' to this Class
	 *         instance
	 */
	public Class[] getAllEquivalentClass_Inverse() {
		return (Class[]) getAll_Inverse(Class.EQUIVALENTCLASS, this
				.getResource(), Class.class);
	}

	/**
	 * add 'EquivalentClass'-Inverse
	 * 
	 * @param value
	 */
	public void addEquivalentClass_Inverse(Class value) {
		value.add(Class.EQUIVALENTCLASS, this);
	}

	/**
	 * @return all A's that have a relation 'ComplementOf' to this Class
	 *         instance
	 */
	public Class[] getAllComplementOf_Inverse() {
		return (Class[]) getAll_Inverse(Class.COMPLEMENTOF, this
				.getResource(), Class.class);
	}

	/**
	 * add 'ComplementOf'-Inverse
	 * 
	 * @param value
	 */
	public void addComplementOf_Inverse(Class value) {
		value.add(Class.COMPLEMENTOF, this);
	}

	/**
	 * @return the only value. null if none is found
	 * @throws RDFDataException,
	 *             if the property has multiple values
	 */
	public Class getDisjointWith() {
		return (Class) get(DISJOINTWITH, Class.class);
	}

	/**
	 * removes all values and sets this one
	 * 
	 * @param value
	 *            the value to be set
	 */
	public void setDisjointWith(Class value) {
		set(DISJOINTWITH, value);
	}

	/**
	 * removes a value
	 * 
	 * @param value
	 *            the value to be removed
	 */
	public void removeDisjointWith(Class value) {
		remove(DISJOINTWITH, value);
	}

	/**
	 * @param value
	 * @return true if the model contains a statement (this, DISJOINTWITH,
	 *         value)
	 */
	public boolean hasDisjointWith(Class value) {
		return hasValue(DISJOINTWITH, value);
	}

	/**
	 * @return true if the model contains a statement (this, DISJOINTWITH, *)
	 */
	public boolean hasDisjointWith() {
		return hasValue(DISJOINTWITH);
	}

	/**
	 * adds a value
	 * 
	 * @param value
	 *            the value to be added
	 */
	public void addDisjointWith(Class value) {
		add(DISJOINTWITH, value);
	}

	/**
	 * @return all values
	 */
	public Class[] getAllDisjointWith() {
		return (Class[]) getAll(DISJOINTWITH, Class.class);
	}

	/**
	 * @return the only value. null if none is found
	 * @throws RDFDataException,
	 *             if the property has multiple values
	 */
	public List getIntersectionOf() {
		return (List) get(INTERSECTIONOF, List.class);
	}

	/**
	 * removes all values and sets this one
	 * 
	 * @param value
	 *            the value to be set
	 */
	public void setIntersectionOf(List value) {
		set(INTERSECTIONOF, value);
	}

	/**
	 * removes a value
	 * 
	 * @param value
	 *            the value to be removed
	 */
	public void removeIntersectionOf(List value) {
		remove(INTERSECTIONOF, value);
	}

	/**
	 * @param value
	 * @return true if the model contains a statement (this, INTERSECTIONOF,
	 *         value)
	 */
	public boolean hasIntersectionOf(List value) {
		return hasValue(INTERSECTIONOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, INTERSECTIONOF, *)
	 */
	public boolean hasIntersectionOf() {
		return hasValue(INTERSECTIONOF);
	}

	/**
	 * adds a value
	 * 
	 * @param value
	 *            the value to be added
	 */
	public void addIntersectionOf(List value) {
		add(INTERSECTIONOF, value);
	}

	/**
	 * @return all values
	 */
	public List[] getAllIntersectionOf() {
		return (List[]) getAll(INTERSECTIONOF, List.class);
	}

	/**
	 * @return the only value. null if none is found
	 * @throws RDFDataException,
	 *             if the property has multiple values
	 */
	public Class getEquivalentClass() {
		return (Class) get(EQUIVALENTCLASS, Class.class);
	}

	/**
	 * removes all values and sets this one
	 * 
	 * @param value
	 *            the value to be set
	 */
	public void setEquivalentClass(Class value) {
		set(EQUIVALENTCLASS, value);
	}

	/**
	 * removes a value
	 * 
	 * @param value
	 *            the value to be removed
	 */
	public void removeEquivalentClass(Class value) {
		remove(EQUIVALENTCLASS, value);
	}

	/**
	 * @param value
	 * @return true if the model contains a statement (this, EQUIVALENTCLASS,
	 *         value)
	 */
	public boolean hasEquivalentClass(Class value) {
		return hasValue(EQUIVALENTCLASS, value);
	}

	/**
	 * @return true if the model contains a statement (this, EQUIVALENTCLASS, *)
	 */
	public boolean hasEquivalentClass() {
		return hasValue(EQUIVALENTCLASS);
	}

	/**
	 * adds a value
	 * 
	 * @param value
	 *            the value to be added
	 */
	public void addEquivalentClass(Class value) {
		add(EQUIVALENTCLASS, value);
	}

	/**
	 * @return all values
	 */
	public Class[] getAllEquivalentClass() {
		return (Class[]) getAll(EQUIVALENTCLASS, Class.class);
	}

	/**
	 * @return the only value. null if none is found
	 * @throws RDFDataException,
	 *             if the property has multiple values
	 */
	public List getUnionOf() {
		return (List) get(UNIONOF, List.class);
	}

	/**
	 * removes all values and sets this one
	 * 
	 * @param value
	 *            the value to be set
	 */
	public void setUnionOf(List value) {
		set(UNIONOF, value);
	}

	/**
	 * removes a value
	 * 
	 * @param value
	 *            the value to be removed
	 */
	public void removeUnionOf(List value) {
		remove(UNIONOF, value);
	}

	/**
	 * @param value
	 * @return true if the model contains a statement (this, UNIONOF, value)
	 */
	public boolean hasUnionOf(List value) {
		return hasValue(UNIONOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, UNIONOF, *)
	 */
	public boolean hasUnionOf() {
		return hasValue(UNIONOF);
	}

	/**
	 * adds a value
	 * 
	 * @param value
	 *            the value to be added
	 */
	public void addUnionOf(List value) {
		add(UNIONOF, value);
	}

	/**
	 * @return all values
	 */
	public List[] getAllUnionOf() {
		return (List[]) getAll(UNIONOF, List.class);
	}

	/**
	 * @return the only value. null if none is found
	 * @throws RDFDataException,
	 *             if the property has multiple values
	 */
	public Class getComplementOf() {
		return (Class) get(COMPLEMENTOF, Class.class);
	}

	/**
	 * removes all values and sets this one
	 * 
	 * @param value
	 *            the value to be set
	 */
	public void setComplementOf(Class value) {
		set(COMPLEMENTOF, value);
	}

	/**
	 * removes a value
	 * 
	 * @param value
	 *            the value to be removed
	 */
	public void removeComplementOf(Class value) {
		remove(COMPLEMENTOF, value);
	}

	/**
	 * @param value
	 * @return true if the model contains a statement (this, COMPLEMENTOF,
	 *         value)
	 */
	public boolean hasComplementOf(Class value) {
		return hasValue(COMPLEMENTOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, COMPLEMENTOF, *)
	 */
	public boolean hasComplementOf() {
		return hasValue(COMPLEMENTOF);
	}

	/**
	 * adds a value
	 * 
	 * @param value
	 *            the value to be added
	 */
	public void addComplementOf(Class value) {
		add(COMPLEMENTOF, value);
	}

	/**
	 * @return all values
	 */
	public Class[] getAllComplementOf() {
		return (Class[]) getAll(COMPLEMENTOF, Class.class);
	}
}
