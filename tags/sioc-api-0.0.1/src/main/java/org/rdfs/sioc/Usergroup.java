
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 18:30
 */
package org.rdfs.sioc;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 18:30
 * This class manages access to these properties:
 * <ul>
 *   <li> Member </li>
 *   <li> Usergroupof </li>
 * </ul>
 * Schema Comment: A set of User accounts whose owners have a common purpose or interest. Can be used for access control purposes.
 */
public class Usergroup extends Thing {

    /** http://rdfs.org/sioc/ns#Usergroup */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#Usergroup", false);

    /** http://rdfs.org/sioc/ns#has_member */
	public static final URI MEMBER = new URIImpl("http://rdfs.org/sioc/ns#has_member",false);

    /** http://rdfs.org/sioc/ns#usergroup_of */
	public static final URI USERGROUPOF = new URIImpl("http://rdfs.org/sioc/ns#usergroup_of",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#has_member",false),
      new URIImpl("http://rdfs.org/sioc/ns#usergroup_of",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Usergroup ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Usergroup ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Usergroup ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public Usergroup ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Usergroup ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Usergroup ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Usergroup or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Usergroup getInstance(Model model, URI uri) throws Exception {
		return (Usergroup) getInstance(model, uri, Usergroup.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Usergroup[] getAllInstances() {
		return (Usergroup[]) getAllInstances(super.model, Usergroup.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Usergroup[] getAllInstances(Model model) {
		return (Usergroup[]) getAllInstances(model, Usergroup.class);
	}

	/**
	 * @return all A's that have a relation 'Usergroup' to this Usergroup instance
	 */
	public Space[] getAllSiocUsergroup_Inverse() {
		return (Space[]) getAll_Inverse(Space.USERGROUP, this.getResource(), Space.class);
	}

	/**
	 * add 'Usergroup'-Inverse
	 * @param value
	 */
	public void addSiocUsergroup_Inverse(Space value) {
		value.add( Space.USERGROUP ,this);
	}


	/**
	 * @return all A's that have a relation 'Memberof' to this Usergroup instance
	 */
	public User[] getAllSiocMemberof_Inverse() {
		return (User[]) getAll_Inverse(User.MEMBEROF, this.getResource(), User.class);
	}

	/**
	 * add 'Memberof'-Inverse
	 * @param value
	 */
	public void addSiocMemberof_Inverse(User value) {
		value.add( User.MEMBEROF ,this);
	}



    /**
     * Schema Comment: A User who is a member of this Usergroup.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public User getSiocMember() {
		return (User) get(MEMBER, User.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A User who is a member of this Usergroup.
	 */
	public void setSiocMember( User value ) {
		set(MEMBER, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A User who is a member of this Usergroup.
	 */
	public void removeSiocMember( User value  ) {
		remove(MEMBER, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, MEMBER, value)
	 */
	public boolean hasSiocMember( User value) {
		return hasValue(MEMBER, value);
	}

	/**
	 * @return true if the model contains a statement (this, MEMBER, *)
	 */
	public boolean hasSiocMember() {
		return hasValue(MEMBER);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A User who is a member of this Usergroup.
	 */
	public void addSiocMember( User value  ) {
		add(MEMBER, value );
	}

	/**
	 * @return all values
     * Schema Comment: A User who is a member of this Usergroup.
	 */
	public User[] getAllSiocMember() {
		return (User[]) getAll(MEMBER, User.class);
	}
  

    /**
     * Schema Comment: A Space that the Usergroup has access to.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Space getSiocUsergroupof() {
		return (Space) get(USERGROUPOF, Space.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Space that the Usergroup has access to.
	 */
	public void setSiocUsergroupof( Space value ) {
		set(USERGROUPOF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Space that the Usergroup has access to.
	 */
	public void removeSiocUsergroupof( Space value  ) {
		remove(USERGROUPOF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, USERGROUPOF, value)
	 */
	public boolean hasSiocUsergroupof( Space value) {
		return hasValue(USERGROUPOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, USERGROUPOF, *)
	 */
	public boolean hasSiocUsergroupof() {
		return hasValue(USERGROUPOF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Space that the Usergroup has access to.
	 */
	public void addSiocUsergroupof( Space value  ) {
		add(USERGROUPOF, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Space that the Usergroup has access to.
	 */
	public Space[] getAllSiocUsergroupof() {
		return (Space[]) getAll(USERGROUPOF, Space.class);
	}
   
}

  
  
