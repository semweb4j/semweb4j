
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 18:30
 */
package org.rdfs.sioc;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 18:30
 * This class manages access to these properties:
 * <ul>
 *   <li> Previousversion </li>
 *   <li> Previousbydate </li>
 *   <li> Container </li>
 *   <li> Nextbydate </li>
 *   <li> Reply </li>
 *   <li> Replyof </li>
 *   <li> Creator </li>
 *   <li> Ipaddress </li>
 *   <li> Nextversion </li>
 *   <li> Modifier </li>
 * </ul>
 * Schema Comment: A content Item that can be posted to or created within a Container.
 */
public class Item extends Document {

    /** http://rdfs.org/sioc/ns#Item */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#Item", false);

    /** http://rdfs.org/sioc/ns#previous_version */
	public static final URI PREVIOUSVERSION = new URIImpl("http://rdfs.org/sioc/ns#previous_version",false);

    /** http://rdfs.org/sioc/ns#previous_by_date */
	public static final URI PREVIOUSBYDATE = new URIImpl("http://rdfs.org/sioc/ns#previous_by_date",false);

    /** http://rdfs.org/sioc/ns#has_container */
	public static final URI CONTAINER = new URIImpl("http://rdfs.org/sioc/ns#has_container",false);

    /** http://rdfs.org/sioc/ns#next_by_date */
	public static final URI NEXTBYDATE = new URIImpl("http://rdfs.org/sioc/ns#next_by_date",false);

    /** http://rdfs.org/sioc/ns#has_reply */
	public static final URI REPLY = new URIImpl("http://rdfs.org/sioc/ns#has_reply",false);

    /** http://rdfs.org/sioc/ns#reply_of */
	public static final URI REPLYOF = new URIImpl("http://rdfs.org/sioc/ns#reply_of",false);

    /** http://rdfs.org/sioc/ns#has_creator */
	public static final URI CREATOR = new URIImpl("http://rdfs.org/sioc/ns#has_creator",false);

    /** http://rdfs.org/sioc/ns#ip_address */
	public static final URI IPADDRESS = new URIImpl("http://rdfs.org/sioc/ns#ip_address",false);

    /** http://rdfs.org/sioc/ns#next_version */
	public static final URI NEXTVERSION = new URIImpl("http://rdfs.org/sioc/ns#next_version",false);

    /** http://rdfs.org/sioc/ns#has_modifier */
	public static final URI MODIFIER = new URIImpl("http://rdfs.org/sioc/ns#has_modifier",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#previous_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#previous_by_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_container",false),
      new URIImpl("http://rdfs.org/sioc/ns#next_by_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_reply",false),
      new URIImpl("http://rdfs.org/sioc/ns#reply_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_creator",false),
      new URIImpl("http://rdfs.org/sioc/ns#ip_address",false),
      new URIImpl("http://rdfs.org/sioc/ns#next_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_modifier",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Item ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Item ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Item ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public Item ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Item ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Item ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Item or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Item getInstance(Model model, URI uri) throws Exception {
		return (Item) getInstance(model, uri, Item.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Item[] getAllInstances() {
		return (Item[]) getAllInstances(super.model, Item.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Item[] getAllInstances(Model model) {
		return (Item[]) getAllInstances(model, Item.class);
	}

	/**
	 * @return all A's that have a relation 'Containerof' to this Item instance
	 */
	public Container[] getAllSiocContainerof_Inverse() {
		return (Container[]) getAll_Inverse(Container.CONTAINEROF, this.getResource(), Container.class);
	}

	/**
	 * add 'Containerof'-Inverse
	 * @param value
	 */
	public void addSiocContainerof_Inverse(Container value) {
		value.add( Container.CONTAINEROF ,this);
	}


	/**
	 * @return all A's that have a relation 'Previousversion' to this Item instance
	 */
	public Item[] getAllSiocPreviousversion_Inverse() {
		return (Item[]) getAll_Inverse(Item.PREVIOUSVERSION, this.getResource(), Item.class);
	}

	/**
	 * add 'Previousversion'-Inverse
	 * @param value
	 */
	public void addSiocPreviousversion_Inverse(Item value) {
		value.add( Item.PREVIOUSVERSION ,this);
	}


	/**
	 * @return all A's that have a relation 'Previousbydate' to this Item instance
	 */
	public Item[] getAllSiocPreviousbydate_Inverse() {
		return (Item[]) getAll_Inverse(Item.PREVIOUSBYDATE, this.getResource(), Item.class);
	}

	/**
	 * add 'Previousbydate'-Inverse
	 * @param value
	 */
	public void addSiocPreviousbydate_Inverse(Item value) {
		value.add( Item.PREVIOUSBYDATE ,this);
	}


	/**
	 * @return all A's that have a relation 'Nextbydate' to this Item instance
	 */
	public Item[] getAllSiocNextbydate_Inverse() {
		return (Item[]) getAll_Inverse(Item.NEXTBYDATE, this.getResource(), Item.class);
	}

	/**
	 * add 'Nextbydate'-Inverse
	 * @param value
	 */
	public void addSiocNextbydate_Inverse(Item value) {
		value.add( Item.NEXTBYDATE ,this);
	}


	/**
	 * @return all A's that have a relation 'Reply' to this Item instance
	 */
	public Item[] getAllSiocReply_Inverse() {
		return (Item[]) getAll_Inverse(Item.REPLY, this.getResource(), Item.class);
	}

	/**
	 * add 'Reply'-Inverse
	 * @param value
	 */
	public void addSiocReply_Inverse(Item value) {
		value.add( Item.REPLY ,this);
	}


	/**
	 * @return all A's that have a relation 'Replyof' to this Item instance
	 */
	public Item[] getAllSiocReplyof_Inverse() {
		return (Item[]) getAll_Inverse(Item.REPLYOF, this.getResource(), Item.class);
	}

	/**
	 * add 'Replyof'-Inverse
	 * @param value
	 */
	public void addSiocReplyof_Inverse(Item value) {
		value.add( Item.REPLYOF ,this);
	}


	/**
	 * @return all A's that have a relation 'Nextversion' to this Item instance
	 */
	public Item[] getAllSiocNextversion_Inverse() {
		return (Item[]) getAll_Inverse(Item.NEXTVERSION, this.getResource(), Item.class);
	}

	/**
	 * add 'Nextversion'-Inverse
	 * @param value
	 */
	public void addSiocNextversion_Inverse(Item value) {
		value.add( Item.NEXTVERSION ,this);
	}


	/**
	 * @return all A's that have a relation 'Creatorof' to this Item instance
	 */
	public User[] getAllSiocCreatorof_Inverse() {
		return (User[]) getAll_Inverse(User.CREATOROF, this.getResource(), User.class);
	}

	/**
	 * add 'Creatorof'-Inverse
	 * @param value
	 */
	public void addSiocCreatorof_Inverse(User value) {
		value.add( User.CREATOROF ,this);
	}


	/**
	 * @return all A's that have a relation 'Modifierof' to this Item instance
	 */
	public User[] getAllSiocModifierof_Inverse() {
		return (User[]) getAll_Inverse(User.MODIFIEROF, this.getResource(), User.class);
	}

	/**
	 * add 'Modifierof'-Inverse
	 * @param value
	 */
	public void addSiocModifierof_Inverse(User value) {
		value.add( User.MODIFIEROF ,this);
	}



    /**
     * Schema Comment: Links to a previous revision of this Item or Post.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocPreviousversion() {
		return (Item) get(PREVIOUSVERSION, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Links to a previous revision of this Item or Post.
	 */
	public void setSiocPreviousversion( Item value ) {
		set(PREVIOUSVERSION, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Links to a previous revision of this Item or Post.
	 */
	public void removeSiocPreviousversion( Item value  ) {
		remove(PREVIOUSVERSION, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, PREVIOUSVERSION, value)
	 */
	public boolean hasSiocPreviousversion( Item value) {
		return hasValue(PREVIOUSVERSION, value);
	}

	/**
	 * @return true if the model contains a statement (this, PREVIOUSVERSION, *)
	 */
	public boolean hasSiocPreviousversion() {
		return hasValue(PREVIOUSVERSION);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Links to a previous revision of this Item or Post.
	 */
	public void addSiocPreviousversion( Item value  ) {
		add(PREVIOUSVERSION, value );
	}

	/**
	 * @return all values
     * Schema Comment: Links to a previous revision of this Item or Post.
	 */
	public Item[] getAllSiocPreviousversion() {
		return (Item[]) getAll(PREVIOUSVERSION, Item.class);
	}
  

    /**
     * Schema Comment: Previous Item or Post in a given Container sorted by date.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocPreviousbydate() {
		return (Item) get(PREVIOUSBYDATE, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Previous Item or Post in a given Container sorted by date.
	 */
	public void setSiocPreviousbydate( Item value ) {
		set(PREVIOUSBYDATE, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Previous Item or Post in a given Container sorted by date.
	 */
	public void removeSiocPreviousbydate( Item value  ) {
		remove(PREVIOUSBYDATE, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, PREVIOUSBYDATE, value)
	 */
	public boolean hasSiocPreviousbydate( Item value) {
		return hasValue(PREVIOUSBYDATE, value);
	}

	/**
	 * @return true if the model contains a statement (this, PREVIOUSBYDATE, *)
	 */
	public boolean hasSiocPreviousbydate() {
		return hasValue(PREVIOUSBYDATE);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Previous Item or Post in a given Container sorted by date.
	 */
	public void addSiocPreviousbydate( Item value  ) {
		add(PREVIOUSBYDATE, value );
	}

	/**
	 * @return all values
     * Schema Comment: Previous Item or Post in a given Container sorted by date.
	 */
	public Item[] getAllSiocPreviousbydate() {
		return (Item[]) getAll(PREVIOUSBYDATE, Item.class);
	}
  

    /**
     * Schema Comment: The Container which this Item belongs to.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Container getSiocContainer() {
		return (Container) get(CONTAINER, Container.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The Container which this Item belongs to.
	 */
	public void setSiocContainer( Container value ) {
		set(CONTAINER, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The Container which this Item belongs to.
	 */
	public void removeSiocContainer( Container value  ) {
		remove(CONTAINER, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CONTAINER, value)
	 */
	public boolean hasSiocContainer( Container value) {
		return hasValue(CONTAINER, value);
	}

	/**
	 * @return true if the model contains a statement (this, CONTAINER, *)
	 */
	public boolean hasSiocContainer() {
		return hasValue(CONTAINER);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The Container which this Item belongs to.
	 */
	public void addSiocContainer( Container value  ) {
		add(CONTAINER, value );
	}

	/**
	 * @return all values
     * Schema Comment: The Container which this Item belongs to.
	 */
	public Container[] getAllSiocContainer() {
		return (Container[]) getAll(CONTAINER, Container.class);
	}
  

    /**
     * Schema Comment: Next Item or Post in a given Container sorted by date.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocNextbydate() {
		return (Item) get(NEXTBYDATE, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Next Item or Post in a given Container sorted by date.
	 */
	public void setSiocNextbydate( Item value ) {
		set(NEXTBYDATE, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Next Item or Post in a given Container sorted by date.
	 */
	public void removeSiocNextbydate( Item value  ) {
		remove(NEXTBYDATE, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, NEXTBYDATE, value)
	 */
	public boolean hasSiocNextbydate( Item value) {
		return hasValue(NEXTBYDATE, value);
	}

	/**
	 * @return true if the model contains a statement (this, NEXTBYDATE, *)
	 */
	public boolean hasSiocNextbydate() {
		return hasValue(NEXTBYDATE);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Next Item or Post in a given Container sorted by date.
	 */
	public void addSiocNextbydate( Item value  ) {
		add(NEXTBYDATE, value );
	}

	/**
	 * @return all values
     * Schema Comment: Next Item or Post in a given Container sorted by date.
	 */
	public Item[] getAllSiocNextbydate() {
		return (Item[]) getAll(NEXTBYDATE, Item.class);
	}
  

    /**
     * Schema Comment: Points to an Item or Post that is a reply or response to this Item or Post.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocReply() {
		return (Item) get(REPLY, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Points to an Item or Post that is a reply or response to this Item or Post.
	 */
	public void setSiocReply( Item value ) {
		set(REPLY, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Points to an Item or Post that is a reply or response to this Item or Post.
	 */
	public void removeSiocReply( Item value  ) {
		remove(REPLY, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, REPLY, value)
	 */
	public boolean hasSiocReply( Item value) {
		return hasValue(REPLY, value);
	}

	/**
	 * @return true if the model contains a statement (this, REPLY, *)
	 */
	public boolean hasSiocReply() {
		return hasValue(REPLY);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Points to an Item or Post that is a reply or response to this Item or Post.
	 */
	public void addSiocReply( Item value  ) {
		add(REPLY, value );
	}

	/**
	 * @return all values
     * Schema Comment: Points to an Item or Post that is a reply or response to this Item or Post.
	 */
	public Item[] getAllSiocReply() {
		return (Item[]) getAll(REPLY, Item.class);
	}
  

    /**
     * Schema Comment: Links to an Item or Post which this Item or Post is a reply to.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocReplyof() {
		return (Item) get(REPLYOF, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Links to an Item or Post which this Item or Post is a reply to.
	 */
	public void setSiocReplyof( Item value ) {
		set(REPLYOF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Links to an Item or Post which this Item or Post is a reply to.
	 */
	public void removeSiocReplyof( Item value  ) {
		remove(REPLYOF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, REPLYOF, value)
	 */
	public boolean hasSiocReplyof( Item value) {
		return hasValue(REPLYOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, REPLYOF, *)
	 */
	public boolean hasSiocReplyof() {
		return hasValue(REPLYOF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Links to an Item or Post which this Item or Post is a reply to.
	 */
	public void addSiocReplyof( Item value  ) {
		add(REPLYOF, value );
	}

	/**
	 * @return all values
     * Schema Comment: Links to an Item or Post which this Item or Post is a reply to.
	 */
	public Item[] getAllSiocReplyof() {
		return (Item[]) getAll(REPLYOF, Item.class);
	}
  

    /**
     * Schema Comment: This is the User who made this Item.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public User getSiocCreator() {
		return (User) get(CREATOR, User.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: This is the User who made this Item.
	 */
	public void setSiocCreator( User value ) {
		set(CREATOR, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: This is the User who made this Item.
	 */
	public void removeSiocCreator( User value  ) {
		remove(CREATOR, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CREATOR, value)
	 */
	public boolean hasSiocCreator( User value) {
		return hasValue(CREATOR, value);
	}

	/**
	 * @return true if the model contains a statement (this, CREATOR, *)
	 */
	public boolean hasSiocCreator() {
		return hasValue(CREATOR);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: This is the User who made this Item.
	 */
	public void addSiocCreator( User value  ) {
		add(CREATOR, value );
	}

	/**
	 * @return all values
     * Schema Comment: This is the User who made this Item.
	 */
	public User[] getAllSiocCreator() {
		return (User[]) getAll(CREATOR, User.class);
	}
  

    /**
     * Schema Comment: The IP address used when creating this Item. This can be associated with a creator. Some wiki articles list the IP addresses for the creator or modifiers when the usernames are absent.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getSiocIpaddress() {
		return (java.lang.String) get(IPADDRESS, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The IP address used when creating this Item. This can be associated with a creator. Some wiki articles list the IP addresses for the creator or modifiers when the usernames are absent.
	 */
	public void setSiocIpaddress( java.lang.String value ) {
		set(IPADDRESS, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The IP address used when creating this Item. This can be associated with a creator. Some wiki articles list the IP addresses for the creator or modifiers when the usernames are absent.
	 */
	public void removeSiocIpaddress( java.lang.String value  ) {
		remove(IPADDRESS, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, IPADDRESS, value)
	 */
	public boolean hasSiocIpaddress( java.lang.String value) {
		return hasValue(IPADDRESS, value);
	}

	/**
	 * @return true if the model contains a statement (this, IPADDRESS, *)
	 */
	public boolean hasSiocIpaddress() {
		return hasValue(IPADDRESS);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The IP address used when creating this Item. This can be associated with a creator. Some wiki articles list the IP addresses for the creator or modifiers when the usernames are absent.
	 */
	public void addSiocIpaddress( java.lang.String value  ) {
		add(IPADDRESS, value );
	}

	/**
	 * @return all values
     * Schema Comment: The IP address used when creating this Item. This can be associated with a creator. Some wiki articles list the IP addresses for the creator or modifiers when the usernames are absent.
	 */
	public java.lang.String[] getAllSiocIpaddress() {
		return (java.lang.String[]) getAll(IPADDRESS, java.lang.String.class);
	}
  

    /**
     * Schema Comment: Links to the next revision of this Item or Post.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocNextversion() {
		return (Item) get(NEXTVERSION, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Links to the next revision of this Item or Post.
	 */
	public void setSiocNextversion( Item value ) {
		set(NEXTVERSION, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Links to the next revision of this Item or Post.
	 */
	public void removeSiocNextversion( Item value  ) {
		remove(NEXTVERSION, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, NEXTVERSION, value)
	 */
	public boolean hasSiocNextversion( Item value) {
		return hasValue(NEXTVERSION, value);
	}

	/**
	 * @return true if the model contains a statement (this, NEXTVERSION, *)
	 */
	public boolean hasSiocNextversion() {
		return hasValue(NEXTVERSION);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Links to the next revision of this Item or Post.
	 */
	public void addSiocNextversion( Item value  ) {
		add(NEXTVERSION, value );
	}

	/**
	 * @return all values
     * Schema Comment: Links to the next revision of this Item or Post.
	 */
	public Item[] getAllSiocNextversion() {
		return (Item[]) getAll(NEXTVERSION, Item.class);
	}
  

    /**
     * Schema Comment: A User who has modified this Item.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public User getSiocModifier() {
		return (User) get(MODIFIER, User.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A User who has modified this Item.
	 */
	public void setSiocModifier( User value ) {
		set(MODIFIER, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A User who has modified this Item.
	 */
	public void removeSiocModifier( User value  ) {
		remove(MODIFIER, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, MODIFIER, value)
	 */
	public boolean hasSiocModifier( User value) {
		return hasValue(MODIFIER, value);
	}

	/**
	 * @return true if the model contains a statement (this, MODIFIER, *)
	 */
	public boolean hasSiocModifier() {
		return hasValue(MODIFIER);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A User who has modified this Item.
	 */
	public void addSiocModifier( User value  ) {
		add(MODIFIER, value );
	}

	/**
	 * @return all values
     * Schema Comment: A User who has modified this Item.
	 */
	public User[] getAllSiocModifier() {
		return (User[]) getAll(MODIFIER, User.class);
	}
   
}

  
  
