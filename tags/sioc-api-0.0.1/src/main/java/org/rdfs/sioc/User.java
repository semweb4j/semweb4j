
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 18:30
 */
package org.rdfs.sioc;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 18:30
 * This class manages access to these properties:
 * <ul>
 *   <li> Emailsha1 </li>
 *   <li> Accountof </li>
 *   <li> Ownerof </li>
 *   <li> Avatar </li>
 *   <li> Moderatorof </li>
 *   <li> Email </li>
 *   <li> Creatorof </li>
 *   <li> Memberof </li>
 *   <li> Subscriberof </li>
 *   <li> Administratorof </li>
 *   <li> Function </li>
 *   <li> Modifierof </li>
 * </ul>
 * Schema Comment: An online account (User) in an online community site.
 */
public class User extends OnlineAccount {

    /** http://rdfs.org/sioc/ns#User */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#User", false);

    /** http://rdfs.org/sioc/ns#email_sha1 */
	public static final URI EMAILSHA1 = new URIImpl("http://rdfs.org/sioc/ns#email_sha1",false);

    /** http://rdfs.org/sioc/ns#account_of */
	public static final URI ACCOUNTOF = new URIImpl("http://rdfs.org/sioc/ns#account_of",false);

    /** http://rdfs.org/sioc/ns#owner_of */
	public static final URI OWNEROF = new URIImpl("http://rdfs.org/sioc/ns#owner_of",false);

    /** http://rdfs.org/sioc/ns#avatar */
	public static final URI AVATAR = new URIImpl("http://rdfs.org/sioc/ns#avatar",false);

    /** http://rdfs.org/sioc/ns#moderator_of */
	public static final URI MODERATOROF = new URIImpl("http://rdfs.org/sioc/ns#moderator_of",false);

    /** http://rdfs.org/sioc/ns#email */
	public static final URI EMAIL = new URIImpl("http://rdfs.org/sioc/ns#email",false);

    /** http://rdfs.org/sioc/ns#creator_of */
	public static final URI CREATOROF = new URIImpl("http://rdfs.org/sioc/ns#creator_of",false);

    /** http://rdfs.org/sioc/ns#member_of */
	public static final URI MEMBEROF = new URIImpl("http://rdfs.org/sioc/ns#member_of",false);

    /** http://rdfs.org/sioc/ns#subscriber_of */
	public static final URI SUBSCRIBEROF = new URIImpl("http://rdfs.org/sioc/ns#subscriber_of",false);

    /** http://rdfs.org/sioc/ns#administrator_of */
	public static final URI ADMINISTRATOROF = new URIImpl("http://rdfs.org/sioc/ns#administrator_of",false);

    /** http://rdfs.org/sioc/ns#has_function */
	public static final URI FUNCTION = new URIImpl("http://rdfs.org/sioc/ns#has_function",false);

    /** http://rdfs.org/sioc/ns#modifier_of */
	public static final URI MODIFIEROF = new URIImpl("http://rdfs.org/sioc/ns#modifier_of",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#email_sha1",false),
      new URIImpl("http://rdfs.org/sioc/ns#account_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#owner_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#avatar",false),
      new URIImpl("http://rdfs.org/sioc/ns#moderator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#email",false),
      new URIImpl("http://rdfs.org/sioc/ns#creator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#member_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#subscriber_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#administrator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_function",false),
      new URIImpl("http://rdfs.org/sioc/ns#modifier_of",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected User ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public User ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public User ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public User ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public User ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public User ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of User or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static User getInstance(Model model, URI uri) throws Exception {
		return (User) getInstance(model, uri, User.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public User[] getAllInstances() {
		return (User[]) getAllInstances(super.model, User.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static User[] getAllInstances(Model model) {
		return (User[]) getAllInstances(model, User.class);
	}

	/**
	 * @return all A's that have a relation 'Administrator' to this User instance
	 */
	public Site[] getAllSiocAdministrator_Inverse() {
		return (Site[]) getAll_Inverse(Site.ADMINISTRATOR, this.getResource(), Site.class);
	}

	/**
	 * add 'Administrator'-Inverse
	 * @param value
	 */
	public void addSiocAdministrator_Inverse(Site value) {
		value.add( Site.ADMINISTRATOR ,this);
	}


	/**
	 * @return all A's that have a relation 'Subscriber' to this User instance
	 */
	public Container[] getAllSiocSubscriber_Inverse() {
		return (Container[]) getAll_Inverse(Container.SUBSCRIBER, this.getResource(), Container.class);
	}

	/**
	 * add 'Subscriber'-Inverse
	 * @param value
	 */
	public void addSiocSubscriber_Inverse(Container value) {
		value.add( Container.SUBSCRIBER ,this);
	}


	/**
	 * @return all A's that have a relation 'Owner' to this User instance
	 */
	public Container[] getAllSiocOwner_Inverse() {
		return (Container[]) getAll_Inverse(Container.OWNER, this.getResource(), Container.class);
	}

	/**
	 * add 'Owner'-Inverse
	 * @param value
	 */
	public void addSiocOwner_Inverse(Container value) {
		value.add( Container.OWNER ,this);
	}


	/**
	 * @return all A's that have a relation 'Member' to this User instance
	 */
	public Usergroup[] getAllSiocMember_Inverse() {
		return (Usergroup[]) getAll_Inverse(Usergroup.MEMBER, this.getResource(), Usergroup.class);
	}

	/**
	 * add 'Member'-Inverse
	 * @param value
	 */
	public void addSiocMember_Inverse(Usergroup value) {
		value.add( Usergroup.MEMBER ,this);
	}


	/**
	 * @return all A's that have a relation 'Functionof' to this User instance
	 */
	public Role[] getAllSiocFunctionof_Inverse() {
		return (Role[]) getAll_Inverse(Role.FUNCTIONOF, this.getResource(), Role.class);
	}

	/**
	 * add 'Functionof'-Inverse
	 * @param value
	 */
	public void addSiocFunctionof_Inverse(Role value) {
		value.add( Role.FUNCTIONOF ,this);
	}


	/**
	 * @return all A's that have a relation 'Creator' to this User instance
	 */
	public Item[] getAllSiocCreator_Inverse() {
		return (Item[]) getAll_Inverse(Item.CREATOR, this.getResource(), Item.class);
	}

	/**
	 * add 'Creator'-Inverse
	 * @param value
	 */
	public void addSiocCreator_Inverse(Item value) {
		value.add( Item.CREATOR ,this);
	}


	/**
	 * @return all A's that have a relation 'Modifier' to this User instance
	 */
	public Item[] getAllSiocModifier_Inverse() {
		return (Item[]) getAll_Inverse(Item.MODIFIER, this.getResource(), Item.class);
	}

	/**
	 * add 'Modifier'-Inverse
	 * @param value
	 */
	public void addSiocModifier_Inverse(Item value) {
		value.add( Item.MODIFIER ,this);
	}


	/**
	 * @return all A's that have a relation 'Moderator' to this User instance
	 */
	public Forum[] getAllSiocModerator_Inverse() {
		return (Forum[]) getAll_Inverse(Forum.MODERATOR, this.getResource(), Forum.class);
	}

	/**
	 * add 'Moderator'-Inverse
	 * @param value
	 */
	public void addSiocModerator_Inverse(Forum value) {
		value.add( Forum.MODERATOR ,this);
	}



    /**
     * Schema Comment: An electronic mail address of the User, encoded using SHA1.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getSiocEmailsha1() {
		return (java.lang.String) get(EMAILSHA1, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: An electronic mail address of the User, encoded using SHA1.
	 */
	public void setSiocEmailsha1( java.lang.String value ) {
		set(EMAILSHA1, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: An electronic mail address of the User, encoded using SHA1.
	 */
	public void removeSiocEmailsha1( java.lang.String value  ) {
		remove(EMAILSHA1, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, EMAILSHA1, value)
	 */
	public boolean hasSiocEmailsha1( java.lang.String value) {
		return hasValue(EMAILSHA1, value);
	}

	/**
	 * @return true if the model contains a statement (this, EMAILSHA1, *)
	 */
	public boolean hasSiocEmailsha1() {
		return hasValue(EMAILSHA1);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: An electronic mail address of the User, encoded using SHA1.
	 */
	public void addSiocEmailsha1( java.lang.String value  ) {
		add(EMAILSHA1, value );
	}

	/**
	 * @return all values
     * Schema Comment: An electronic mail address of the User, encoded using SHA1.
	 */
	public java.lang.String[] getAllSiocEmailsha1() {
		return (java.lang.String[]) getAll(EMAILSHA1, java.lang.String.class);
	}
  

    /**
     * Schema Comment: Refers to the foaf:Agent (or foaf:Person) who owns this sioc:User online account.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Agent getSiocAccountof() {
		return (Agent) get(ACCOUNTOF, Agent.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Refers to the foaf:Agent (or foaf:Person) who owns this sioc:User online account.
	 */
	public void setSiocAccountof( Agent value ) {
		set(ACCOUNTOF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Refers to the foaf:Agent (or foaf:Person) who owns this sioc:User online account.
	 */
	public void removeSiocAccountof( Agent value  ) {
		remove(ACCOUNTOF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, ACCOUNTOF, value)
	 */
	public boolean hasSiocAccountof( Agent value) {
		return hasValue(ACCOUNTOF, value);
	}

	/**
	 * @return true if the model contains a statement (this, ACCOUNTOF, *)
	 */
	public boolean hasSiocAccountof() {
		return hasValue(ACCOUNTOF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Refers to the foaf:Agent (or foaf:Person) who owns this sioc:User online account.
	 */
	public void addSiocAccountof( Agent value  ) {
		add(ACCOUNTOF, value );
	}

	/**
	 * @return all values
     * Schema Comment: Refers to the foaf:Agent (or foaf:Person) who owns this sioc:User online account.
	 */
	public Agent[] getAllSiocAccountof() {
		return (Agent[]) getAll(ACCOUNTOF, Agent.class);
	}
  

    /**
     * Schema Comment: A Container owned by a particular User, for example, a weblog or image gallery.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Container getSiocOwnerof() {
		return (Container) get(OWNEROF, Container.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Container owned by a particular User, for example, a weblog or image gallery.
	 */
	public void setSiocOwnerof( Container value ) {
		set(OWNEROF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Container owned by a particular User, for example, a weblog or image gallery.
	 */
	public void removeSiocOwnerof( Container value  ) {
		remove(OWNEROF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, OWNEROF, value)
	 */
	public boolean hasSiocOwnerof( Container value) {
		return hasValue(OWNEROF, value);
	}

	/**
	 * @return true if the model contains a statement (this, OWNEROF, *)
	 */
	public boolean hasSiocOwnerof() {
		return hasValue(OWNEROF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Container owned by a particular User, for example, a weblog or image gallery.
	 */
	public void addSiocOwnerof( Container value  ) {
		add(OWNEROF, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Container owned by a particular User, for example, a weblog or image gallery.
	 */
	public Container[] getAllSiocOwnerof() {
		return (Container[]) getAll(OWNEROF, Container.class);
	}
  

    /**
     * Schema Comment: An image or depiction used to represent this User.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocAvatar() {
		return (Thing) get(AVATAR, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: An image or depiction used to represent this User.
	 */
	public void setSiocAvatar( Thing value ) {
		set(AVATAR, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: An image or depiction used to represent this User.
	 */
	public void removeSiocAvatar( Thing value  ) {
		remove(AVATAR, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, AVATAR, value)
	 */
	public boolean hasSiocAvatar( Thing value) {
		return hasValue(AVATAR, value);
	}

	/**
	 * @return true if the model contains a statement (this, AVATAR, *)
	 */
	public boolean hasSiocAvatar() {
		return hasValue(AVATAR);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: An image or depiction used to represent this User.
	 */
	public void addSiocAvatar( Thing value  ) {
		add(AVATAR, value );
	}

	/**
	 * @return all values
     * Schema Comment: An image or depiction used to represent this User.
	 */
	public Thing[] getAllSiocAvatar() {
		return (Thing[]) getAll(AVATAR, Thing.class);
	}
  

    /**
     * Schema Comment: A Forum that User is a moderator of.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Forum getSiocModeratorof() {
		return (Forum) get(MODERATOROF, Forum.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Forum that User is a moderator of.
	 */
	public void setSiocModeratorof( Forum value ) {
		set(MODERATOROF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Forum that User is a moderator of.
	 */
	public void removeSiocModeratorof( Forum value  ) {
		remove(MODERATOROF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, MODERATOROF, value)
	 */
	public boolean hasSiocModeratorof( Forum value) {
		return hasValue(MODERATOROF, value);
	}

	/**
	 * @return true if the model contains a statement (this, MODERATOROF, *)
	 */
	public boolean hasSiocModeratorof() {
		return hasValue(MODERATOROF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Forum that User is a moderator of.
	 */
	public void addSiocModeratorof( Forum value  ) {
		add(MODERATOROF, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Forum that User is a moderator of.
	 */
	public Forum[] getAllSiocModeratorof() {
		return (Forum[]) getAll(MODERATOROF, Forum.class);
	}
  

    /**
     * Schema Comment: An electronic mail address of the User.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocEmail() {
		return (Thing) get(EMAIL, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: An electronic mail address of the User.
	 */
	public void setSiocEmail( Thing value ) {
		set(EMAIL, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: An electronic mail address of the User.
	 */
	public void removeSiocEmail( Thing value  ) {
		remove(EMAIL, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, EMAIL, value)
	 */
	public boolean hasSiocEmail( Thing value) {
		return hasValue(EMAIL, value);
	}

	/**
	 * @return true if the model contains a statement (this, EMAIL, *)
	 */
	public boolean hasSiocEmail() {
		return hasValue(EMAIL);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: An electronic mail address of the User.
	 */
	public void addSiocEmail( Thing value  ) {
		add(EMAIL, value );
	}

	/**
	 * @return all values
     * Schema Comment: An electronic mail address of the User.
	 */
	public Thing[] getAllSiocEmail() {
		return (Thing[]) getAll(EMAIL, Thing.class);
	}
  

    /**
     * Schema Comment: An Item that the User is a creator of.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocCreatorof() {
		return (Item) get(CREATOROF, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: An Item that the User is a creator of.
	 */
	public void setSiocCreatorof( Item value ) {
		set(CREATOROF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: An Item that the User is a creator of.
	 */
	public void removeSiocCreatorof( Item value  ) {
		remove(CREATOROF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CREATOROF, value)
	 */
	public boolean hasSiocCreatorof( Item value) {
		return hasValue(CREATOROF, value);
	}

	/**
	 * @return true if the model contains a statement (this, CREATOROF, *)
	 */
	public boolean hasSiocCreatorof() {
		return hasValue(CREATOROF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: An Item that the User is a creator of.
	 */
	public void addSiocCreatorof( Item value  ) {
		add(CREATOROF, value );
	}

	/**
	 * @return all values
     * Schema Comment: An Item that the User is a creator of.
	 */
	public Item[] getAllSiocCreatorof() {
		return (Item[]) getAll(CREATOROF, Item.class);
	}
  

    /**
     * Schema Comment: A Usergroup that this User is a member of.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Usergroup getSiocMemberof() {
		return (Usergroup) get(MEMBEROF, Usergroup.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Usergroup that this User is a member of.
	 */
	public void setSiocMemberof( Usergroup value ) {
		set(MEMBEROF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Usergroup that this User is a member of.
	 */
	public void removeSiocMemberof( Usergroup value  ) {
		remove(MEMBEROF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, MEMBEROF, value)
	 */
	public boolean hasSiocMemberof( Usergroup value) {
		return hasValue(MEMBEROF, value);
	}

	/**
	 * @return true if the model contains a statement (this, MEMBEROF, *)
	 */
	public boolean hasSiocMemberof() {
		return hasValue(MEMBEROF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Usergroup that this User is a member of.
	 */
	public void addSiocMemberof( Usergroup value  ) {
		add(MEMBEROF, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Usergroup that this User is a member of.
	 */
	public Usergroup[] getAllSiocMemberof() {
		return (Usergroup[]) getAll(MEMBEROF, Usergroup.class);
	}
  

    /**
     * Schema Comment: A Container that a User is subscribed to.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Container getSiocSubscriberof() {
		return (Container) get(SUBSCRIBEROF, Container.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Container that a User is subscribed to.
	 */
	public void setSiocSubscriberof( Container value ) {
		set(SUBSCRIBEROF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Container that a User is subscribed to.
	 */
	public void removeSiocSubscriberof( Container value  ) {
		remove(SUBSCRIBEROF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SUBSCRIBEROF, value)
	 */
	public boolean hasSiocSubscriberof( Container value) {
		return hasValue(SUBSCRIBEROF, value);
	}

	/**
	 * @return true if the model contains a statement (this, SUBSCRIBEROF, *)
	 */
	public boolean hasSiocSubscriberof() {
		return hasValue(SUBSCRIBEROF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Container that a User is subscribed to.
	 */
	public void addSiocSubscriberof( Container value  ) {
		add(SUBSCRIBEROF, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Container that a User is subscribed to.
	 */
	public Container[] getAllSiocSubscriberof() {
		return (Container[]) getAll(SUBSCRIBEROF, Container.class);
	}
  

    /**
     * Schema Comment: A Site that User is an administrator of.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Site getSiocAdministratorof() {
		return (Site) get(ADMINISTRATOROF, Site.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Site that User is an administrator of.
	 */
	public void setSiocAdministratorof( Site value ) {
		set(ADMINISTRATOROF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Site that User is an administrator of.
	 */
	public void removeSiocAdministratorof( Site value  ) {
		remove(ADMINISTRATOROF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, ADMINISTRATOROF, value)
	 */
	public boolean hasSiocAdministratorof( Site value) {
		return hasValue(ADMINISTRATOROF, value);
	}

	/**
	 * @return true if the model contains a statement (this, ADMINISTRATOROF, *)
	 */
	public boolean hasSiocAdministratorof() {
		return hasValue(ADMINISTRATOROF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Site that User is an administrator of.
	 */
	public void addSiocAdministratorof( Site value  ) {
		add(ADMINISTRATOROF, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Site that User is an administrator of.
	 */
	public Site[] getAllSiocAdministratorof() {
		return (Site[]) getAll(ADMINISTRATOROF, Site.class);
	}
  

    /**
     * Schema Comment: A Role that this User has.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Role getSiocFunction() {
		return (Role) get(FUNCTION, Role.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Role that this User has.
	 */
	public void setSiocFunction( Role value ) {
		set(FUNCTION, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Role that this User has.
	 */
	public void removeSiocFunction( Role value  ) {
		remove(FUNCTION, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, FUNCTION, value)
	 */
	public boolean hasSiocFunction( Role value) {
		return hasValue(FUNCTION, value);
	}

	/**
	 * @return true if the model contains a statement (this, FUNCTION, *)
	 */
	public boolean hasSiocFunction() {
		return hasValue(FUNCTION);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Role that this User has.
	 */
	public void addSiocFunction( Role value  ) {
		add(FUNCTION, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Role that this User has.
	 */
	public Role[] getAllSiocFunction() {
		return (Role[]) getAll(FUNCTION, Role.class);
	}
  

    /**
     * Schema Comment: An Item that this User has modified.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Item getSiocModifierof() {
		return (Item) get(MODIFIEROF, Item.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: An Item that this User has modified.
	 */
	public void setSiocModifierof( Item value ) {
		set(MODIFIEROF, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: An Item that this User has modified.
	 */
	public void removeSiocModifierof( Item value  ) {
		remove(MODIFIEROF, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, MODIFIEROF, value)
	 */
	public boolean hasSiocModifierof( Item value) {
		return hasValue(MODIFIEROF, value);
	}

	/**
	 * @return true if the model contains a statement (this, MODIFIEROF, *)
	 */
	public boolean hasSiocModifierof() {
		return hasValue(MODIFIEROF);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: An Item that this User has modified.
	 */
	public void addSiocModifierof( Item value  ) {
		add(MODIFIEROF, value );
	}

	/**
	 * @return all values
     * Schema Comment: An Item that this User has modified.
	 */
	public Item[] getAllSiocModifierof() {
		return (Item[]) getAll(MODIFIEROF, Item.class);
	}
   
}

  
  
