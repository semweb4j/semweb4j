
/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 785 2007-05-31 15:47:01Z voelkel $) on 01.06.07 18:30
 */
package org.rdfs.sioc;

import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.exception.ModelRuntimeException;

import org.ontoware.rdfreactor.runtime.RDFDataException;


/**
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 01.06.07 18:30
 * This class manages access to these properties:
 * <ul>
 *   <li> Numreplies </li>
 *   <li> Attachment </li>
 *   <li> Relatedto </li>
 *   <li> Sibling </li>
 *   <li> Note </li>
 *   <li> Content </li>
 * </ul>
 * Schema Comment: An article or message that can be posted to a Forum.
 */
public class Post extends Item {

    /** http://rdfs.org/sioc/ns#Post */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#Post", false);

    /** http://rdfs.org/sioc/ns#num_replies */
	public static final URI NUMREPLIES = new URIImpl("http://rdfs.org/sioc/ns#num_replies",false);

    /** http://rdfs.org/sioc/ns#attachment */
	public static final URI ATTACHMENT = new URIImpl("http://rdfs.org/sioc/ns#attachment",false);

    /** http://rdfs.org/sioc/ns#related_to */
	public static final URI RELATEDTO = new URIImpl("http://rdfs.org/sioc/ns#related_to",false);

    /** http://rdfs.org/sioc/ns#sibling */
	public static final URI SIBLING = new URIImpl("http://rdfs.org/sioc/ns#sibling",false);

    /** http://rdfs.org/sioc/ns#note */
	public static final URI NOTE = new URIImpl("http://rdfs.org/sioc/ns#note",false);

    /** http://rdfs.org/sioc/ns#content */
	public static final URI CONTENT = new URIImpl("http://rdfs.org/sioc/ns#content",false);

    /** all property-URIs with this class as domain */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#num_replies",false),
      new URIImpl("http://rdfs.org/sioc/ns#attachment",false),
      new URIImpl("http://rdfs.org/sioc/ns#related_to",false),
      new URIImpl("http://rdfs.org/sioc/ns#sibling",false),
      new URIImpl("http://rdfs.org/sioc/ns#note",false),
      new URIImpl("http://rdfs.org/sioc/ns#content",false) 
    };

	
	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	protected Post ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 */
	public Post ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uri URI of this instance
	 */
	public Post ( Model model, URI uri ) {
		this(model, uri, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString A URI of this instance, represented as a String
	 * @throws ModelRuntimeException if URI syntax is wrong
	 */
	public Post ( Model model, String uriString ) throws ModelRuntimeException {
		this(model, new URIImpl(uriString), true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 */
	public Post ( Model model, BlankNode bnode ) {
		this(model, bnode, true);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * The statement (this, rdf:type, TYPE) is written to the model
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 */
	public Post ( Model model ) {
		this(model, model.newRandomUniqueURI(), true);
	}


    ///////////////////////////////////////////////////////////////////
    // getters, setters, ...

	/**
	 * @param model RDF2Go model
	 * @param uri instance identifier
	 * @return an instance of Post or null if none existst
	 * @throws Exception if Model causes problems
	 */
	public static Post getInstance(Model model, URI uri) throws Exception {
		return (Post) getInstance(model, uri, Post.class);
	}

	/**
	 * @param model
	 * @param uri
	 * @return true if uri is an instance of this class in the model
	 */
	public static boolean hasInstance(Model model, URI uri) {
		return hasInstance(model, uri, RDFS_CLASS);
	}

	/**
	 * @return all instances of this class
	 */
	public Post[] getAllInstances() {
		return (Post[]) getAllInstances(super.model, Post.class);
	}

	/**
	 * @return all instances of this class in the given Model
	 * @param model an RDF2Go model
	 */
	public static Post[] getAllInstances(Model model) {
		return (Post[]) getAllInstances(model, Post.class);
	}

	/**
	 * @return all A's that have a relation 'Relatedto' to this Post instance
	 */
	public Post[] getAllSiocRelatedto_Inverse() {
		return (Post[]) getAll_Inverse(Post.RELATEDTO, this.getResource(), Post.class);
	}

	/**
	 * add 'Relatedto'-Inverse
	 * @param value
	 */
	public void addSiocRelatedto_Inverse(Post value) {
		value.add( Post.RELATEDTO ,this);
	}


	/**
	 * @return all A's that have a relation 'Sibling' to this Post instance
	 */
	public Post[] getAllSiocSibling_Inverse() {
		return (Post[]) getAll_Inverse(Post.SIBLING, this.getResource(), Post.class);
	}

	/**
	 * add 'Sibling'-Inverse
	 * @param value
	 */
	public void addSiocSibling_Inverse(Post value) {
		value.add( Post.SIBLING ,this);
	}



    /**
     * Schema Comment: The number of replies that this Post has. Useful for where the reply structure is absent.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.Integer getSiocNumreplies() {
		return (java.lang.Integer) get(NUMREPLIES, java.lang.Integer.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The number of replies that this Post has. Useful for where the reply structure is absent.
	 */
	public void setSiocNumreplies( java.lang.Integer value ) {
		set(NUMREPLIES, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The number of replies that this Post has. Useful for where the reply structure is absent.
	 */
	public void removeSiocNumreplies( java.lang.Integer value  ) {
		remove(NUMREPLIES, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, NUMREPLIES, value)
	 */
	public boolean hasSiocNumreplies( java.lang.Integer value) {
		return hasValue(NUMREPLIES, value);
	}

	/**
	 * @return true if the model contains a statement (this, NUMREPLIES, *)
	 */
	public boolean hasSiocNumreplies() {
		return hasValue(NUMREPLIES);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The number of replies that this Post has. Useful for where the reply structure is absent.
	 */
	public void addSiocNumreplies( java.lang.Integer value  ) {
		add(NUMREPLIES, value );
	}

	/**
	 * @return all values
     * Schema Comment: The number of replies that this Post has. Useful for where the reply structure is absent.
	 */
	public java.lang.Integer[] getAllSiocNumreplies() {
		return (java.lang.Integer[]) getAll(NUMREPLIES, java.lang.Integer.class);
	}
  

    /**
     * Schema Comment: The URI of a file attached to a Post.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Thing getSiocAttachment() {
		return (Thing) get(ATTACHMENT, Thing.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The URI of a file attached to a Post.
	 */
	public void setSiocAttachment( Thing value ) {
		set(ATTACHMENT, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The URI of a file attached to a Post.
	 */
	public void removeSiocAttachment( Thing value  ) {
		remove(ATTACHMENT, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, ATTACHMENT, value)
	 */
	public boolean hasSiocAttachment( Thing value) {
		return hasValue(ATTACHMENT, value);
	}

	/**
	 * @return true if the model contains a statement (this, ATTACHMENT, *)
	 */
	public boolean hasSiocAttachment() {
		return hasValue(ATTACHMENT);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The URI of a file attached to a Post.
	 */
	public void addSiocAttachment( Thing value  ) {
		add(ATTACHMENT, value );
	}

	/**
	 * @return all values
     * Schema Comment: The URI of a file attached to a Post.
	 */
	public Thing[] getAllSiocAttachment() {
		return (Thing[]) getAll(ATTACHMENT, Thing.class);
	}
  

    /**
     * Schema Comment: Related Posts for this Post, perhaps determined implicitly from topics or references.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Post getSiocRelatedto() {
		return (Post) get(RELATEDTO, Post.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: Related Posts for this Post, perhaps determined implicitly from topics or references.
	 */
	public void setSiocRelatedto( Post value ) {
		set(RELATEDTO, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: Related Posts for this Post, perhaps determined implicitly from topics or references.
	 */
	public void removeSiocRelatedto( Post value  ) {
		remove(RELATEDTO, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, RELATEDTO, value)
	 */
	public boolean hasSiocRelatedto( Post value) {
		return hasValue(RELATEDTO, value);
	}

	/**
	 * @return true if the model contains a statement (this, RELATEDTO, *)
	 */
	public boolean hasSiocRelatedto() {
		return hasValue(RELATEDTO);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: Related Posts for this Post, perhaps determined implicitly from topics or references.
	 */
	public void addSiocRelatedto( Post value  ) {
		add(RELATEDTO, value );
	}

	/**
	 * @return all values
     * Schema Comment: Related Posts for this Post, perhaps determined implicitly from topics or references.
	 */
	public Post[] getAllSiocRelatedto() {
		return (Post[]) getAll(RELATEDTO, Post.class);
	}
  

    /**
     * Schema Comment: A Post may have a sibling or a twin that exists in a different Forum, but the siblings may differ in some small way (for example, language, category, etc.). The sibling of this Post should be self-describing (that is, it should contain all available information).
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public Post getSiocSibling() {
		return (Post) get(SIBLING, Post.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A Post may have a sibling or a twin that exists in a different Forum, but the siblings may differ in some small way (for example, language, category, etc.). The sibling of this Post should be self-describing (that is, it should contain all available information).
	 */
	public void setSiocSibling( Post value ) {
		set(SIBLING, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A Post may have a sibling or a twin that exists in a different Forum, but the siblings may differ in some small way (for example, language, category, etc.). The sibling of this Post should be self-describing (that is, it should contain all available information).
	 */
	public void removeSiocSibling( Post value  ) {
		remove(SIBLING, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, SIBLING, value)
	 */
	public boolean hasSiocSibling( Post value) {
		return hasValue(SIBLING, value);
	}

	/**
	 * @return true if the model contains a statement (this, SIBLING, *)
	 */
	public boolean hasSiocSibling() {
		return hasValue(SIBLING);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A Post may have a sibling or a twin that exists in a different Forum, but the siblings may differ in some small way (for example, language, category, etc.). The sibling of this Post should be self-describing (that is, it should contain all available information).
	 */
	public void addSiocSibling( Post value  ) {
		add(SIBLING, value );
	}

	/**
	 * @return all values
     * Schema Comment: A Post may have a sibling or a twin that exists in a different Forum, but the siblings may differ in some small way (for example, language, category, etc.). The sibling of this Post should be self-describing (that is, it should contain all available information).
	 */
	public Post[] getAllSiocSibling() {
		return (Post[]) getAll(SIBLING, Post.class);
	}
  

    /**
     * Schema Comment: A note associated with this Post, for example if it has been edited by a User.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getSiocNote() {
		return (java.lang.String) get(NOTE, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: A note associated with this Post, for example if it has been edited by a User.
	 */
	public void setSiocNote( java.lang.String value ) {
		set(NOTE, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: A note associated with this Post, for example if it has been edited by a User.
	 */
	public void removeSiocNote( java.lang.String value  ) {
		remove(NOTE, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, NOTE, value)
	 */
	public boolean hasSiocNote( java.lang.String value) {
		return hasValue(NOTE, value);
	}

	/**
	 * @return true if the model contains a statement (this, NOTE, *)
	 */
	public boolean hasSiocNote() {
		return hasValue(NOTE);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: A note associated with this Post, for example if it has been edited by a User.
	 */
	public void addSiocNote( java.lang.String value  ) {
		add(NOTE, value );
	}

	/**
	 * @return all values
     * Schema Comment: A note associated with this Post, for example if it has been edited by a User.
	 */
	public java.lang.String[] getAllSiocNote() {
		return (java.lang.String[]) getAll(NOTE, java.lang.String.class);
	}
  

    /**
     * Schema Comment: The content of the Post.
     * @return the only value. null if none is found
     * @throws RDFDataException, if the property has multiple values
     */
	public java.lang.String getSiocContent() {
		return (java.lang.String) get(CONTENT, java.lang.String.class);
	}

	/**
	 * removes all values and sets this one
	 * @param value the value to be set
     * Schema Comment: The content of the Post.
	 */
	public void setSiocContent( java.lang.String value ) {
		set(CONTENT, value);
	}

 	/**
	 * removes a value
	 * @param value the value to be removed
     * Schema Comment: The content of the Post.
	 */
	public void removeSiocContent( java.lang.String value  ) {
		remove(CONTENT, value);
	}
 
	/**
	 * @param value
	 * @return true if the model contains a statement (this, CONTENT, value)
	 */
	public boolean hasSiocContent( java.lang.String value) {
		return hasValue(CONTENT, value);
	}

	/**
	 * @return true if the model contains a statement (this, CONTENT, *)
	 */
	public boolean hasSiocContent() {
		return hasValue(CONTENT);
	}

 
	/**
	 * adds a value
	 * @param value the value to be added
     * Schema Comment: The content of the Post.
	 */
	public void addSiocContent( java.lang.String value  ) {
		add(CONTENT, value );
	}

	/**
	 * @return all values
     * Schema Comment: The content of the Post.
	 */
	public java.lang.String[] getAllSiocContent() {
		return (java.lang.String[]) getAll(CONTENT, java.lang.String.class);
	}
   
}

  
  
